
UartIdle_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b39c  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0810b634  0810b634  0001b634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b6c0  0810b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b6c8  0810b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b6cc  0810b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  10000000  0810b6d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000014  0810b6e4  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  10000074  0810b744  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd0  100000d4  0810b7a4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000da4  0810b7a4  00020da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000334d9  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048b2  00000000  00000000  000535dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d80  00000000  00000000  00057e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001be0  00000000  00000000  00059c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ed42  00000000  00000000  0005b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019c79  00000000  00000000  0009a532  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00198b73  00000000  00000000  000b41ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024cd1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c4  00000000  00000000  0024cd9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d4 	.word	0x100000d4
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810b61c 	.word	0x0810b61c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d8 	.word	0x100000d8
 81002d4:	0810b61c 	.word	0x0810b61c

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b972 	b.w	81005d4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9e08      	ldr	r6, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	4688      	mov	r8, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	d14b      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100316:	428a      	cmp	r2, r1
 8100318:	4615      	mov	r5, r2
 810031a:	d967      	bls.n	81003ec <__udivmoddi4+0xe4>
 810031c:	fab2 f282 	clz	r2, r2
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0720 	rsb	r7, r2, #32
 8100326:	fa01 f302 	lsl.w	r3, r1, r2
 810032a:	fa20 f707 	lsr.w	r7, r0, r7
 810032e:	4095      	lsls	r5, r2
 8100330:	ea47 0803 	orr.w	r8, r7, r3
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100340:	fa1f fc85 	uxth.w	ip, r5
 8100344:	fb0e 8817 	mls	r8, lr, r7, r8
 8100348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034c:	fb07 f10c 	mul.w	r1, r7, ip
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18eb      	adds	r3, r5, r3
 8100356:	f107 30ff 	add.w	r0, r7, #4294967295
 810035a:	f080 811b 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8118 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100364:	3f02      	subs	r7, #2
 8100366:	442b      	add	r3, r5
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8100370:	fb0e 3310 	mls	r3, lr, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fc0c 	mul.w	ip, r0, ip
 810037c:	45a4      	cmp	ip, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	192c      	adds	r4, r5, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8107 	bcs.w	8100598 <__udivmoddi4+0x290>
 810038a:	45a4      	cmp	ip, r4
 810038c:	f240 8104 	bls.w	8100598 <__udivmoddi4+0x290>
 8100390:	3802      	subs	r0, #2
 8100392:	442c      	add	r4, r5
 8100394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100398:	eba4 040c 	sub.w	r4, r4, ip
 810039c:	2700      	movs	r7, #0
 810039e:	b11e      	cbz	r6, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c6 4300 	strd	r4, r3, [r6]
 81003a8:	4639      	mov	r1, r7
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d909      	bls.n	81003c6 <__udivmoddi4+0xbe>
 81003b2:	2e00      	cmp	r6, #0
 81003b4:	f000 80eb 	beq.w	810058e <__udivmoddi4+0x286>
 81003b8:	2700      	movs	r7, #0
 81003ba:	e9c6 0100 	strd	r0, r1, [r6]
 81003be:	4638      	mov	r0, r7
 81003c0:	4639      	mov	r1, r7
 81003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c6:	fab3 f783 	clz	r7, r3
 81003ca:	2f00      	cmp	r7, #0
 81003cc:	d147      	bne.n	810045e <__udivmoddi4+0x156>
 81003ce:	428b      	cmp	r3, r1
 81003d0:	d302      	bcc.n	81003d8 <__udivmoddi4+0xd0>
 81003d2:	4282      	cmp	r2, r0
 81003d4:	f200 80fa 	bhi.w	81005cc <__udivmoddi4+0x2c4>
 81003d8:	1a84      	subs	r4, r0, r2
 81003da:	eb61 0303 	sbc.w	r3, r1, r3
 81003de:	2001      	movs	r0, #1
 81003e0:	4698      	mov	r8, r3
 81003e2:	2e00      	cmp	r6, #0
 81003e4:	d0e0      	beq.n	81003a8 <__udivmoddi4+0xa0>
 81003e6:	e9c6 4800 	strd	r4, r8, [r6]
 81003ea:	e7dd      	b.n	81003a8 <__udivmoddi4+0xa0>
 81003ec:	b902      	cbnz	r2, 81003f0 <__udivmoddi4+0xe8>
 81003ee:	deff      	udf	#255	; 0xff
 81003f0:	fab2 f282 	clz	r2, r2
 81003f4:	2a00      	cmp	r2, #0
 81003f6:	f040 808f 	bne.w	8100518 <__udivmoddi4+0x210>
 81003fa:	1b49      	subs	r1, r1, r5
 81003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100400:	fa1f f885 	uxth.w	r8, r5
 8100404:	2701      	movs	r7, #1
 8100406:	fbb1 fcfe 	udiv	ip, r1, lr
 810040a:	0c23      	lsrs	r3, r4, #16
 810040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100414:	fb08 f10c 	mul.w	r1, r8, ip
 8100418:	4299      	cmp	r1, r3
 810041a:	d907      	bls.n	810042c <__udivmoddi4+0x124>
 810041c:	18eb      	adds	r3, r5, r3
 810041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100422:	d202      	bcs.n	810042a <__udivmoddi4+0x122>
 8100424:	4299      	cmp	r1, r3
 8100426:	f200 80cd 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 810042a:	4684      	mov	ip, r0
 810042c:	1a59      	subs	r1, r3, r1
 810042e:	b2a3      	uxth	r3, r4
 8100430:	fbb1 f0fe 	udiv	r0, r1, lr
 8100434:	fb0e 1410 	mls	r4, lr, r0, r1
 8100438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 810043c:	fb08 f800 	mul.w	r8, r8, r0
 8100440:	45a0      	cmp	r8, r4
 8100442:	d907      	bls.n	8100454 <__udivmoddi4+0x14c>
 8100444:	192c      	adds	r4, r5, r4
 8100446:	f100 33ff 	add.w	r3, r0, #4294967295
 810044a:	d202      	bcs.n	8100452 <__udivmoddi4+0x14a>
 810044c:	45a0      	cmp	r8, r4
 810044e:	f200 80b6 	bhi.w	81005be <__udivmoddi4+0x2b6>
 8100452:	4618      	mov	r0, r3
 8100454:	eba4 0408 	sub.w	r4, r4, r8
 8100458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810045c:	e79f      	b.n	810039e <__udivmoddi4+0x96>
 810045e:	f1c7 0c20 	rsb	ip, r7, #32
 8100462:	40bb      	lsls	r3, r7
 8100464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100468:	ea4e 0e03 	orr.w	lr, lr, r3
 810046c:	fa01 f407 	lsl.w	r4, r1, r7
 8100470:	fa20 f50c 	lsr.w	r5, r0, ip
 8100474:	fa21 f30c 	lsr.w	r3, r1, ip
 8100478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 810047c:	4325      	orrs	r5, r4
 810047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8100482:	0c2c      	lsrs	r4, r5, #16
 8100484:	fb08 3319 	mls	r3, r8, r9, r3
 8100488:	fa1f fa8e 	uxth.w	sl, lr
 810048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100490:	fb09 f40a 	mul.w	r4, r9, sl
 8100494:	429c      	cmp	r4, r3
 8100496:	fa02 f207 	lsl.w	r2, r2, r7
 810049a:	fa00 f107 	lsl.w	r1, r0, r7
 810049e:	d90b      	bls.n	81004b8 <__udivmoddi4+0x1b0>
 81004a0:	eb1e 0303 	adds.w	r3, lr, r3
 81004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 81004a8:	f080 8087 	bcs.w	81005ba <__udivmoddi4+0x2b2>
 81004ac:	429c      	cmp	r4, r3
 81004ae:	f240 8084 	bls.w	81005ba <__udivmoddi4+0x2b2>
 81004b2:	f1a9 0902 	sub.w	r9, r9, #2
 81004b6:	4473      	add	r3, lr
 81004b8:	1b1b      	subs	r3, r3, r4
 81004ba:	b2ad      	uxth	r5, r5
 81004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 81004c0:	fb08 3310 	mls	r3, r8, r0, r3
 81004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 81004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 81004cc:	45a2      	cmp	sl, r4
 81004ce:	d908      	bls.n	81004e2 <__udivmoddi4+0x1da>
 81004d0:	eb1e 0404 	adds.w	r4, lr, r4
 81004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 81004d8:	d26b      	bcs.n	81005b2 <__udivmoddi4+0x2aa>
 81004da:	45a2      	cmp	sl, r4
 81004dc:	d969      	bls.n	81005b2 <__udivmoddi4+0x2aa>
 81004de:	3802      	subs	r0, #2
 81004e0:	4474      	add	r4, lr
 81004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81004e6:	fba0 8902 	umull	r8, r9, r0, r2
 81004ea:	eba4 040a 	sub.w	r4, r4, sl
 81004ee:	454c      	cmp	r4, r9
 81004f0:	46c2      	mov	sl, r8
 81004f2:	464b      	mov	r3, r9
 81004f4:	d354      	bcc.n	81005a0 <__udivmoddi4+0x298>
 81004f6:	d051      	beq.n	810059c <__udivmoddi4+0x294>
 81004f8:	2e00      	cmp	r6, #0
 81004fa:	d069      	beq.n	81005d0 <__udivmoddi4+0x2c8>
 81004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8100500:	eb64 0403 	sbc.w	r4, r4, r3
 8100504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100508:	40fd      	lsrs	r5, r7
 810050a:	40fc      	lsrs	r4, r7
 810050c:	ea4c 0505 	orr.w	r5, ip, r5
 8100510:	e9c6 5400 	strd	r5, r4, [r6]
 8100514:	2700      	movs	r7, #0
 8100516:	e747      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100518:	f1c2 0320 	rsb	r3, r2, #32
 810051c:	fa20 f703 	lsr.w	r7, r0, r3
 8100520:	4095      	lsls	r5, r2
 8100522:	fa01 f002 	lsl.w	r0, r1, r2
 8100526:	fa21 f303 	lsr.w	r3, r1, r3
 810052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810052e:	4338      	orrs	r0, r7
 8100530:	0c01      	lsrs	r1, r0, #16
 8100532:	fbb3 f7fe 	udiv	r7, r3, lr
 8100536:	fa1f f885 	uxth.w	r8, r5
 810053a:	fb0e 3317 	mls	r3, lr, r7, r3
 810053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100542:	fb07 f308 	mul.w	r3, r7, r8
 8100546:	428b      	cmp	r3, r1
 8100548:	fa04 f402 	lsl.w	r4, r4, r2
 810054c:	d907      	bls.n	810055e <__udivmoddi4+0x256>
 810054e:	1869      	adds	r1, r5, r1
 8100550:	f107 3cff 	add.w	ip, r7, #4294967295
 8100554:	d22f      	bcs.n	81005b6 <__udivmoddi4+0x2ae>
 8100556:	428b      	cmp	r3, r1
 8100558:	d92d      	bls.n	81005b6 <__udivmoddi4+0x2ae>
 810055a:	3f02      	subs	r7, #2
 810055c:	4429      	add	r1, r5
 810055e:	1acb      	subs	r3, r1, r3
 8100560:	b281      	uxth	r1, r0
 8100562:	fbb3 f0fe 	udiv	r0, r3, lr
 8100566:	fb0e 3310 	mls	r3, lr, r0, r3
 810056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810056e:	fb00 f308 	mul.w	r3, r0, r8
 8100572:	428b      	cmp	r3, r1
 8100574:	d907      	bls.n	8100586 <__udivmoddi4+0x27e>
 8100576:	1869      	adds	r1, r5, r1
 8100578:	f100 3cff 	add.w	ip, r0, #4294967295
 810057c:	d217      	bcs.n	81005ae <__udivmoddi4+0x2a6>
 810057e:	428b      	cmp	r3, r1
 8100580:	d915      	bls.n	81005ae <__udivmoddi4+0x2a6>
 8100582:	3802      	subs	r0, #2
 8100584:	4429      	add	r1, r5
 8100586:	1ac9      	subs	r1, r1, r3
 8100588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 810058c:	e73b      	b.n	8100406 <__udivmoddi4+0xfe>
 810058e:	4637      	mov	r7, r6
 8100590:	4630      	mov	r0, r6
 8100592:	e709      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100594:	4607      	mov	r7, r0
 8100596:	e6e7      	b.n	8100368 <__udivmoddi4+0x60>
 8100598:	4618      	mov	r0, r3
 810059a:	e6fb      	b.n	8100394 <__udivmoddi4+0x8c>
 810059c:	4541      	cmp	r1, r8
 810059e:	d2ab      	bcs.n	81004f8 <__udivmoddi4+0x1f0>
 81005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 81005a4:	eb69 020e 	sbc.w	r2, r9, lr
 81005a8:	3801      	subs	r0, #1
 81005aa:	4613      	mov	r3, r2
 81005ac:	e7a4      	b.n	81004f8 <__udivmoddi4+0x1f0>
 81005ae:	4660      	mov	r0, ip
 81005b0:	e7e9      	b.n	8100586 <__udivmoddi4+0x27e>
 81005b2:	4618      	mov	r0, r3
 81005b4:	e795      	b.n	81004e2 <__udivmoddi4+0x1da>
 81005b6:	4667      	mov	r7, ip
 81005b8:	e7d1      	b.n	810055e <__udivmoddi4+0x256>
 81005ba:	4681      	mov	r9, r0
 81005bc:	e77c      	b.n	81004b8 <__udivmoddi4+0x1b0>
 81005be:	3802      	subs	r0, #2
 81005c0:	442c      	add	r4, r5
 81005c2:	e747      	b.n	8100454 <__udivmoddi4+0x14c>
 81005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c8:	442b      	add	r3, r5
 81005ca:	e72f      	b.n	810042c <__udivmoddi4+0x124>
 81005cc:	4638      	mov	r0, r7
 81005ce:	e708      	b.n	81003e2 <__udivmoddi4+0xda>
 81005d0:	4637      	mov	r7, r6
 81005d2:	e6e9      	b.n	81003a8 <__udivmoddi4+0xa0>

081005d4 <__aeabi_idiv0>:
 81005d4:	4770      	bx	lr
 81005d6:	bf00      	nop

081005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d8:	b480      	push	{r7}
 81005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005dc:	4b0b      	ldr	r3, [pc, #44]	; (810060c <SystemInit+0x34>)
 81005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005e2:	4a0a      	ldr	r2, [pc, #40]	; (810060c <SystemInit+0x34>)
 81005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005ec:	4b07      	ldr	r3, [pc, #28]	; (810060c <SystemInit+0x34>)
 81005ee:	691b      	ldr	r3, [r3, #16]
 81005f0:	4a06      	ldr	r2, [pc, #24]	; (810060c <SystemInit+0x34>)
 81005f2:	f043 0310 	orr.w	r3, r3, #16
 81005f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f8:	4b04      	ldr	r3, [pc, #16]	; (810060c <SystemInit+0x34>)
 81005fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100600:	bf00      	nop
 8100602:	46bd      	mov	sp, r7
 8100604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100608:	4770      	bx	lr
 810060a:	bf00      	nop
 810060c:	e000ed00 	.word	0xe000ed00

08100610 <UART_init>:
volatile bool  rx_buffer_received = false;

extern DMA_HandleTypeDef hdma_usart3_rx;
extern UART_HandleTypeDef* ghuart;

void UART_init() {
 8100610:	b580      	push	{r7, lr}
 8100612:	af00      	add	r7, sp, #0
    HAL_UART_MspInit(ghuart);
 8100614:	4b85      	ldr	r3, [pc, #532]	; (810082c <UART_init+0x21c>)
 8100616:	681b      	ldr	r3, [r3, #0]
 8100618:	4618      	mov	r0, r3
 810061a:	f001 faad 	bl	8101b78 <HAL_UART_MspInit>
    
    __HAL_DMA_ENABLE_IT(ghuart->hdmarx, DMA_IT_TC);
 810061e:	4b83      	ldr	r3, [pc, #524]	; (810082c <UART_init+0x21c>)
 8100620:	681b      	ldr	r3, [r3, #0]
 8100622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100624:	681b      	ldr	r3, [r3, #0]
 8100626:	4a82      	ldr	r2, [pc, #520]	; (8100830 <UART_init+0x220>)
 8100628:	4293      	cmp	r3, r2
 810062a:	d068      	beq.n	81006fe <UART_init+0xee>
 810062c:	4b7f      	ldr	r3, [pc, #508]	; (810082c <UART_init+0x21c>)
 810062e:	681b      	ldr	r3, [r3, #0]
 8100630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100632:	681b      	ldr	r3, [r3, #0]
 8100634:	4a7f      	ldr	r2, [pc, #508]	; (8100834 <UART_init+0x224>)
 8100636:	4293      	cmp	r3, r2
 8100638:	d061      	beq.n	81006fe <UART_init+0xee>
 810063a:	4b7c      	ldr	r3, [pc, #496]	; (810082c <UART_init+0x21c>)
 810063c:	681b      	ldr	r3, [r3, #0]
 810063e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100640:	681b      	ldr	r3, [r3, #0]
 8100642:	4a7d      	ldr	r2, [pc, #500]	; (8100838 <UART_init+0x228>)
 8100644:	4293      	cmp	r3, r2
 8100646:	d05a      	beq.n	81006fe <UART_init+0xee>
 8100648:	4b78      	ldr	r3, [pc, #480]	; (810082c <UART_init+0x21c>)
 810064a:	681b      	ldr	r3, [r3, #0]
 810064c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810064e:	681b      	ldr	r3, [r3, #0]
 8100650:	4a7a      	ldr	r2, [pc, #488]	; (810083c <UART_init+0x22c>)
 8100652:	4293      	cmp	r3, r2
 8100654:	d053      	beq.n	81006fe <UART_init+0xee>
 8100656:	4b75      	ldr	r3, [pc, #468]	; (810082c <UART_init+0x21c>)
 8100658:	681b      	ldr	r3, [r3, #0]
 810065a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810065c:	681b      	ldr	r3, [r3, #0]
 810065e:	4a78      	ldr	r2, [pc, #480]	; (8100840 <UART_init+0x230>)
 8100660:	4293      	cmp	r3, r2
 8100662:	d04c      	beq.n	81006fe <UART_init+0xee>
 8100664:	4b71      	ldr	r3, [pc, #452]	; (810082c <UART_init+0x21c>)
 8100666:	681b      	ldr	r3, [r3, #0]
 8100668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810066a:	681b      	ldr	r3, [r3, #0]
 810066c:	4a75      	ldr	r2, [pc, #468]	; (8100844 <UART_init+0x234>)
 810066e:	4293      	cmp	r3, r2
 8100670:	d045      	beq.n	81006fe <UART_init+0xee>
 8100672:	4b6e      	ldr	r3, [pc, #440]	; (810082c <UART_init+0x21c>)
 8100674:	681b      	ldr	r3, [r3, #0]
 8100676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100678:	681b      	ldr	r3, [r3, #0]
 810067a:	4a73      	ldr	r2, [pc, #460]	; (8100848 <UART_init+0x238>)
 810067c:	4293      	cmp	r3, r2
 810067e:	d03e      	beq.n	81006fe <UART_init+0xee>
 8100680:	4b6a      	ldr	r3, [pc, #424]	; (810082c <UART_init+0x21c>)
 8100682:	681b      	ldr	r3, [r3, #0]
 8100684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100686:	681b      	ldr	r3, [r3, #0]
 8100688:	4a70      	ldr	r2, [pc, #448]	; (810084c <UART_init+0x23c>)
 810068a:	4293      	cmp	r3, r2
 810068c:	d037      	beq.n	81006fe <UART_init+0xee>
 810068e:	4b67      	ldr	r3, [pc, #412]	; (810082c <UART_init+0x21c>)
 8100690:	681b      	ldr	r3, [r3, #0]
 8100692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100694:	681b      	ldr	r3, [r3, #0]
 8100696:	4a6e      	ldr	r2, [pc, #440]	; (8100850 <UART_init+0x240>)
 8100698:	4293      	cmp	r3, r2
 810069a:	d030      	beq.n	81006fe <UART_init+0xee>
 810069c:	4b63      	ldr	r3, [pc, #396]	; (810082c <UART_init+0x21c>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81006a2:	681b      	ldr	r3, [r3, #0]
 81006a4:	4a6b      	ldr	r2, [pc, #428]	; (8100854 <UART_init+0x244>)
 81006a6:	4293      	cmp	r3, r2
 81006a8:	d029      	beq.n	81006fe <UART_init+0xee>
 81006aa:	4b60      	ldr	r3, [pc, #384]	; (810082c <UART_init+0x21c>)
 81006ac:	681b      	ldr	r3, [r3, #0]
 81006ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81006b0:	681b      	ldr	r3, [r3, #0]
 81006b2:	4a69      	ldr	r2, [pc, #420]	; (8100858 <UART_init+0x248>)
 81006b4:	4293      	cmp	r3, r2
 81006b6:	d022      	beq.n	81006fe <UART_init+0xee>
 81006b8:	4b5c      	ldr	r3, [pc, #368]	; (810082c <UART_init+0x21c>)
 81006ba:	681b      	ldr	r3, [r3, #0]
 81006bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81006be:	681b      	ldr	r3, [r3, #0]
 81006c0:	4a66      	ldr	r2, [pc, #408]	; (810085c <UART_init+0x24c>)
 81006c2:	4293      	cmp	r3, r2
 81006c4:	d01b      	beq.n	81006fe <UART_init+0xee>
 81006c6:	4b59      	ldr	r3, [pc, #356]	; (810082c <UART_init+0x21c>)
 81006c8:	681b      	ldr	r3, [r3, #0]
 81006ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81006cc:	681b      	ldr	r3, [r3, #0]
 81006ce:	4a64      	ldr	r2, [pc, #400]	; (8100860 <UART_init+0x250>)
 81006d0:	4293      	cmp	r3, r2
 81006d2:	d014      	beq.n	81006fe <UART_init+0xee>
 81006d4:	4b55      	ldr	r3, [pc, #340]	; (810082c <UART_init+0x21c>)
 81006d6:	681b      	ldr	r3, [r3, #0]
 81006d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81006da:	681b      	ldr	r3, [r3, #0]
 81006dc:	4a61      	ldr	r2, [pc, #388]	; (8100864 <UART_init+0x254>)
 81006de:	4293      	cmp	r3, r2
 81006e0:	d00d      	beq.n	81006fe <UART_init+0xee>
 81006e2:	4b52      	ldr	r3, [pc, #328]	; (810082c <UART_init+0x21c>)
 81006e4:	681b      	ldr	r3, [r3, #0]
 81006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81006e8:	681b      	ldr	r3, [r3, #0]
 81006ea:	4a5f      	ldr	r2, [pc, #380]	; (8100868 <UART_init+0x258>)
 81006ec:	4293      	cmp	r3, r2
 81006ee:	d006      	beq.n	81006fe <UART_init+0xee>
 81006f0:	4b4e      	ldr	r3, [pc, #312]	; (810082c <UART_init+0x21c>)
 81006f2:	681b      	ldr	r3, [r3, #0]
 81006f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81006f6:	681b      	ldr	r3, [r3, #0]
 81006f8:	4a5c      	ldr	r2, [pc, #368]	; (810086c <UART_init+0x25c>)
 81006fa:	4293      	cmp	r3, r2
 81006fc:	d10c      	bne.n	8100718 <UART_init+0x108>
 81006fe:	4b4b      	ldr	r3, [pc, #300]	; (810082c <UART_init+0x21c>)
 8100700:	681b      	ldr	r3, [r3, #0]
 8100702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100704:	681b      	ldr	r3, [r3, #0]
 8100706:	681a      	ldr	r2, [r3, #0]
 8100708:	4b48      	ldr	r3, [pc, #288]	; (810082c <UART_init+0x21c>)
 810070a:	681b      	ldr	r3, [r3, #0]
 810070c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810070e:	681b      	ldr	r3, [r3, #0]
 8100710:	f042 0210 	orr.w	r2, r2, #16
 8100714:	601a      	str	r2, [r3, #0]
 8100716:	e00b      	b.n	8100730 <UART_init+0x120>
 8100718:	4b44      	ldr	r3, [pc, #272]	; (810082c <UART_init+0x21c>)
 810071a:	681b      	ldr	r3, [r3, #0]
 810071c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810071e:	681b      	ldr	r3, [r3, #0]
 8100720:	681a      	ldr	r2, [r3, #0]
 8100722:	4b42      	ldr	r3, [pc, #264]	; (810082c <UART_init+0x21c>)
 8100724:	681b      	ldr	r3, [r3, #0]
 8100726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100728:	681b      	ldr	r3, [r3, #0]
 810072a:	f042 0202 	orr.w	r2, r2, #2
 810072e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(ghuart->hdmarx);
 8100730:	4b3e      	ldr	r3, [pc, #248]	; (810082c <UART_init+0x21c>)
 8100732:	681b      	ldr	r3, [r3, #0]
 8100734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100736:	681b      	ldr	r3, [r3, #0]
 8100738:	4a3d      	ldr	r2, [pc, #244]	; (8100830 <UART_init+0x220>)
 810073a:	4293      	cmp	r3, r2
 810073c:	d068      	beq.n	8100810 <UART_init+0x200>
 810073e:	4b3b      	ldr	r3, [pc, #236]	; (810082c <UART_init+0x21c>)
 8100740:	681b      	ldr	r3, [r3, #0]
 8100742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100744:	681b      	ldr	r3, [r3, #0]
 8100746:	4a3b      	ldr	r2, [pc, #236]	; (8100834 <UART_init+0x224>)
 8100748:	4293      	cmp	r3, r2
 810074a:	d061      	beq.n	8100810 <UART_init+0x200>
 810074c:	4b37      	ldr	r3, [pc, #220]	; (810082c <UART_init+0x21c>)
 810074e:	681b      	ldr	r3, [r3, #0]
 8100750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100752:	681b      	ldr	r3, [r3, #0]
 8100754:	4a38      	ldr	r2, [pc, #224]	; (8100838 <UART_init+0x228>)
 8100756:	4293      	cmp	r3, r2
 8100758:	d05a      	beq.n	8100810 <UART_init+0x200>
 810075a:	4b34      	ldr	r3, [pc, #208]	; (810082c <UART_init+0x21c>)
 810075c:	681b      	ldr	r3, [r3, #0]
 810075e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100760:	681b      	ldr	r3, [r3, #0]
 8100762:	4a36      	ldr	r2, [pc, #216]	; (810083c <UART_init+0x22c>)
 8100764:	4293      	cmp	r3, r2
 8100766:	d053      	beq.n	8100810 <UART_init+0x200>
 8100768:	4b30      	ldr	r3, [pc, #192]	; (810082c <UART_init+0x21c>)
 810076a:	681b      	ldr	r3, [r3, #0]
 810076c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810076e:	681b      	ldr	r3, [r3, #0]
 8100770:	4a33      	ldr	r2, [pc, #204]	; (8100840 <UART_init+0x230>)
 8100772:	4293      	cmp	r3, r2
 8100774:	d04c      	beq.n	8100810 <UART_init+0x200>
 8100776:	4b2d      	ldr	r3, [pc, #180]	; (810082c <UART_init+0x21c>)
 8100778:	681b      	ldr	r3, [r3, #0]
 810077a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810077c:	681b      	ldr	r3, [r3, #0]
 810077e:	4a31      	ldr	r2, [pc, #196]	; (8100844 <UART_init+0x234>)
 8100780:	4293      	cmp	r3, r2
 8100782:	d045      	beq.n	8100810 <UART_init+0x200>
 8100784:	4b29      	ldr	r3, [pc, #164]	; (810082c <UART_init+0x21c>)
 8100786:	681b      	ldr	r3, [r3, #0]
 8100788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810078a:	681b      	ldr	r3, [r3, #0]
 810078c:	4a2e      	ldr	r2, [pc, #184]	; (8100848 <UART_init+0x238>)
 810078e:	4293      	cmp	r3, r2
 8100790:	d03e      	beq.n	8100810 <UART_init+0x200>
 8100792:	4b26      	ldr	r3, [pc, #152]	; (810082c <UART_init+0x21c>)
 8100794:	681b      	ldr	r3, [r3, #0]
 8100796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100798:	681b      	ldr	r3, [r3, #0]
 810079a:	4a2c      	ldr	r2, [pc, #176]	; (810084c <UART_init+0x23c>)
 810079c:	4293      	cmp	r3, r2
 810079e:	d037      	beq.n	8100810 <UART_init+0x200>
 81007a0:	4b22      	ldr	r3, [pc, #136]	; (810082c <UART_init+0x21c>)
 81007a2:	681b      	ldr	r3, [r3, #0]
 81007a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81007a6:	681b      	ldr	r3, [r3, #0]
 81007a8:	4a29      	ldr	r2, [pc, #164]	; (8100850 <UART_init+0x240>)
 81007aa:	4293      	cmp	r3, r2
 81007ac:	d030      	beq.n	8100810 <UART_init+0x200>
 81007ae:	4b1f      	ldr	r3, [pc, #124]	; (810082c <UART_init+0x21c>)
 81007b0:	681b      	ldr	r3, [r3, #0]
 81007b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81007b4:	681b      	ldr	r3, [r3, #0]
 81007b6:	4a27      	ldr	r2, [pc, #156]	; (8100854 <UART_init+0x244>)
 81007b8:	4293      	cmp	r3, r2
 81007ba:	d029      	beq.n	8100810 <UART_init+0x200>
 81007bc:	4b1b      	ldr	r3, [pc, #108]	; (810082c <UART_init+0x21c>)
 81007be:	681b      	ldr	r3, [r3, #0]
 81007c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81007c2:	681b      	ldr	r3, [r3, #0]
 81007c4:	4a24      	ldr	r2, [pc, #144]	; (8100858 <UART_init+0x248>)
 81007c6:	4293      	cmp	r3, r2
 81007c8:	d022      	beq.n	8100810 <UART_init+0x200>
 81007ca:	4b18      	ldr	r3, [pc, #96]	; (810082c <UART_init+0x21c>)
 81007cc:	681b      	ldr	r3, [r3, #0]
 81007ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81007d0:	681b      	ldr	r3, [r3, #0]
 81007d2:	4a22      	ldr	r2, [pc, #136]	; (810085c <UART_init+0x24c>)
 81007d4:	4293      	cmp	r3, r2
 81007d6:	d01b      	beq.n	8100810 <UART_init+0x200>
 81007d8:	4b14      	ldr	r3, [pc, #80]	; (810082c <UART_init+0x21c>)
 81007da:	681b      	ldr	r3, [r3, #0]
 81007dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81007de:	681b      	ldr	r3, [r3, #0]
 81007e0:	4a1f      	ldr	r2, [pc, #124]	; (8100860 <UART_init+0x250>)
 81007e2:	4293      	cmp	r3, r2
 81007e4:	d014      	beq.n	8100810 <UART_init+0x200>
 81007e6:	4b11      	ldr	r3, [pc, #68]	; (810082c <UART_init+0x21c>)
 81007e8:	681b      	ldr	r3, [r3, #0]
 81007ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81007ec:	681b      	ldr	r3, [r3, #0]
 81007ee:	4a1d      	ldr	r2, [pc, #116]	; (8100864 <UART_init+0x254>)
 81007f0:	4293      	cmp	r3, r2
 81007f2:	d00d      	beq.n	8100810 <UART_init+0x200>
 81007f4:	4b0d      	ldr	r3, [pc, #52]	; (810082c <UART_init+0x21c>)
 81007f6:	681b      	ldr	r3, [r3, #0]
 81007f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81007fa:	681b      	ldr	r3, [r3, #0]
 81007fc:	4a1a      	ldr	r2, [pc, #104]	; (8100868 <UART_init+0x258>)
 81007fe:	4293      	cmp	r3, r2
 8100800:	d006      	beq.n	8100810 <UART_init+0x200>
 8100802:	4b0a      	ldr	r3, [pc, #40]	; (810082c <UART_init+0x21c>)
 8100804:	681b      	ldr	r3, [r3, #0]
 8100806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100808:	681b      	ldr	r3, [r3, #0]
 810080a:	4a18      	ldr	r2, [pc, #96]	; (810086c <UART_init+0x25c>)
 810080c:	4293      	cmp	r3, r2
 810080e:	d12f      	bne.n	8100870 <UART_init+0x260>
 8100810:	4b06      	ldr	r3, [pc, #24]	; (810082c <UART_init+0x21c>)
 8100812:	681b      	ldr	r3, [r3, #0]
 8100814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100816:	681b      	ldr	r3, [r3, #0]
 8100818:	681a      	ldr	r2, [r3, #0]
 810081a:	4b04      	ldr	r3, [pc, #16]	; (810082c <UART_init+0x21c>)
 810081c:	681b      	ldr	r3, [r3, #0]
 810081e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100820:	681b      	ldr	r3, [r3, #0]
 8100822:	f042 0201 	orr.w	r2, r2, #1
 8100826:	601a      	str	r2, [r3, #0]
 8100828:	e02e      	b.n	8100888 <UART_init+0x278>
 810082a:	bf00      	nop
 810082c:	10000008 	.word	0x10000008
 8100830:	40020010 	.word	0x40020010
 8100834:	40020028 	.word	0x40020028
 8100838:	40020040 	.word	0x40020040
 810083c:	40020058 	.word	0x40020058
 8100840:	40020070 	.word	0x40020070
 8100844:	40020088 	.word	0x40020088
 8100848:	400200a0 	.word	0x400200a0
 810084c:	400200b8 	.word	0x400200b8
 8100850:	40020410 	.word	0x40020410
 8100854:	40020428 	.word	0x40020428
 8100858:	40020440 	.word	0x40020440
 810085c:	40020458 	.word	0x40020458
 8100860:	40020470 	.word	0x40020470
 8100864:	40020488 	.word	0x40020488
 8100868:	400204a0 	.word	0x400204a0
 810086c:	400204b8 	.word	0x400204b8
 8100870:	4b11      	ldr	r3, [pc, #68]	; (81008b8 <UART_init+0x2a8>)
 8100872:	681b      	ldr	r3, [r3, #0]
 8100874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100876:	681b      	ldr	r3, [r3, #0]
 8100878:	681a      	ldr	r2, [r3, #0]
 810087a:	4b0f      	ldr	r3, [pc, #60]	; (81008b8 <UART_init+0x2a8>)
 810087c:	681b      	ldr	r3, [r3, #0]
 810087e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8100880:	681b      	ldr	r3, [r3, #0]
 8100882:	f042 0201 	orr.w	r2, r2, #1
 8100886:	601a      	str	r2, [r3, #0]
    __HAL_UART_ENABLE_IT(ghuart, UART_IT_IDLE);
 8100888:	4b0b      	ldr	r3, [pc, #44]	; (81008b8 <UART_init+0x2a8>)
 810088a:	681b      	ldr	r3, [r3, #0]
 810088c:	681b      	ldr	r3, [r3, #0]
 810088e:	681a      	ldr	r2, [r3, #0]
 8100890:	4b09      	ldr	r3, [pc, #36]	; (81008b8 <UART_init+0x2a8>)
 8100892:	681b      	ldr	r3, [r3, #0]
 8100894:	681b      	ldr	r3, [r3, #0]
 8100896:	f042 0210 	orr.w	r2, r2, #16
 810089a:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_IDLEFLAG(ghuart);
 810089c:	4b06      	ldr	r3, [pc, #24]	; (81008b8 <UART_init+0x2a8>)
 810089e:	681b      	ldr	r3, [r3, #0]
 81008a0:	681b      	ldr	r3, [r3, #0]
 81008a2:	2210      	movs	r2, #16
 81008a4:	621a      	str	r2, [r3, #32]
    HAL_UART_Receive_DMA(ghuart, rx_Uart_buffer, UART_BUF_SIZE);
 81008a6:	4b04      	ldr	r3, [pc, #16]	; (81008b8 <UART_init+0x2a8>)
 81008a8:	681b      	ldr	r3, [r3, #0]
 81008aa:	2232      	movs	r2, #50	; 0x32
 81008ac:	4903      	ldr	r1, [pc, #12]	; (81008bc <UART_init+0x2ac>)
 81008ae:	4618      	mov	r0, r3
 81008b0:	f008 fb3c 	bl	8108f2c <HAL_UART_Receive_DMA>
}
 81008b4:	bf00      	nop
 81008b6:	bd80      	pop	{r7, pc}
 81008b8:	10000008 	.word	0x10000008
 81008bc:	10000124 	.word	0x10000124

081008c0 <UART_Abort_Rx>:

void UART_Abort_Rx(UART_HandleTypeDef *huart) {
 81008c0:	b580      	push	{r7, lr}
 81008c2:	b082      	sub	sp, #8
 81008c4:	af00      	add	r7, sp, #0
 81008c6:	6078      	str	r0, [r7, #4]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81008c8:	687b      	ldr	r3, [r7, #4]
 81008ca:	681b      	ldr	r3, [r3, #0]
 81008cc:	689b      	ldr	r3, [r3, #8]
 81008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81008d2:	2b40      	cmp	r3, #64	; 0x40
 81008d4:	d123      	bne.n	810091e <UART_Abort_Rx+0x5e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81008d6:	687b      	ldr	r3, [r7, #4]
 81008d8:	681b      	ldr	r3, [r3, #0]
 81008da:	689a      	ldr	r2, [r3, #8]
 81008dc:	687b      	ldr	r3, [r7, #4]
 81008de:	681b      	ldr	r3, [r3, #0]
 81008e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 81008e4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 81008e6:	687b      	ldr	r3, [r7, #4]
 81008e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81008ea:	2b00      	cmp	r3, #0
 81008ec:	d017      	beq.n	810091e <UART_Abort_Rx+0x5e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 81008ee:	687b      	ldr	r3, [r7, #4]
 81008f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81008f2:	2200      	movs	r2, #0
 81008f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 81008f6:	687b      	ldr	r3, [r7, #4]
 81008f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81008fa:	4618      	mov	r0, r3
 81008fc:	f002 fb9c 	bl	8103038 <HAL_DMA_Abort>
 8100900:	4603      	mov	r3, r0
 8100902:	2b00      	cmp	r3, #0
 8100904:	d00b      	beq.n	810091e <UART_Abort_Rx+0x5e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8100906:	687b      	ldr	r3, [r7, #4]
 8100908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810090a:	4618      	mov	r0, r3
 810090c:	f004 f820 	bl	8104950 <HAL_DMA_GetError>
 8100910:	4603      	mov	r3, r0
 8100912:	2b20      	cmp	r3, #32
 8100914:	d103      	bne.n	810091e <UART_Abort_Rx+0x5e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8100916:	687b      	ldr	r3, [r7, #4]
 8100918:	2210      	movs	r2, #16
 810091a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 810091e:	687b      	ldr	r3, [r7, #4]
 8100920:	2200      	movs	r2, #0
 8100922:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8100926:	687b      	ldr	r3, [r7, #4]
 8100928:	2200      	movs	r2, #0
 810092a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 810092e:	687b      	ldr	r3, [r7, #4]
 8100930:	681b      	ldr	r3, [r3, #0]
 8100932:	220f      	movs	r2, #15
 8100934:	621a      	str	r2, [r3, #32]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8100936:	687b      	ldr	r3, [r7, #4]
 8100938:	2220      	movs	r2, #32
 810093a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 810093e:	687b      	ldr	r3, [r7, #4]
 8100940:	2220      	movs	r2, #32
 8100942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  huart->ErrorCode = HAL_UART_ERROR_NONE;    
 8100946:	687b      	ldr	r3, [r7, #4]
 8100948:	2200      	movs	r2, #0
 810094a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 810094e:	bf00      	nop
 8100950:	3708      	adds	r7, #8
 8100952:	46bd      	mov	sp, r7
 8100954:	bd80      	pop	{r7, pc}
	...

08100958 <checkReceiveData>:

void checkReceiveData(void) {
 8100958:	b580      	push	{r7, lr}
 810095a:	af00      	add	r7, sp, #0
    rx_buffer_len = UART_BUF_SIZE - READ_BIT(DMA1_Stream0->NDTR, DMA_SxNDT);
 810095c:	4b10      	ldr	r3, [pc, #64]	; (81009a0 <checkReceiveData+0x48>)
 810095e:	685b      	ldr	r3, [r3, #4]
 8100960:	b29b      	uxth	r3, r3
 8100962:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8100966:	4a0f      	ldr	r2, [pc, #60]	; (81009a4 <checkReceiveData+0x4c>)
 8100968:	6013      	str	r3, [r2, #0]
    UART_Abort_Rx(ghuart);
 810096a:	4b0f      	ldr	r3, [pc, #60]	; (81009a8 <checkReceiveData+0x50>)
 810096c:	681b      	ldr	r3, [r3, #0]
 810096e:	4618      	mov	r0, r3
 8100970:	f7ff ffa6 	bl	81008c0 <UART_Abort_Rx>

    if(rx_buffer_len != 0) {
 8100974:	4b0b      	ldr	r3, [pc, #44]	; (81009a4 <checkReceiveData+0x4c>)
 8100976:	681b      	ldr	r3, [r3, #0]
 8100978:	2b00      	cmp	r3, #0
 810097a:	d006      	beq.n	810098a <checkReceiveData+0x32>
        memcpy(rx_buffer, rx_Uart_buffer, rx_buffer_len);
 810097c:	4b09      	ldr	r3, [pc, #36]	; (81009a4 <checkReceiveData+0x4c>)
 810097e:	681b      	ldr	r3, [r3, #0]
 8100980:	461a      	mov	r2, r3
 8100982:	490a      	ldr	r1, [pc, #40]	; (81009ac <checkReceiveData+0x54>)
 8100984:	480a      	ldr	r0, [pc, #40]	; (81009b0 <checkReceiveData+0x58>)
 8100986:	f00a fe35 	bl	810b5f4 <memcpy>
    }

    HAL_UART_Transmit_DMA(ghuart, rx_buffer, rx_buffer_len);
 810098a:	4b07      	ldr	r3, [pc, #28]	; (81009a8 <checkReceiveData+0x50>)
 810098c:	6818      	ldr	r0, [r3, #0]
 810098e:	4b05      	ldr	r3, [pc, #20]	; (81009a4 <checkReceiveData+0x4c>)
 8100990:	681b      	ldr	r3, [r3, #0]
 8100992:	b29b      	uxth	r3, r3
 8100994:	461a      	mov	r2, r3
 8100996:	4906      	ldr	r1, [pc, #24]	; (81009b0 <checkReceiveData+0x58>)
 8100998:	f008 fa48 	bl	8108e2c <HAL_UART_Transmit_DMA>
}
 810099c:	bf00      	nop
 810099e:	bd80      	pop	{r7, pc}
 81009a0:	40020010 	.word	0x40020010
 81009a4:	10000158 	.word	0x10000158
 81009a8:	10000008 	.word	0x10000008
 81009ac:	10000124 	.word	0x10000124
 81009b0:	100000f0 	.word	0x100000f0

081009b4 <UART_IDLE_Handler>:


void UART_IDLE_Handler(UART_HandleTypeDef *huart) {
 81009b4:	b580      	push	{r7, lr}
 81009b6:	b084      	sub	sp, #16
 81009b8:	af00      	add	r7, sp, #0
 81009ba:	6078      	str	r0, [r7, #4]
    // following code is to get the data send before the idle 
    // interrupt is triggered, check manual 16.3.16
    uint32_t isrflags = READ_REG(huart->Instance->ISR);
 81009bc:	687b      	ldr	r3, [r7, #4]
 81009be:	681b      	ldr	r3, [r3, #0]
 81009c0:	69db      	ldr	r3, [r3, #28]
 81009c2:	60fb      	str	r3, [r7, #12]

    if((isrflags & USART_ISR_IDLE) != RESET) {
 81009c4:	68fb      	ldr	r3, [r7, #12]
 81009c6:	f003 0310 	and.w	r3, r3, #16
 81009ca:	2b00      	cmp	r3, #0
 81009cc:	d009      	beq.n	81009e2 <UART_IDLE_Handler+0x2e>
        HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 81009ce:	2104      	movs	r1, #4
 81009d0:	4809      	ldr	r0, [pc, #36]	; (81009f8 <UART_IDLE_Handler+0x44>)
 81009d2:	f005 fce9 	bl	81063a8 <HAL_GPIO_TogglePin>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 81009d6:	687b      	ldr	r3, [r7, #4]
 81009d8:	681b      	ldr	r3, [r3, #0]
 81009da:	2210      	movs	r2, #16
 81009dc:	621a      	str	r2, [r3, #32]
        checkReceiveData();
 81009de:	f7ff ffbb 	bl	8100958 <checkReceiveData>
    }


    HAL_UART_Receive_DMA(ghuart, rx_Uart_buffer, UART_BUF_SIZE);
 81009e2:	4b06      	ldr	r3, [pc, #24]	; (81009fc <UART_IDLE_Handler+0x48>)
 81009e4:	681b      	ldr	r3, [r3, #0]
 81009e6:	2232      	movs	r2, #50	; 0x32
 81009e8:	4905      	ldr	r1, [pc, #20]	; (8100a00 <UART_IDLE_Handler+0x4c>)
 81009ea:	4618      	mov	r0, r3
 81009ec:	f008 fa9e 	bl	8108f2c <HAL_UART_Receive_DMA>
}
 81009f0:	bf00      	nop
 81009f2:	3710      	adds	r7, #16
 81009f4:	46bd      	mov	sp, r7
 81009f6:	bd80      	pop	{r7, pc}
 81009f8:	58022400 	.word	0x58022400
 81009fc:	10000008 	.word	0x10000008
 8100a00:	10000124 	.word	0x10000124

08100a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100a04:	b580      	push	{r7, lr}
 8100a06:	b082      	sub	sp, #8
 8100a08:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100a0a:	4b27      	ldr	r3, [pc, #156]	; (8100aa8 <main+0xa4>)
 8100a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a10:	4a25      	ldr	r2, [pc, #148]	; (8100aa8 <main+0xa4>)
 8100a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a1a:	4b23      	ldr	r3, [pc, #140]	; (8100aa8 <main+0xa4>)
 8100a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100a24:	607b      	str	r3, [r7, #4]
 8100a26:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a28:	2001      	movs	r0, #1
 8100a2a:	f005 fcd9 	bl	81063e0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100a2e:	f006 fd8f 	bl	8107550 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100a32:	2201      	movs	r2, #1
 8100a34:	2102      	movs	r1, #2
 8100a36:	2000      	movs	r0, #0
 8100a38:	f006 fd14 	bl	8107464 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a3c:	4b1b      	ldr	r3, [pc, #108]	; (8100aac <main+0xa8>)
 8100a3e:	681b      	ldr	r3, [r3, #0]
 8100a40:	091b      	lsrs	r3, r3, #4
 8100a42:	f003 030f 	and.w	r3, r3, #15
 8100a46:	2b07      	cmp	r3, #7
 8100a48:	d108      	bne.n	8100a5c <main+0x58>
 8100a4a:	4b19      	ldr	r3, [pc, #100]	; (8100ab0 <main+0xac>)
 8100a4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100a50:	4a17      	ldr	r2, [pc, #92]	; (8100ab0 <main+0xac>)
 8100a52:	f043 0301 	orr.w	r3, r3, #1
 8100a56:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100a5a:	e007      	b.n	8100a6c <main+0x68>
 8100a5c:	4b14      	ldr	r3, [pc, #80]	; (8100ab0 <main+0xac>)
 8100a5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100a62:	4a13      	ldr	r2, [pc, #76]	; (8100ab0 <main+0xac>)
 8100a64:	f043 0301 	orr.w	r3, r3, #1
 8100a68:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100a6c:	f001 fb06 	bl	810207c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100a70:	f000 fbf4 	bl	810125c <MX_GPIO_Init>
  MX_DMA_Init();
 8100a74:	f000 fb7c 	bl	8101170 <MX_DMA_Init>
  MX_ETH_Init();
 8100a78:	f000 f81c 	bl	8100ab4 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8100a7c:	f000 f86c 	bl	8100b58 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8100a80:	f000 f8d0 	bl	8100c24 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8100a84:	f000 fb9c 	bl	81011c0 <MX_FMC_Init>
  MX_LTDC_Init();
 8100a88:	f000 f932 	bl	8100cf0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8100a8c:	f000 f9e2 	bl	8100e54 <MX_QUADSPI_Init>
  MX_SAI2_Init();
 8100a90:	f000 fa0c 	bl	8100eac <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 8100a94:	f000 fac8 	bl	8101028 <MX_SDMMC1_MMC_Init>
  MX_USB_OTG_FS_PCD_Init();
 8100a98:	f000 fb38 	bl	810110c <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8100a9c:	f000 faea 	bl	8101074 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_init();
 8100aa0:	f7ff fdb6 	bl	8100610 <UART_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100aa4:	e7fe      	b.n	8100aa4 <main+0xa0>
 8100aa6:	bf00      	nop
 8100aa8:	58024400 	.word	0x58024400
 8100aac:	e000ed00 	.word	0xe000ed00
 8100ab0:	58026400 	.word	0x58026400

08100ab4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8100ab4:	b580      	push	{r7, lr}
 8100ab6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100ab8:	4b22      	ldr	r3, [pc, #136]	; (8100b44 <MX_ETH_Init+0x90>)
 8100aba:	4a23      	ldr	r2, [pc, #140]	; (8100b48 <MX_ETH_Init+0x94>)
 8100abc:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8100abe:	4b21      	ldr	r3, [pc, #132]	; (8100b44 <MX_ETH_Init+0x90>)
 8100ac0:	685b      	ldr	r3, [r3, #4]
 8100ac2:	2200      	movs	r2, #0
 8100ac4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8100ac6:	4b1f      	ldr	r3, [pc, #124]	; (8100b44 <MX_ETH_Init+0x90>)
 8100ac8:	685b      	ldr	r3, [r3, #4]
 8100aca:	3301      	adds	r3, #1
 8100acc:	2280      	movs	r2, #128	; 0x80
 8100ace:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8100ad0:	4b1c      	ldr	r3, [pc, #112]	; (8100b44 <MX_ETH_Init+0x90>)
 8100ad2:	685b      	ldr	r3, [r3, #4]
 8100ad4:	3302      	adds	r3, #2
 8100ad6:	22e1      	movs	r2, #225	; 0xe1
 8100ad8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8100ada:	4b1a      	ldr	r3, [pc, #104]	; (8100b44 <MX_ETH_Init+0x90>)
 8100adc:	685b      	ldr	r3, [r3, #4]
 8100ade:	3303      	adds	r3, #3
 8100ae0:	2200      	movs	r2, #0
 8100ae2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8100ae4:	4b17      	ldr	r3, [pc, #92]	; (8100b44 <MX_ETH_Init+0x90>)
 8100ae6:	685b      	ldr	r3, [r3, #4]
 8100ae8:	3304      	adds	r3, #4
 8100aea:	2200      	movs	r2, #0
 8100aec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8100aee:	4b15      	ldr	r3, [pc, #84]	; (8100b44 <MX_ETH_Init+0x90>)
 8100af0:	685b      	ldr	r3, [r3, #4]
 8100af2:	3305      	adds	r3, #5
 8100af4:	2200      	movs	r2, #0
 8100af6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8100af8:	4b12      	ldr	r3, [pc, #72]	; (8100b44 <MX_ETH_Init+0x90>)
 8100afa:	2200      	movs	r2, #0
 8100afc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100afe:	4b11      	ldr	r3, [pc, #68]	; (8100b44 <MX_ETH_Init+0x90>)
 8100b00:	4a12      	ldr	r2, [pc, #72]	; (8100b4c <MX_ETH_Init+0x98>)
 8100b02:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100b04:	4b0f      	ldr	r3, [pc, #60]	; (8100b44 <MX_ETH_Init+0x90>)
 8100b06:	4a12      	ldr	r2, [pc, #72]	; (8100b50 <MX_ETH_Init+0x9c>)
 8100b08:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8100b0a:	4b0e      	ldr	r3, [pc, #56]	; (8100b44 <MX_ETH_Init+0x90>)
 8100b0c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8100b10:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100b12:	480c      	ldr	r0, [pc, #48]	; (8100b44 <MX_ETH_Init+0x90>)
 8100b14:	f004 fb10 	bl	8105138 <HAL_ETH_Init>
 8100b18:	4603      	mov	r3, r0
 8100b1a:	2b00      	cmp	r3, #0
 8100b1c:	d001      	beq.n	8100b22 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8100b1e:	f000 fc65 	bl	81013ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100b22:	2234      	movs	r2, #52	; 0x34
 8100b24:	2100      	movs	r1, #0
 8100b26:	480b      	ldr	r0, [pc, #44]	; (8100b54 <MX_ETH_Init+0xa0>)
 8100b28:	f00a fd6f 	bl	810b60a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100b2c:	4b09      	ldr	r3, [pc, #36]	; (8100b54 <MX_ETH_Init+0xa0>)
 8100b2e:	2221      	movs	r2, #33	; 0x21
 8100b30:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100b32:	4b08      	ldr	r3, [pc, #32]	; (8100b54 <MX_ETH_Init+0xa0>)
 8100b34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8100b38:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100b3a:	4b06      	ldr	r3, [pc, #24]	; (8100b54 <MX_ETH_Init+0xa0>)
 8100b3c:	2200      	movs	r2, #0
 8100b3e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100b40:	bf00      	nop
 8100b42:	bd80      	pop	{r7, pc}
 8100b44:	10000c10 	.word	0x10000c10
 8100b48:	40028000 	.word	0x40028000
 8100b4c:	10000074 	.word	0x10000074
 8100b50:	10000014 	.word	0x10000014
 8100b54:	10000c80 	.word	0x10000c80

08100b58 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8100b58:	b580      	push	{r7, lr}
 8100b5a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8100b5c:	4b2f      	ldr	r3, [pc, #188]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b5e:	4a30      	ldr	r2, [pc, #192]	; (8100c20 <MX_FDCAN1_Init+0xc8>)
 8100b60:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8100b62:	4b2e      	ldr	r3, [pc, #184]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100b68:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8100b6a:	4b2c      	ldr	r3, [pc, #176]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b6c:	2200      	movs	r2, #0
 8100b6e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8100b70:	4b2a      	ldr	r3, [pc, #168]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b72:	2200      	movs	r2, #0
 8100b74:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100b76:	4b29      	ldr	r3, [pc, #164]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b78:	2200      	movs	r2, #0
 8100b7a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8100b7c:	4b27      	ldr	r3, [pc, #156]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b7e:	2200      	movs	r2, #0
 8100b80:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8100b82:	4b26      	ldr	r3, [pc, #152]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b84:	2201      	movs	r2, #1
 8100b86:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8100b88:	4b24      	ldr	r3, [pc, #144]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b8a:	2201      	movs	r2, #1
 8100b8c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8100b8e:	4b23      	ldr	r3, [pc, #140]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b90:	2202      	movs	r2, #2
 8100b92:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8100b94:	4b21      	ldr	r3, [pc, #132]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b96:	2202      	movs	r2, #2
 8100b98:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8100b9a:	4b20      	ldr	r3, [pc, #128]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100b9c:	2201      	movs	r2, #1
 8100b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8100ba0:	4b1e      	ldr	r3, [pc, #120]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100ba2:	2201      	movs	r2, #1
 8100ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8100ba6:	4b1d      	ldr	r3, [pc, #116]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100ba8:	2201      	movs	r2, #1
 8100baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8100bac:	4b1b      	ldr	r3, [pc, #108]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bae:	2201      	movs	r2, #1
 8100bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8100bb2:	4b1a      	ldr	r3, [pc, #104]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bb4:	2200      	movs	r2, #0
 8100bb6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8100bb8:	4b18      	ldr	r3, [pc, #96]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bba:	2200      	movs	r2, #0
 8100bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8100bbe:	4b17      	ldr	r3, [pc, #92]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bc0:	2200      	movs	r2, #0
 8100bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8100bc4:	4b15      	ldr	r3, [pc, #84]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bc6:	2200      	movs	r2, #0
 8100bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100bca:	4b14      	ldr	r3, [pc, #80]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bcc:	2204      	movs	r2, #4
 8100bce:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8100bd0:	4b12      	ldr	r3, [pc, #72]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bd2:	2200      	movs	r2, #0
 8100bd4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100bd6:	4b11      	ldr	r3, [pc, #68]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bd8:	2204      	movs	r2, #4
 8100bda:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8100bdc:	4b0f      	ldr	r3, [pc, #60]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bde:	2200      	movs	r2, #0
 8100be0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100be2:	4b0e      	ldr	r3, [pc, #56]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100be4:	2204      	movs	r2, #4
 8100be6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8100be8:	4b0c      	ldr	r3, [pc, #48]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bea:	2200      	movs	r2, #0
 8100bec:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100bee:	4b0b      	ldr	r3, [pc, #44]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bf0:	2200      	movs	r2, #0
 8100bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8100bf4:	4b09      	ldr	r3, [pc, #36]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bf6:	2200      	movs	r2, #0
 8100bf8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100bfa:	4b08      	ldr	r3, [pc, #32]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100bfc:	2200      	movs	r2, #0
 8100bfe:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100c00:	4b06      	ldr	r3, [pc, #24]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100c02:	2204      	movs	r2, #4
 8100c04:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8100c06:	4805      	ldr	r0, [pc, #20]	; (8100c1c <MX_FDCAN1_Init+0xc4>)
 8100c08:	f004 feac 	bl	8105964 <HAL_FDCAN_Init>
 8100c0c:	4603      	mov	r3, r0
 8100c0e:	2b00      	cmp	r3, #0
 8100c10:	d001      	beq.n	8100c16 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8100c12:	f000 fbeb 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8100c16:	bf00      	nop
 8100c18:	bd80      	pop	{r7, pc}
 8100c1a:	bf00      	nop
 8100c1c:	10000b3c 	.word	0x10000b3c
 8100c20:	4000a000 	.word	0x4000a000

08100c24 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8100c24:	b580      	push	{r7, lr}
 8100c26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8100c28:	4b2f      	ldr	r3, [pc, #188]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c2a:	4a30      	ldr	r2, [pc, #192]	; (8100cec <MX_FDCAN2_Init+0xc8>)
 8100c2c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8100c2e:	4b2e      	ldr	r3, [pc, #184]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100c34:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8100c36:	4b2c      	ldr	r3, [pc, #176]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c38:	2200      	movs	r2, #0
 8100c3a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8100c3c:	4b2a      	ldr	r3, [pc, #168]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c3e:	2200      	movs	r2, #0
 8100c40:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8100c42:	4b29      	ldr	r3, [pc, #164]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c44:	2200      	movs	r2, #0
 8100c46:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8100c48:	4b27      	ldr	r3, [pc, #156]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c4a:	2200      	movs	r2, #0
 8100c4c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8100c4e:	4b26      	ldr	r3, [pc, #152]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c50:	2201      	movs	r2, #1
 8100c52:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8100c54:	4b24      	ldr	r3, [pc, #144]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c56:	2201      	movs	r2, #1
 8100c58:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8100c5a:	4b23      	ldr	r3, [pc, #140]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c5c:	2202      	movs	r2, #2
 8100c5e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8100c60:	4b21      	ldr	r3, [pc, #132]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c62:	2202      	movs	r2, #2
 8100c64:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8100c66:	4b20      	ldr	r3, [pc, #128]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c68:	2201      	movs	r2, #1
 8100c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100c6c:	4b1e      	ldr	r3, [pc, #120]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c6e:	2201      	movs	r2, #1
 8100c70:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8100c72:	4b1d      	ldr	r3, [pc, #116]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c74:	2201      	movs	r2, #1
 8100c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8100c78:	4b1b      	ldr	r3, [pc, #108]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c7a:	2201      	movs	r2, #1
 8100c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100c7e:	4b1a      	ldr	r3, [pc, #104]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c80:	2200      	movs	r2, #0
 8100c82:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8100c84:	4b18      	ldr	r3, [pc, #96]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c86:	2200      	movs	r2, #0
 8100c88:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100c8a:	4b17      	ldr	r3, [pc, #92]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c8c:	2200      	movs	r2, #0
 8100c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8100c90:	4b15      	ldr	r3, [pc, #84]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c92:	2200      	movs	r2, #0
 8100c94:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100c96:	4b14      	ldr	r3, [pc, #80]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c98:	2204      	movs	r2, #4
 8100c9a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8100c9c:	4b12      	ldr	r3, [pc, #72]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100c9e:	2200      	movs	r2, #0
 8100ca0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100ca2:	4b11      	ldr	r3, [pc, #68]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100ca4:	2204      	movs	r2, #4
 8100ca6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8100ca8:	4b0f      	ldr	r3, [pc, #60]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100caa:	2200      	movs	r2, #0
 8100cac:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100cae:	4b0e      	ldr	r3, [pc, #56]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100cb0:	2204      	movs	r2, #4
 8100cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8100cb4:	4b0c      	ldr	r3, [pc, #48]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100cb6:	2200      	movs	r2, #0
 8100cb8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100cba:	4b0b      	ldr	r3, [pc, #44]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100cbc:	2200      	movs	r2, #0
 8100cbe:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8100cc0:	4b09      	ldr	r3, [pc, #36]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100cc2:	2200      	movs	r2, #0
 8100cc4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100cc6:	4b08      	ldr	r3, [pc, #32]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100cc8:	2200      	movs	r2, #0
 8100cca:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100ccc:	4b06      	ldr	r3, [pc, #24]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100cce:	2204      	movs	r2, #4
 8100cd0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8100cd2:	4805      	ldr	r0, [pc, #20]	; (8100ce8 <MX_FDCAN2_Init+0xc4>)
 8100cd4:	f004 fe46 	bl	8105964 <HAL_FDCAN_Init>
 8100cd8:	4603      	mov	r3, r0
 8100cda:	2b00      	cmp	r3, #0
 8100cdc:	d001      	beq.n	8100ce2 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8100cde:	f000 fb85 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8100ce2:	bf00      	nop
 8100ce4:	bd80      	pop	{r7, pc}
 8100ce6:	bf00      	nop
 8100ce8:	10000cb4 	.word	0x10000cb4
 8100cec:	4000a400 	.word	0x4000a400

08100cf0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8100cf0:	b580      	push	{r7, lr}
 8100cf2:	b09a      	sub	sp, #104	; 0x68
 8100cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8100cf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100cfa:	2234      	movs	r2, #52	; 0x34
 8100cfc:	2100      	movs	r1, #0
 8100cfe:	4618      	mov	r0, r3
 8100d00:	f00a fc83 	bl	810b60a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8100d04:	463b      	mov	r3, r7
 8100d06:	2234      	movs	r2, #52	; 0x34
 8100d08:	2100      	movs	r1, #0
 8100d0a:	4618      	mov	r0, r3
 8100d0c:	f00a fc7d 	bl	810b60a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8100d10:	4b4e      	ldr	r3, [pc, #312]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d12:	4a4f      	ldr	r2, [pc, #316]	; (8100e50 <MX_LTDC_Init+0x160>)
 8100d14:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8100d16:	4b4d      	ldr	r3, [pc, #308]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d18:	2200      	movs	r2, #0
 8100d1a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8100d1c:	4b4b      	ldr	r3, [pc, #300]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d1e:	2200      	movs	r2, #0
 8100d20:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8100d22:	4b4a      	ldr	r3, [pc, #296]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d24:	2200      	movs	r2, #0
 8100d26:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8100d28:	4b48      	ldr	r3, [pc, #288]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d2a:	2200      	movs	r2, #0
 8100d2c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8100d2e:	4b47      	ldr	r3, [pc, #284]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d30:	2207      	movs	r2, #7
 8100d32:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8100d34:	4b45      	ldr	r3, [pc, #276]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d36:	2203      	movs	r2, #3
 8100d38:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8100d3a:	4b44      	ldr	r3, [pc, #272]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d3c:	220e      	movs	r2, #14
 8100d3e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8100d40:	4b42      	ldr	r3, [pc, #264]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d42:	2205      	movs	r2, #5
 8100d44:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8100d46:	4b41      	ldr	r3, [pc, #260]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d48:	f240 228e 	movw	r2, #654	; 0x28e
 8100d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8100d4e:	4b3f      	ldr	r3, [pc, #252]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d50:	f240 12e5 	movw	r2, #485	; 0x1e5
 8100d54:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8100d56:	4b3d      	ldr	r3, [pc, #244]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d58:	f44f 7225 	mov.w	r2, #660	; 0x294
 8100d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8100d5e:	4b3b      	ldr	r3, [pc, #236]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d60:	f240 12e7 	movw	r2, #487	; 0x1e7
 8100d64:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8100d66:	4b39      	ldr	r3, [pc, #228]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d68:	2200      	movs	r2, #0
 8100d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8100d6e:	4b37      	ldr	r3, [pc, #220]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d70:	2200      	movs	r2, #0
 8100d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8100d76:	4b35      	ldr	r3, [pc, #212]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d78:	2200      	movs	r2, #0
 8100d7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8100d7e:	4833      	ldr	r0, [pc, #204]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100d80:	f005 fb40 	bl	8106404 <HAL_LTDC_Init>
 8100d84:	4603      	mov	r3, r0
 8100d86:	2b00      	cmp	r3, #0
 8100d88:	d001      	beq.n	8100d8e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8100d8a:	f000 fb2f 	bl	81013ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8100d8e:	2300      	movs	r3, #0
 8100d90:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8100d92:	2300      	movs	r3, #0
 8100d94:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8100d96:	2300      	movs	r3, #0
 8100d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8100d9a:	2300      	movs	r3, #0
 8100d9c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8100d9e:	2300      	movs	r3, #0
 8100da0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8100da2:	2300      	movs	r3, #0
 8100da4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8100da6:	2300      	movs	r3, #0
 8100da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8100daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100dae:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8100db0:	2305      	movs	r3, #5
 8100db2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8100db4:	2300      	movs	r3, #0
 8100db6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8100db8:	2300      	movs	r3, #0
 8100dba:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8100dc0:	2300      	movs	r3, #0
 8100dc2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8100dc6:	2300      	movs	r3, #0
 8100dc8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8100dcc:	2300      	movs	r3, #0
 8100dce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8100dd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100dd6:	2200      	movs	r2, #0
 8100dd8:	4619      	mov	r1, r3
 8100dda:	481c      	ldr	r0, [pc, #112]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100ddc:	f005 fbe2 	bl	81065a4 <HAL_LTDC_ConfigLayer>
 8100de0:	4603      	mov	r3, r0
 8100de2:	2b00      	cmp	r3, #0
 8100de4:	d001      	beq.n	8100dea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8100de6:	f000 fb01 	bl	81013ec <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8100dea:	2300      	movs	r3, #0
 8100dec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8100dee:	2300      	movs	r3, #0
 8100df0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8100df2:	2300      	movs	r3, #0
 8100df4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8100df6:	2300      	movs	r3, #0
 8100df8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8100dfa:	2300      	movs	r3, #0
 8100dfc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8100dfe:	2300      	movs	r3, #0
 8100e00:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8100e02:	2300      	movs	r3, #0
 8100e04:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8100e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100e0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8100e0c:	2305      	movs	r3, #5
 8100e0e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8100e10:	2300      	movs	r3, #0
 8100e12:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8100e14:	2300      	movs	r3, #0
 8100e16:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8100e18:	2300      	movs	r3, #0
 8100e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8100e1c:	2300      	movs	r3, #0
 8100e1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8100e22:	2300      	movs	r3, #0
 8100e24:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8100e28:	2300      	movs	r3, #0
 8100e2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8100e2e:	463b      	mov	r3, r7
 8100e30:	2201      	movs	r2, #1
 8100e32:	4619      	mov	r1, r3
 8100e34:	4805      	ldr	r0, [pc, #20]	; (8100e4c <MX_LTDC_Init+0x15c>)
 8100e36:	f005 fbb5 	bl	81065a4 <HAL_LTDC_ConfigLayer>
 8100e3a:	4603      	mov	r3, r0
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d001      	beq.n	8100e44 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8100e40:	f000 fad4 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8100e44:	bf00      	nop
 8100e46:	3768      	adds	r7, #104	; 0x68
 8100e48:	46bd      	mov	sp, r7
 8100e4a:	bd80      	pop	{r7, pc}
 8100e4c:	10000a94 	.word	0x10000a94
 8100e50:	50001000 	.word	0x50001000

08100e54 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100e54:	b580      	push	{r7, lr}
 8100e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100e58:	4b12      	ldr	r3, [pc, #72]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e5a:	4a13      	ldr	r2, [pc, #76]	; (8100ea8 <MX_QUADSPI_Init+0x54>)
 8100e5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8100e5e:	4b11      	ldr	r3, [pc, #68]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e60:	22ff      	movs	r2, #255	; 0xff
 8100e62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100e64:	4b0f      	ldr	r3, [pc, #60]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e66:	2201      	movs	r2, #1
 8100e68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8100e6a:	4b0e      	ldr	r3, [pc, #56]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e6c:	2200      	movs	r2, #0
 8100e6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100e70:	4b0c      	ldr	r3, [pc, #48]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e72:	2201      	movs	r2, #1
 8100e74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100e76:	4b0b      	ldr	r3, [pc, #44]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e78:	2200      	movs	r2, #0
 8100e7a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100e7c:	4b09      	ldr	r3, [pc, #36]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e7e:	2200      	movs	r2, #0
 8100e80:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8100e82:	4b08      	ldr	r3, [pc, #32]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e84:	2200      	movs	r2, #0
 8100e86:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8100e88:	4b06      	ldr	r3, [pc, #24]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e8a:	2200      	movs	r2, #0
 8100e8c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100e8e:	4805      	ldr	r0, [pc, #20]	; (8100ea4 <MX_QUADSPI_Init+0x50>)
 8100e90:	f006 fb6c 	bl	810756c <HAL_QSPI_Init>
 8100e94:	4603      	mov	r3, r0
 8100e96:	2b00      	cmp	r3, #0
 8100e98:	d001      	beq.n	8100e9e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8100e9a:	f000 faa7 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100e9e:	bf00      	nop
 8100ea0:	bd80      	pop	{r7, pc}
 8100ea2:	bf00      	nop
 8100ea4:	10000d54 	.word	0x10000d54
 8100ea8:	52005000 	.word	0x52005000

08100eac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8100eac:	b580      	push	{r7, lr}
 8100eae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8100eb0:	4b58      	ldr	r3, [pc, #352]	; (8101014 <MX_SAI2_Init+0x168>)
 8100eb2:	4a59      	ldr	r2, [pc, #356]	; (8101018 <MX_SAI2_Init+0x16c>)
 8100eb4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100eb6:	4b57      	ldr	r3, [pc, #348]	; (8101014 <MX_SAI2_Init+0x168>)
 8100eb8:	2200      	movs	r2, #0
 8100eba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8100ebc:	4b55      	ldr	r3, [pc, #340]	; (8101014 <MX_SAI2_Init+0x168>)
 8100ebe:	2200      	movs	r2, #0
 8100ec0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8100ec2:	4b54      	ldr	r3, [pc, #336]	; (8101014 <MX_SAI2_Init+0x168>)
 8100ec4:	2240      	movs	r2, #64	; 0x40
 8100ec6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100ec8:	4b52      	ldr	r3, [pc, #328]	; (8101014 <MX_SAI2_Init+0x168>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100ece:	4b51      	ldr	r3, [pc, #324]	; (8101014 <MX_SAI2_Init+0x168>)
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8100ed4:	4b4f      	ldr	r3, [pc, #316]	; (8101014 <MX_SAI2_Init+0x168>)
 8100ed6:	2200      	movs	r2, #0
 8100ed8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100eda:	4b4e      	ldr	r3, [pc, #312]	; (8101014 <MX_SAI2_Init+0x168>)
 8100edc:	2200      	movs	r2, #0
 8100ede:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100ee0:	4b4c      	ldr	r3, [pc, #304]	; (8101014 <MX_SAI2_Init+0x168>)
 8100ee2:	2200      	movs	r2, #0
 8100ee4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100ee6:	4b4b      	ldr	r3, [pc, #300]	; (8101014 <MX_SAI2_Init+0x168>)
 8100ee8:	2200      	movs	r2, #0
 8100eea:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100eec:	4b49      	ldr	r3, [pc, #292]	; (8101014 <MX_SAI2_Init+0x168>)
 8100eee:	4a4b      	ldr	r2, [pc, #300]	; (810101c <MX_SAI2_Init+0x170>)
 8100ef0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100ef2:	4b48      	ldr	r3, [pc, #288]	; (8101014 <MX_SAI2_Init+0x168>)
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8100ef8:	4b46      	ldr	r3, [pc, #280]	; (8101014 <MX_SAI2_Init+0x168>)
 8100efa:	2200      	movs	r2, #0
 8100efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100efe:	4b45      	ldr	r3, [pc, #276]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f00:	2200      	movs	r2, #0
 8100f02:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100f04:	4b43      	ldr	r3, [pc, #268]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f06:	2200      	movs	r2, #0
 8100f08:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8100f0a:	4b42      	ldr	r3, [pc, #264]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f0c:	2200      	movs	r2, #0
 8100f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8100f12:	4b40      	ldr	r3, [pc, #256]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f14:	2201      	movs	r2, #1
 8100f16:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100f18:	4b3e      	ldr	r3, [pc, #248]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100f1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8100f20:	4b3c      	ldr	r3, [pc, #240]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f22:	2208      	movs	r2, #8
 8100f24:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8100f26:	4b3b      	ldr	r3, [pc, #236]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f28:	2201      	movs	r2, #1
 8100f2a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100f2c:	4b39      	ldr	r3, [pc, #228]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f2e:	2200      	movs	r2, #0
 8100f30:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100f32:	4b38      	ldr	r3, [pc, #224]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f34:	2200      	movs	r2, #0
 8100f36:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100f38:	4b36      	ldr	r3, [pc, #216]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f3a:	2200      	movs	r2, #0
 8100f3c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8100f3e:	4b35      	ldr	r3, [pc, #212]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f40:	2200      	movs	r2, #0
 8100f42:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100f44:	4b33      	ldr	r3, [pc, #204]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f46:	2200      	movs	r2, #0
 8100f48:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8100f4a:	4b32      	ldr	r3, [pc, #200]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f4c:	2201      	movs	r2, #1
 8100f4e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8100f50:	4b30      	ldr	r3, [pc, #192]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f52:	2200      	movs	r2, #0
 8100f54:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8100f56:	482f      	ldr	r0, [pc, #188]	; (8101014 <MX_SAI2_Init+0x168>)
 8100f58:	f007 fc04 	bl	8108764 <HAL_SAI_Init>
 8100f5c:	4603      	mov	r3, r0
 8100f5e:	2b00      	cmp	r3, #0
 8100f60:	d001      	beq.n	8100f66 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8100f62:	f000 fa43 	bl	81013ec <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8100f66:	4b2e      	ldr	r3, [pc, #184]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f68:	4a2e      	ldr	r2, [pc, #184]	; (8101024 <MX_SAI2_Init+0x178>)
 8100f6a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100f6c:	4b2c      	ldr	r3, [pc, #176]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8100f72:	4b2b      	ldr	r3, [pc, #172]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f74:	2203      	movs	r2, #3
 8100f76:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8100f78:	4b29      	ldr	r3, [pc, #164]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f7a:	2240      	movs	r2, #64	; 0x40
 8100f7c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100f7e:	4b28      	ldr	r3, [pc, #160]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f80:	2200      	movs	r2, #0
 8100f82:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100f84:	4b26      	ldr	r3, [pc, #152]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f86:	2200      	movs	r2, #0
 8100f88:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8100f8a:	4b25      	ldr	r3, [pc, #148]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f8c:	2201      	movs	r2, #1
 8100f8e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100f90:	4b23      	ldr	r3, [pc, #140]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f92:	2200      	movs	r2, #0
 8100f94:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100f96:	4b22      	ldr	r3, [pc, #136]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f98:	2200      	movs	r2, #0
 8100f9a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100f9c:	4b20      	ldr	r3, [pc, #128]	; (8101020 <MX_SAI2_Init+0x174>)
 8100f9e:	2200      	movs	r2, #0
 8100fa0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8100fa2:	4b1f      	ldr	r3, [pc, #124]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fa4:	2200      	movs	r2, #0
 8100fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100fa8:	4b1d      	ldr	r3, [pc, #116]	; (8101020 <MX_SAI2_Init+0x174>)
 8100faa:	2200      	movs	r2, #0
 8100fac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100fae:	4b1c      	ldr	r3, [pc, #112]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fb0:	2200      	movs	r2, #0
 8100fb2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8100fb4:	4b1a      	ldr	r3, [pc, #104]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fb6:	2200      	movs	r2, #0
 8100fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8100fbc:	4b18      	ldr	r3, [pc, #96]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fbe:	2201      	movs	r2, #1
 8100fc0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100fc2:	4b17      	ldr	r3, [pc, #92]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8100fca:	4b15      	ldr	r3, [pc, #84]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fcc:	2208      	movs	r2, #8
 8100fce:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8100fd0:	4b13      	ldr	r3, [pc, #76]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fd2:	2201      	movs	r2, #1
 8100fd4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100fd6:	4b12      	ldr	r3, [pc, #72]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fd8:	2200      	movs	r2, #0
 8100fda:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100fdc:	4b10      	ldr	r3, [pc, #64]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fde:	2200      	movs	r2, #0
 8100fe0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100fe2:	4b0f      	ldr	r3, [pc, #60]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fe4:	2200      	movs	r2, #0
 8100fe6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8100fe8:	4b0d      	ldr	r3, [pc, #52]	; (8101020 <MX_SAI2_Init+0x174>)
 8100fea:	2200      	movs	r2, #0
 8100fec:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100fee:	4b0c      	ldr	r3, [pc, #48]	; (8101020 <MX_SAI2_Init+0x174>)
 8100ff0:	2200      	movs	r2, #0
 8100ff2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8100ff4:	4b0a      	ldr	r3, [pc, #40]	; (8101020 <MX_SAI2_Init+0x174>)
 8100ff6:	2201      	movs	r2, #1
 8100ff8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8100ffa:	4b09      	ldr	r3, [pc, #36]	; (8101020 <MX_SAI2_Init+0x174>)
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8101000:	4807      	ldr	r0, [pc, #28]	; (8101020 <MX_SAI2_Init+0x174>)
 8101002:	f007 fbaf 	bl	8108764 <HAL_SAI_Init>
 8101006:	4603      	mov	r3, r0
 8101008:	2b00      	cmp	r3, #0
 810100a:	d001      	beq.n	8101010 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 810100c:	f000 f9ee 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8101010:	bf00      	nop
 8101012:	bd80      	pop	{r7, pc}
 8101014:	10000278 	.word	0x10000278
 8101018:	40015c04 	.word	0x40015c04
 810101c:	0002ee00 	.word	0x0002ee00
 8101020:	10000168 	.word	0x10000168
 8101024:	40015c24 	.word	0x40015c24

08101028 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8101028:	b580      	push	{r7, lr}
 810102a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 810102c:	4b0f      	ldr	r3, [pc, #60]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 810102e:	4a10      	ldr	r2, [pc, #64]	; (8101070 <MX_SDMMC1_MMC_Init+0x48>)
 8101030:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8101032:	4b0e      	ldr	r3, [pc, #56]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 8101034:	2200      	movs	r2, #0
 8101036:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8101038:	4b0c      	ldr	r3, [pc, #48]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 810103a:	2200      	movs	r2, #0
 810103c:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 810103e:	4b0b      	ldr	r3, [pc, #44]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 8101040:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8101044:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8101046:	4b09      	ldr	r3, [pc, #36]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 8101048:	2200      	movs	r2, #0
 810104a:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 810104c:	4b07      	ldr	r3, [pc, #28]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 810104e:	2200      	movs	r2, #0
 8101050:	615a      	str	r2, [r3, #20]
  hmmc1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8101052:	4b06      	ldr	r3, [pc, #24]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 8101054:	2201      	movs	r2, #1
 8101056:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8101058:	4804      	ldr	r0, [pc, #16]	; (810106c <MX_SDMMC1_MMC_Init+0x44>)
 810105a:	f005 fc78 	bl	810694e <HAL_MMC_Init>
 810105e:	4603      	mov	r3, r0
 8101060:	2b00      	cmp	r3, #0
 8101062:	d001      	beq.n	8101068 <MX_SDMMC1_MMC_Init+0x40>
  {
    Error_Handler();
 8101064:	f000 f9c2 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8101068:	bf00      	nop
 810106a:	bd80      	pop	{r7, pc}
 810106c:	100007a4 	.word	0x100007a4
 8101070:	52007000 	.word	0x52007000

08101074 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101074:	b580      	push	{r7, lr}
 8101076:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101078:	4b22      	ldr	r3, [pc, #136]	; (8101104 <MX_USART3_UART_Init+0x90>)
 810107a:	4a23      	ldr	r2, [pc, #140]	; (8101108 <MX_USART3_UART_Init+0x94>)
 810107c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810107e:	4b21      	ldr	r3, [pc, #132]	; (8101104 <MX_USART3_UART_Init+0x90>)
 8101080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101084:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101086:	4b1f      	ldr	r3, [pc, #124]	; (8101104 <MX_USART3_UART_Init+0x90>)
 8101088:	2200      	movs	r2, #0
 810108a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810108c:	4b1d      	ldr	r3, [pc, #116]	; (8101104 <MX_USART3_UART_Init+0x90>)
 810108e:	2200      	movs	r2, #0
 8101090:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101092:	4b1c      	ldr	r3, [pc, #112]	; (8101104 <MX_USART3_UART_Init+0x90>)
 8101094:	2200      	movs	r2, #0
 8101096:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101098:	4b1a      	ldr	r3, [pc, #104]	; (8101104 <MX_USART3_UART_Init+0x90>)
 810109a:	220c      	movs	r2, #12
 810109c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810109e:	4b19      	ldr	r3, [pc, #100]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010a0:	2200      	movs	r2, #0
 81010a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81010a4:	4b17      	ldr	r3, [pc, #92]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010a6:	2200      	movs	r2, #0
 81010a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81010aa:	4b16      	ldr	r3, [pc, #88]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010ac:	2200      	movs	r2, #0
 81010ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81010b0:	4b14      	ldr	r3, [pc, #80]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010b2:	2200      	movs	r2, #0
 81010b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81010b6:	4b13      	ldr	r3, [pc, #76]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010b8:	2200      	movs	r2, #0
 81010ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81010bc:	4811      	ldr	r0, [pc, #68]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010be:	f007 fe65 	bl	8108d8c <HAL_UART_Init>
 81010c2:	4603      	mov	r3, r0
 81010c4:	2b00      	cmp	r3, #0
 81010c6:	d001      	beq.n	81010cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81010c8:	f000 f990 	bl	81013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81010cc:	2100      	movs	r1, #0
 81010ce:	480d      	ldr	r0, [pc, #52]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010d0:	f009 f9ff 	bl	810a4d2 <HAL_UARTEx_SetTxFifoThreshold>
 81010d4:	4603      	mov	r3, r0
 81010d6:	2b00      	cmp	r3, #0
 81010d8:	d001      	beq.n	81010de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81010da:	f000 f987 	bl	81013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81010de:	2100      	movs	r1, #0
 81010e0:	4808      	ldr	r0, [pc, #32]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010e2:	f009 fa34 	bl	810a54e <HAL_UARTEx_SetRxFifoThreshold>
 81010e6:	4603      	mov	r3, r0
 81010e8:	2b00      	cmp	r3, #0
 81010ea:	d001      	beq.n	81010f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81010ec:	f000 f97e 	bl	81013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81010f0:	4804      	ldr	r0, [pc, #16]	; (8101104 <MX_USART3_UART_Init+0x90>)
 81010f2:	f009 f9b5 	bl	810a460 <HAL_UARTEx_DisableFifoMode>
 81010f6:	4603      	mov	r3, r0
 81010f8:	2b00      	cmp	r3, #0
 81010fa:	d001      	beq.n	8101100 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81010fc:	f000 f976 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101100:	bf00      	nop
 8101102:	bd80      	pop	{r7, pc}
 8101104:	10000310 	.word	0x10000310
 8101108:	40004800 	.word	0x40004800

0810110c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 810110c:	b580      	push	{r7, lr}
 810110e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8101110:	4b15      	ldr	r3, [pc, #84]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101112:	4a16      	ldr	r2, [pc, #88]	; (810116c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8101114:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8101116:	4b14      	ldr	r3, [pc, #80]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101118:	2209      	movs	r2, #9
 810111a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 810111c:	4b12      	ldr	r3, [pc, #72]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 810111e:	2202      	movs	r2, #2
 8101120:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8101122:	4b11      	ldr	r3, [pc, #68]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101124:	2200      	movs	r2, #0
 8101126:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8101128:	4b0f      	ldr	r3, [pc, #60]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 810112a:	2202      	movs	r2, #2
 810112c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 810112e:	4b0e      	ldr	r3, [pc, #56]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101130:	2200      	movs	r2, #0
 8101132:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8101134:	4b0c      	ldr	r3, [pc, #48]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101136:	2200      	movs	r2, #0
 8101138:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 810113a:	4b0b      	ldr	r3, [pc, #44]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 810113c:	2200      	movs	r2, #0
 810113e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8101140:	4b09      	ldr	r3, [pc, #36]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101142:	2201      	movs	r2, #1
 8101144:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8101146:	4b08      	ldr	r3, [pc, #32]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101148:	2201      	movs	r2, #1
 810114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 810114c:	4b06      	ldr	r3, [pc, #24]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 810114e:	2200      	movs	r2, #0
 8101150:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8101152:	4805      	ldr	r0, [pc, #20]	; (8101168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101154:	f006 f83e 	bl	81071d4 <HAL_PCD_Init>
 8101158:	4603      	mov	r3, r0
 810115a:	2b00      	cmp	r3, #0
 810115c:	d001      	beq.n	8101162 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 810115e:	f000 f945 	bl	81013ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8101162:	bf00      	nop
 8101164:	bd80      	pop	{r7, pc}
 8101166:	bf00      	nop
 8101168:	1000039c 	.word	0x1000039c
 810116c:	40080000 	.word	0x40080000

08101170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101170:	b580      	push	{r7, lr}
 8101172:	b082      	sub	sp, #8
 8101174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101176:	4b11      	ldr	r3, [pc, #68]	; (81011bc <MX_DMA_Init+0x4c>)
 8101178:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810117c:	4a0f      	ldr	r2, [pc, #60]	; (81011bc <MX_DMA_Init+0x4c>)
 810117e:	f043 0301 	orr.w	r3, r3, #1
 8101182:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101186:	4b0d      	ldr	r3, [pc, #52]	; (81011bc <MX_DMA_Init+0x4c>)
 8101188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810118c:	f003 0301 	and.w	r3, r3, #1
 8101190:	607b      	str	r3, [r7, #4]
 8101192:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101194:	2200      	movs	r2, #0
 8101196:	2100      	movs	r1, #0
 8101198:	200b      	movs	r0, #11
 810119a:	f001 f940 	bl	810241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810119e:	200b      	movs	r0, #11
 81011a0:	f001 f957 	bl	8102452 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 81011a4:	2200      	movs	r2, #0
 81011a6:	2100      	movs	r1, #0
 81011a8:	200c      	movs	r0, #12
 81011aa:	f001 f938 	bl	810241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81011ae:	200c      	movs	r0, #12
 81011b0:	f001 f94f 	bl	8102452 <HAL_NVIC_EnableIRQ>

}
 81011b4:	bf00      	nop
 81011b6:	3708      	adds	r7, #8
 81011b8:	46bd      	mov	sp, r7
 81011ba:	bd80      	pop	{r7, pc}
 81011bc:	58024400 	.word	0x58024400

081011c0 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 81011c0:	b580      	push	{r7, lr}
 81011c2:	b088      	sub	sp, #32
 81011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 81011c6:	1d3b      	adds	r3, r7, #4
 81011c8:	2200      	movs	r2, #0
 81011ca:	601a      	str	r2, [r3, #0]
 81011cc:	605a      	str	r2, [r3, #4]
 81011ce:	609a      	str	r2, [r3, #8]
 81011d0:	60da      	str	r2, [r3, #12]
 81011d2:	611a      	str	r2, [r3, #16]
 81011d4:	615a      	str	r2, [r3, #20]
 81011d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 81011d8:	4b1e      	ldr	r3, [pc, #120]	; (8101254 <MX_FMC_Init+0x94>)
 81011da:	4a1f      	ldr	r2, [pc, #124]	; (8101258 <MX_FMC_Init+0x98>)
 81011dc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 81011de:	4b1d      	ldr	r3, [pc, #116]	; (8101254 <MX_FMC_Init+0x94>)
 81011e0:	2201      	movs	r2, #1
 81011e2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 81011e4:	4b1b      	ldr	r3, [pc, #108]	; (8101254 <MX_FMC_Init+0x94>)
 81011e6:	2200      	movs	r2, #0
 81011e8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 81011ea:	4b1a      	ldr	r3, [pc, #104]	; (8101254 <MX_FMC_Init+0x94>)
 81011ec:	2204      	movs	r2, #4
 81011ee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 81011f0:	4b18      	ldr	r3, [pc, #96]	; (8101254 <MX_FMC_Init+0x94>)
 81011f2:	2210      	movs	r2, #16
 81011f4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 81011f6:	4b17      	ldr	r3, [pc, #92]	; (8101254 <MX_FMC_Init+0x94>)
 81011f8:	2240      	movs	r2, #64	; 0x40
 81011fa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 81011fc:	4b15      	ldr	r3, [pc, #84]	; (8101254 <MX_FMC_Init+0x94>)
 81011fe:	2280      	movs	r2, #128	; 0x80
 8101200:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8101202:	4b14      	ldr	r3, [pc, #80]	; (8101254 <MX_FMC_Init+0x94>)
 8101204:	2200      	movs	r2, #0
 8101206:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8101208:	4b12      	ldr	r3, [pc, #72]	; (8101254 <MX_FMC_Init+0x94>)
 810120a:	2200      	movs	r2, #0
 810120c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 810120e:	4b11      	ldr	r3, [pc, #68]	; (8101254 <MX_FMC_Init+0x94>)
 8101210:	2200      	movs	r2, #0
 8101212:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8101214:	4b0f      	ldr	r3, [pc, #60]	; (8101254 <MX_FMC_Init+0x94>)
 8101216:	2200      	movs	r2, #0
 8101218:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 810121a:	2310      	movs	r3, #16
 810121c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 810121e:	2310      	movs	r3, #16
 8101220:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8101222:	2310      	movs	r3, #16
 8101224:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8101226:	2310      	movs	r3, #16
 8101228:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 810122a:	2310      	movs	r3, #16
 810122c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 810122e:	2310      	movs	r3, #16
 8101230:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8101232:	2310      	movs	r3, #16
 8101234:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8101236:	1d3b      	adds	r3, r7, #4
 8101238:	4619      	mov	r1, r3
 810123a:	4806      	ldr	r0, [pc, #24]	; (8101254 <MX_FMC_Init+0x94>)
 810123c:	f007 fd6a 	bl	8108d14 <HAL_SDRAM_Init>
 8101240:	4603      	mov	r3, r0
 8101242:	2b00      	cmp	r3, #0
 8101244:	d001      	beq.n	810124a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8101246:	f000 f8d1 	bl	81013ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 810124a:	bf00      	nop
 810124c:	3720      	adds	r7, #32
 810124e:	46bd      	mov	sp, r7
 8101250:	bd80      	pop	{r7, pc}
 8101252:	bf00      	nop
 8101254:	10000bdc 	.word	0x10000bdc
 8101258:	52004140 	.word	0x52004140

0810125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810125c:	b580      	push	{r7, lr}
 810125e:	b090      	sub	sp, #64	; 0x40
 8101260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101266:	2200      	movs	r2, #0
 8101268:	601a      	str	r2, [r3, #0]
 810126a:	605a      	str	r2, [r3, #4]
 810126c:	609a      	str	r2, [r3, #8]
 810126e:	60da      	str	r2, [r3, #12]
 8101270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8101272:	4b5c      	ldr	r3, [pc, #368]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101278:	4a5a      	ldr	r2, [pc, #360]	; (81013e4 <MX_GPIO_Init+0x188>)
 810127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810127e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101282:	4b58      	ldr	r3, [pc, #352]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810128c:	62bb      	str	r3, [r7, #40]	; 0x28
 810128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101290:	4b54      	ldr	r3, [pc, #336]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101296:	4a53      	ldr	r2, [pc, #332]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101298:	f043 0302 	orr.w	r3, r3, #2
 810129c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012a0:	4b50      	ldr	r3, [pc, #320]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a6:	f003 0302 	and.w	r3, r3, #2
 81012aa:	627b      	str	r3, [r7, #36]	; 0x24
 81012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 81012ae:	4b4d      	ldr	r3, [pc, #308]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b4:	4a4b      	ldr	r2, [pc, #300]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012be:	4b49      	ldr	r3, [pc, #292]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81012c8:	623b      	str	r3, [r7, #32]
 81012ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81012cc:	4b45      	ldr	r3, [pc, #276]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d2:	4a44      	ldr	r2, [pc, #272]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012dc:	4b41      	ldr	r3, [pc, #260]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81012e6:	61fb      	str	r3, [r7, #28]
 81012e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012ea:	4b3e      	ldr	r3, [pc, #248]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f0:	4a3c      	ldr	r2, [pc, #240]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012f2:	f043 0304 	orr.w	r3, r3, #4
 81012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012fa:	4b3a      	ldr	r3, [pc, #232]	; (81013e4 <MX_GPIO_Init+0x188>)
 81012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101300:	f003 0304 	and.w	r3, r3, #4
 8101304:	61bb      	str	r3, [r7, #24]
 8101306:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101308:	4b36      	ldr	r3, [pc, #216]	; (81013e4 <MX_GPIO_Init+0x188>)
 810130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810130e:	4a35      	ldr	r2, [pc, #212]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101310:	f043 0310 	orr.w	r3, r3, #16
 8101314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101318:	4b32      	ldr	r3, [pc, #200]	; (81013e4 <MX_GPIO_Init+0x188>)
 810131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810131e:	f003 0310 	and.w	r3, r3, #16
 8101322:	617b      	str	r3, [r7, #20]
 8101324:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101326:	4b2f      	ldr	r3, [pc, #188]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810132c:	4a2d      	ldr	r2, [pc, #180]	; (81013e4 <MX_GPIO_Init+0x188>)
 810132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101336:	4b2b      	ldr	r3, [pc, #172]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810133c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101340:	613b      	str	r3, [r7, #16]
 8101342:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8101344:	4b27      	ldr	r3, [pc, #156]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810134a:	4a26      	ldr	r2, [pc, #152]	; (81013e4 <MX_GPIO_Init+0x188>)
 810134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101354:	4b23      	ldr	r3, [pc, #140]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810135e:	60fb      	str	r3, [r7, #12]
 8101360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101362:	4b20      	ldr	r3, [pc, #128]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101368:	4a1e      	ldr	r2, [pc, #120]	; (81013e4 <MX_GPIO_Init+0x188>)
 810136a:	f043 0308 	orr.w	r3, r3, #8
 810136e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101372:	4b1c      	ldr	r3, [pc, #112]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101378:	f003 0308 	and.w	r3, r3, #8
 810137c:	60bb      	str	r3, [r7, #8]
 810137e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101380:	4b18      	ldr	r3, [pc, #96]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101386:	4a17      	ldr	r2, [pc, #92]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101388:	f043 0301 	orr.w	r3, r3, #1
 810138c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101390:	4b14      	ldr	r3, [pc, #80]	; (81013e4 <MX_GPIO_Init+0x188>)
 8101392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101396:	f003 0301 	and.w	r3, r3, #1
 810139a:	607b      	str	r3, [r7, #4]
 810139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810139e:	4b11      	ldr	r3, [pc, #68]	; (81013e4 <MX_GPIO_Init+0x188>)
 81013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013a4:	4a0f      	ldr	r2, [pc, #60]	; (81013e4 <MX_GPIO_Init+0x188>)
 81013a6:	f043 0320 	orr.w	r3, r3, #32
 81013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013ae:	4b0d      	ldr	r3, [pc, #52]	; (81013e4 <MX_GPIO_Init+0x188>)
 81013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013b4:	f003 0320 	and.w	r3, r3, #32
 81013b8:	603b      	str	r3, [r7, #0]
 81013ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 81013bc:	2330      	movs	r3, #48	; 0x30
 81013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013c0:	2302      	movs	r3, #2
 81013c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013c4:	2300      	movs	r3, #0
 81013c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013c8:	2300      	movs	r3, #0
 81013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 81013cc:	230a      	movs	r3, #10
 81013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81013d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81013d4:	4619      	mov	r1, r3
 81013d6:	4804      	ldr	r0, [pc, #16]	; (81013e8 <MX_GPIO_Init+0x18c>)
 81013d8:	f004 fe36 	bl	8106048 <HAL_GPIO_Init>

}
 81013dc:	bf00      	nop
 81013de:	3740      	adds	r7, #64	; 0x40
 81013e0:	46bd      	mov	sp, r7
 81013e2:	bd80      	pop	{r7, pc}
 81013e4:	58024400 	.word	0x58024400
 81013e8:	58021000 	.word	0x58021000

081013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81013ec:	b480      	push	{r7}
 81013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 81013f0:	bf00      	nop
 81013f2:	46bd      	mov	sp, r7
 81013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f8:	4770      	bx	lr
	...

081013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81013fc:	b480      	push	{r7}
 81013fe:	b083      	sub	sp, #12
 8101400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101402:	4b0a      	ldr	r3, [pc, #40]	; (810142c <HAL_MspInit+0x30>)
 8101404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101408:	4a08      	ldr	r2, [pc, #32]	; (810142c <HAL_MspInit+0x30>)
 810140a:	f043 0302 	orr.w	r3, r3, #2
 810140e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101412:	4b06      	ldr	r3, [pc, #24]	; (810142c <HAL_MspInit+0x30>)
 8101414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101418:	f003 0302 	and.w	r3, r3, #2
 810141c:	607b      	str	r3, [r7, #4]
 810141e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101420:	bf00      	nop
 8101422:	370c      	adds	r7, #12
 8101424:	46bd      	mov	sp, r7
 8101426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810142a:	4770      	bx	lr
 810142c:	58024400 	.word	0x58024400

08101430 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8101430:	b580      	push	{r7, lr}
 8101432:	b092      	sub	sp, #72	; 0x48
 8101434:	af00      	add	r7, sp, #0
 8101436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101438:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810143c:	2200      	movs	r2, #0
 810143e:	601a      	str	r2, [r3, #0]
 8101440:	605a      	str	r2, [r3, #4]
 8101442:	609a      	str	r2, [r3, #8]
 8101444:	60da      	str	r2, [r3, #12]
 8101446:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8101448:	687b      	ldr	r3, [r7, #4]
 810144a:	681b      	ldr	r3, [r3, #0]
 810144c:	4a87      	ldr	r2, [pc, #540]	; (810166c <HAL_ETH_MspInit+0x23c>)
 810144e:	4293      	cmp	r3, r2
 8101450:	f040 8108 	bne.w	8101664 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8101454:	4b86      	ldr	r3, [pc, #536]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810145a:	4a85      	ldr	r2, [pc, #532]	; (8101670 <HAL_ETH_MspInit+0x240>)
 810145c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101460:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101464:	4b82      	ldr	r3, [pc, #520]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101466:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810146a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810146e:	633b      	str	r3, [r7, #48]	; 0x30
 8101470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8101472:	4b7f      	ldr	r3, [pc, #508]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101474:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101478:	4a7d      	ldr	r2, [pc, #500]	; (8101670 <HAL_ETH_MspInit+0x240>)
 810147a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810147e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101482:	4b7b      	ldr	r3, [pc, #492]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810148c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8101490:	4b77      	ldr	r3, [pc, #476]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101492:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101496:	4a76      	ldr	r2, [pc, #472]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810149c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81014a0:	4b73      	ldr	r3, [pc, #460]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81014aa:	62bb      	str	r3, [r7, #40]	; 0x28
 81014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 81014ae:	4b70      	ldr	r3, [pc, #448]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b4:	4a6e      	ldr	r2, [pc, #440]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014be:	4b6c      	ldr	r3, [pc, #432]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81014c8:	627b      	str	r3, [r7, #36]	; 0x24
 81014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81014cc:	4b68      	ldr	r3, [pc, #416]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014d2:	4a67      	ldr	r2, [pc, #412]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014d4:	f043 0310 	orr.w	r3, r3, #16
 81014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014dc:	4b64      	ldr	r3, [pc, #400]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014e2:	f003 0310 	and.w	r3, r3, #16
 81014e6:	623b      	str	r3, [r7, #32]
 81014e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 81014ea:	4b61      	ldr	r3, [pc, #388]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014f0:	4a5f      	ldr	r2, [pc, #380]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014fa:	4b5d      	ldr	r3, [pc, #372]	; (8101670 <HAL_ETH_MspInit+0x240>)
 81014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101504:	61fb      	str	r3, [r7, #28]
 8101506:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101508:	4b59      	ldr	r3, [pc, #356]	; (8101670 <HAL_ETH_MspInit+0x240>)
 810150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810150e:	4a58      	ldr	r2, [pc, #352]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101510:	f043 0304 	orr.w	r3, r3, #4
 8101514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101518:	4b55      	ldr	r3, [pc, #340]	; (8101670 <HAL_ETH_MspInit+0x240>)
 810151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810151e:	f003 0304 	and.w	r3, r3, #4
 8101522:	61bb      	str	r3, [r7, #24]
 8101524:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101526:	4b52      	ldr	r3, [pc, #328]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810152c:	4a50      	ldr	r2, [pc, #320]	; (8101670 <HAL_ETH_MspInit+0x240>)
 810152e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101536:	4b4e      	ldr	r3, [pc, #312]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810153c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101540:	617b      	str	r3, [r7, #20]
 8101542:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101544:	4b4a      	ldr	r3, [pc, #296]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810154a:	4a49      	ldr	r2, [pc, #292]	; (8101670 <HAL_ETH_MspInit+0x240>)
 810154c:	f043 0301 	orr.w	r3, r3, #1
 8101550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101554:	4b46      	ldr	r3, [pc, #280]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810155a:	f003 0301 	and.w	r3, r3, #1
 810155e:	613b      	str	r3, [r7, #16]
 8101560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101562:	4b43      	ldr	r3, [pc, #268]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101568:	4a41      	ldr	r2, [pc, #260]	; (8101670 <HAL_ETH_MspInit+0x240>)
 810156a:	f043 0302 	orr.w	r3, r3, #2
 810156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101572:	4b3f      	ldr	r3, [pc, #252]	; (8101670 <HAL_ETH_MspInit+0x240>)
 8101574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101578:	f003 0302 	and.w	r3, r3, #2
 810157c:	60fb      	str	r3, [r7, #12]
 810157e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8101580:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8101584:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101586:	2302      	movs	r3, #2
 8101588:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810158a:	2300      	movs	r3, #0
 810158c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810158e:	2300      	movs	r3, #0
 8101590:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101592:	230b      	movs	r3, #11
 8101594:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810159a:	4619      	mov	r1, r3
 810159c:	4835      	ldr	r0, [pc, #212]	; (8101674 <HAL_ETH_MspInit+0x244>)
 810159e:	f004 fd53 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 81015a2:	2304      	movs	r3, #4
 81015a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015a6:	2302      	movs	r3, #2
 81015a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015aa:	2300      	movs	r3, #0
 81015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015ae:	2300      	movs	r3, #0
 81015b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81015b2:	230b      	movs	r3, #11
 81015b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 81015b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81015ba:	4619      	mov	r1, r3
 81015bc:	482e      	ldr	r0, [pc, #184]	; (8101678 <HAL_ETH_MspInit+0x248>)
 81015be:	f004 fd43 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 81015c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81015c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015c8:	2302      	movs	r3, #2
 81015ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015cc:	2300      	movs	r3, #0
 81015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015d0:	2300      	movs	r3, #0
 81015d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81015d4:	230b      	movs	r3, #11
 81015d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 81015d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81015dc:	4619      	mov	r1, r3
 81015de:	4827      	ldr	r0, [pc, #156]	; (810167c <HAL_ETH_MspInit+0x24c>)
 81015e0:	f004 fd32 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 81015e4:	233e      	movs	r3, #62	; 0x3e
 81015e6:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015e8:	2302      	movs	r3, #2
 81015ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ec:	2300      	movs	r3, #0
 81015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015f0:	2300      	movs	r3, #0
 81015f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81015f4:	230b      	movs	r3, #11
 81015f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81015f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81015fc:	4619      	mov	r1, r3
 81015fe:	4820      	ldr	r0, [pc, #128]	; (8101680 <HAL_ETH_MspInit+0x250>)
 8101600:	f004 fd22 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8101604:	230c      	movs	r3, #12
 8101606:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101608:	2302      	movs	r3, #2
 810160a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810160c:	2300      	movs	r3, #0
 810160e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101610:	2300      	movs	r3, #0
 8101612:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101614:	230b      	movs	r3, #11
 8101616:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810161c:	4619      	mov	r1, r3
 810161e:	4819      	ldr	r0, [pc, #100]	; (8101684 <HAL_ETH_MspInit+0x254>)
 8101620:	f004 fd12 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8101624:	2386      	movs	r3, #134	; 0x86
 8101626:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101628:	2302      	movs	r3, #2
 810162a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810162c:	2300      	movs	r3, #0
 810162e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101630:	2300      	movs	r3, #0
 8101632:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101634:	230b      	movs	r3, #11
 8101636:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810163c:	4619      	mov	r1, r3
 810163e:	4812      	ldr	r0, [pc, #72]	; (8101688 <HAL_ETH_MspInit+0x258>)
 8101640:	f004 fd02 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8101644:	2303      	movs	r3, #3
 8101646:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101648:	2302      	movs	r3, #2
 810164a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810164c:	2300      	movs	r3, #0
 810164e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101650:	2300      	movs	r3, #0
 8101652:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101654:	230b      	movs	r3, #11
 8101656:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810165c:	4619      	mov	r1, r3
 810165e:	480b      	ldr	r0, [pc, #44]	; (810168c <HAL_ETH_MspInit+0x25c>)
 8101660:	f004 fcf2 	bl	8106048 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8101664:	bf00      	nop
 8101666:	3748      	adds	r7, #72	; 0x48
 8101668:	46bd      	mov	sp, r7
 810166a:	bd80      	pop	{r7, pc}
 810166c:	40028000 	.word	0x40028000
 8101670:	58024400 	.word	0x58024400
 8101674:	58021800 	.word	0x58021800
 8101678:	58021000 	.word	0x58021000
 810167c:	58022000 	.word	0x58022000
 8101680:	58020800 	.word	0x58020800
 8101684:	58021c00 	.word	0x58021c00
 8101688:	58020000 	.word	0x58020000
 810168c:	58020400 	.word	0x58020400

08101690 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8101690:	b580      	push	{r7, lr}
 8101692:	b08c      	sub	sp, #48	; 0x30
 8101694:	af00      	add	r7, sp, #0
 8101696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101698:	f107 031c 	add.w	r3, r7, #28
 810169c:	2200      	movs	r2, #0
 810169e:	601a      	str	r2, [r3, #0]
 81016a0:	605a      	str	r2, [r3, #4]
 81016a2:	609a      	str	r2, [r3, #8]
 81016a4:	60da      	str	r2, [r3, #12]
 81016a6:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	4a3e      	ldr	r2, [pc, #248]	; (81017a8 <HAL_FDCAN_MspInit+0x118>)
 81016ae:	4293      	cmp	r3, r2
 81016b0:	d138      	bne.n	8101724 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 81016b2:	4b3e      	ldr	r3, [pc, #248]	; (81017ac <HAL_FDCAN_MspInit+0x11c>)
 81016b4:	681b      	ldr	r3, [r3, #0]
 81016b6:	3301      	adds	r3, #1
 81016b8:	4a3c      	ldr	r2, [pc, #240]	; (81017ac <HAL_FDCAN_MspInit+0x11c>)
 81016ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 81016bc:	4b3b      	ldr	r3, [pc, #236]	; (81017ac <HAL_FDCAN_MspInit+0x11c>)
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	2b01      	cmp	r3, #1
 81016c2:	d10e      	bne.n	81016e2 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 81016c4:	4b3a      	ldr	r3, [pc, #232]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 81016c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81016ca:	4a39      	ldr	r2, [pc, #228]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 81016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81016d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 81016d4:	4b36      	ldr	r3, [pc, #216]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 81016d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81016de:	61bb      	str	r3, [r7, #24]
 81016e0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 81016e2:	4b33      	ldr	r3, [pc, #204]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 81016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016e8:	4a31      	ldr	r2, [pc, #196]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 81016ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016f2:	4b2f      	ldr	r3, [pc, #188]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 81016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81016fc:	617b      	str	r3, [r7, #20]
 81016fe:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN2_RXH14_Pin|FDCAN1_TX_Pin;
 8101700:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8101704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101706:	2302      	movs	r3, #2
 8101708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810170a:	2300      	movs	r3, #0
 810170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810170e:	2300      	movs	r3, #0
 8101710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8101712:	2309      	movs	r3, #9
 8101714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101716:	f107 031c 	add.w	r3, r7, #28
 810171a:	4619      	mov	r1, r3
 810171c:	4825      	ldr	r0, [pc, #148]	; (81017b4 <HAL_FDCAN_MspInit+0x124>)
 810171e:	f004 fc93 	bl	8106048 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8101722:	e03c      	b.n	810179e <HAL_FDCAN_MspInit+0x10e>
  else if(hfdcan->Instance==FDCAN2)
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	681b      	ldr	r3, [r3, #0]
 8101728:	4a23      	ldr	r2, [pc, #140]	; (81017b8 <HAL_FDCAN_MspInit+0x128>)
 810172a:	4293      	cmp	r3, r2
 810172c:	d137      	bne.n	810179e <HAL_FDCAN_MspInit+0x10e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 810172e:	4b1f      	ldr	r3, [pc, #124]	; (81017ac <HAL_FDCAN_MspInit+0x11c>)
 8101730:	681b      	ldr	r3, [r3, #0]
 8101732:	3301      	adds	r3, #1
 8101734:	4a1d      	ldr	r2, [pc, #116]	; (81017ac <HAL_FDCAN_MspInit+0x11c>)
 8101736:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8101738:	4b1c      	ldr	r3, [pc, #112]	; (81017ac <HAL_FDCAN_MspInit+0x11c>)
 810173a:	681b      	ldr	r3, [r3, #0]
 810173c:	2b01      	cmp	r3, #1
 810173e:	d10e      	bne.n	810175e <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8101740:	4b1b      	ldr	r3, [pc, #108]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 8101742:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8101746:	4a1a      	ldr	r2, [pc, #104]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 8101748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810174c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8101750:	4b17      	ldr	r3, [pc, #92]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 8101752:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8101756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810175a:	613b      	str	r3, [r7, #16]
 810175c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810175e:	4b14      	ldr	r3, [pc, #80]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 8101760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101764:	4a12      	ldr	r2, [pc, #72]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 8101766:	f043 0302 	orr.w	r3, r3, #2
 810176a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810176e:	4b10      	ldr	r3, [pc, #64]	; (81017b0 <HAL_FDCAN_MspInit+0x120>)
 8101770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101774:	f003 0302 	and.w	r3, r3, #2
 8101778:	60fb      	str	r3, [r7, #12]
 810177a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 810177c:	f242 0320 	movw	r3, #8224	; 0x2020
 8101780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101782:	2302      	movs	r3, #2
 8101784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101786:	2300      	movs	r3, #0
 8101788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810178a:	2300      	movs	r3, #0
 810178c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 810178e:	2309      	movs	r3, #9
 8101790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101792:	f107 031c 	add.w	r3, r7, #28
 8101796:	4619      	mov	r1, r3
 8101798:	4808      	ldr	r0, [pc, #32]	; (81017bc <HAL_FDCAN_MspInit+0x12c>)
 810179a:	f004 fc55 	bl	8106048 <HAL_GPIO_Init>
}
 810179e:	bf00      	nop
 81017a0:	3730      	adds	r7, #48	; 0x30
 81017a2:	46bd      	mov	sp, r7
 81017a4:	bd80      	pop	{r7, pc}
 81017a6:	bf00      	nop
 81017a8:	4000a000 	.word	0x4000a000
 81017ac:	1000015c 	.word	0x1000015c
 81017b0:	58024400 	.word	0x58024400
 81017b4:	58021c00 	.word	0x58021c00
 81017b8:	4000a400 	.word	0x4000a400
 81017bc:	58020400 	.word	0x58020400

081017c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 81017c0:	b580      	push	{r7, lr}
 81017c2:	b08c      	sub	sp, #48	; 0x30
 81017c4:	af00      	add	r7, sp, #0
 81017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017c8:	f107 031c 	add.w	r3, r7, #28
 81017cc:	2200      	movs	r2, #0
 81017ce:	601a      	str	r2, [r3, #0]
 81017d0:	605a      	str	r2, [r3, #4]
 81017d2:	609a      	str	r2, [r3, #8]
 81017d4:	60da      	str	r2, [r3, #12]
 81017d6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 81017d8:	687b      	ldr	r3, [r7, #4]
 81017da:	681b      	ldr	r3, [r3, #0]
 81017dc:	4a4a      	ldr	r2, [pc, #296]	; (8101908 <HAL_LTDC_MspInit+0x148>)
 81017de:	4293      	cmp	r3, r2
 81017e0:	f040 808e 	bne.w	8101900 <HAL_LTDC_MspInit+0x140>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 81017e4:	4b49      	ldr	r3, [pc, #292]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 81017e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 81017ea:	4a48      	ldr	r2, [pc, #288]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 81017ec:	f043 0308 	orr.w	r3, r3, #8
 81017f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 81017f4:	4b45      	ldr	r3, [pc, #276]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 81017f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 81017fa:	f003 0308 	and.w	r3, r3, #8
 81017fe:	61bb      	str	r3, [r7, #24]
 8101800:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101802:	4b42      	ldr	r3, [pc, #264]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101808:	4a40      	ldr	r2, [pc, #256]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 810180a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 810180e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101812:	4b3e      	ldr	r3, [pc, #248]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810181c:	617b      	str	r3, [r7, #20]
 810181e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8101820:	4b3a      	ldr	r3, [pc, #232]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101826:	4a39      	ldr	r2, [pc, #228]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101830:	4b36      	ldr	r3, [pc, #216]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810183a:	613b      	str	r3, [r7, #16]
 810183c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810183e:	4b33      	ldr	r3, [pc, #204]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101844:	4a31      	ldr	r2, [pc, #196]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810184a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810184e:	4b2f      	ldr	r3, [pc, #188]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101858:	60fb      	str	r3, [r7, #12]
 810185a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810185c:	4b2b      	ldr	r3, [pc, #172]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 810185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101862:	4a2a      	ldr	r2, [pc, #168]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 8101864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810186c:	4b27      	ldr	r3, [pc, #156]	; (810190c <HAL_LTDC_MspInit+0x14c>)
 810186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101876:	60bb      	str	r3, [r7, #8]
 8101878:	68bb      	ldr	r3, [r7, #8]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 810187a:	23fc      	movs	r3, #252	; 0xfc
 810187c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810187e:	2302      	movs	r3, #2
 8101880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101882:	2300      	movs	r3, #0
 8101884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101886:	2300      	movs	r3, #0
 8101888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 810188a:	230e      	movs	r3, #14
 810188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 810188e:	f107 031c 	add.w	r3, r7, #28
 8101892:	4619      	mov	r1, r3
 8101894:	481e      	ldr	r0, [pc, #120]	; (8101910 <HAL_LTDC_MspInit+0x150>)
 8101896:	f004 fbd7 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 810189a:	f24d 2303 	movw	r3, #53763	; 0xd203
 810189e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018a0:	2302      	movs	r3, #2
 81018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018a4:	2300      	movs	r3, #0
 81018a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018a8:	2300      	movs	r3, #0
 81018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81018ac:	230e      	movs	r3, #14
 81018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81018b0:	f107 031c 	add.w	r3, r7, #28
 81018b4:	4619      	mov	r1, r3
 81018b6:	4817      	ldr	r0, [pc, #92]	; (8101914 <HAL_LTDC_MspInit+0x154>)
 81018b8:	f004 fbc6 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 81018bc:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 81018c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018c2:	2302      	movs	r3, #2
 81018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018c6:	2300      	movs	r3, #0
 81018c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018ca:	2300      	movs	r3, #0
 81018cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81018ce:	230e      	movs	r3, #14
 81018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81018d2:	f107 031c 	add.w	r3, r7, #28
 81018d6:	4619      	mov	r1, r3
 81018d8:	480f      	ldr	r0, [pc, #60]	; (8101918 <HAL_LTDC_MspInit+0x158>)
 81018da:	f004 fbb5 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81018de:	f44f 7300 	mov.w	r3, #512	; 0x200
 81018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018e4:	2302      	movs	r3, #2
 81018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018e8:	2300      	movs	r3, #0
 81018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018ec:	2300      	movs	r3, #0
 81018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81018f0:	230e      	movs	r3, #14
 81018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81018f4:	f107 031c 	add.w	r3, r7, #28
 81018f8:	4619      	mov	r1, r3
 81018fa:	4808      	ldr	r0, [pc, #32]	; (810191c <HAL_LTDC_MspInit+0x15c>)
 81018fc:	f004 fba4 	bl	8106048 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8101900:	bf00      	nop
 8101902:	3730      	adds	r7, #48	; 0x30
 8101904:	46bd      	mov	sp, r7
 8101906:	bd80      	pop	{r7, pc}
 8101908:	50001000 	.word	0x50001000
 810190c:	58024400 	.word	0x58024400
 8101910:	58022800 	.word	0x58022800
 8101914:	58022000 	.word	0x58022000
 8101918:	58022400 	.word	0x58022400
 810191c:	58021c00 	.word	0x58021c00

08101920 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8101920:	b580      	push	{r7, lr}
 8101922:	b08c      	sub	sp, #48	; 0x30
 8101924:	af00      	add	r7, sp, #0
 8101926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101928:	f107 031c 	add.w	r3, r7, #28
 810192c:	2200      	movs	r2, #0
 810192e:	601a      	str	r2, [r3, #0]
 8101930:	605a      	str	r2, [r3, #4]
 8101932:	609a      	str	r2, [r3, #8]
 8101934:	60da      	str	r2, [r3, #12]
 8101936:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	681b      	ldr	r3, [r3, #0]
 810193c:	4a42      	ldr	r2, [pc, #264]	; (8101a48 <HAL_QSPI_MspInit+0x128>)
 810193e:	4293      	cmp	r3, r2
 8101940:	d17e      	bne.n	8101a40 <HAL_QSPI_MspInit+0x120>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101942:	4b42      	ldr	r3, [pc, #264]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101944:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101948:	4a40      	ldr	r2, [pc, #256]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 810194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810194e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101952:	4b3e      	ldr	r3, [pc, #248]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101954:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810195c:	61bb      	str	r3, [r7, #24]
 810195e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101960:	4b3a      	ldr	r3, [pc, #232]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101966:	4a39      	ldr	r2, [pc, #228]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101968:	f043 0302 	orr.w	r3, r3, #2
 810196c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101970:	4b36      	ldr	r3, [pc, #216]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101976:	f003 0302 	and.w	r3, r3, #2
 810197a:	617b      	str	r3, [r7, #20]
 810197c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810197e:	4b33      	ldr	r3, [pc, #204]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101984:	4a31      	ldr	r2, [pc, #196]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101986:	f043 0320 	orr.w	r3, r3, #32
 810198a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810198e:	4b2f      	ldr	r3, [pc, #188]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 8101990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101994:	f003 0320 	and.w	r3, r3, #32
 8101998:	613b      	str	r3, [r7, #16]
 810199a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810199c:	4b2b      	ldr	r3, [pc, #172]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 810199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019a2:	4a2a      	ldr	r2, [pc, #168]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 81019a4:	f043 0308 	orr.w	r3, r3, #8
 81019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019ac:	4b27      	ldr	r3, [pc, #156]	; (8101a4c <HAL_QSPI_MspInit+0x12c>)
 81019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019b2:	f003 0308 	and.w	r3, r3, #8
 81019b6:	60fb      	str	r3, [r7, #12]
 81019b8:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81019ba:	2340      	movs	r3, #64	; 0x40
 81019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019be:	2302      	movs	r3, #2
 81019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019c2:	2300      	movs	r3, #0
 81019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019c6:	2300      	movs	r3, #0
 81019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81019ca:	230a      	movs	r3, #10
 81019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81019ce:	f107 031c 	add.w	r3, r7, #28
 81019d2:	4619      	mov	r1, r3
 81019d4:	481e      	ldr	r0, [pc, #120]	; (8101a50 <HAL_QSPI_MspInit+0x130>)
 81019d6:	f004 fb37 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 81019da:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 81019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019e0:	2302      	movs	r3, #2
 81019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019e4:	2300      	movs	r3, #0
 81019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019e8:	2300      	movs	r3, #0
 81019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81019ec:	2309      	movs	r3, #9
 81019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81019f0:	f107 031c 	add.w	r3, r7, #28
 81019f4:	4619      	mov	r1, r3
 81019f6:	4817      	ldr	r0, [pc, #92]	; (8101a54 <HAL_QSPI_MspInit+0x134>)
 81019f8:	f004 fb26 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a02:	2302      	movs	r3, #2
 8101a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a06:	2300      	movs	r3, #0
 8101a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101a0e:	230a      	movs	r3, #10
 8101a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101a12:	f107 031c 	add.w	r3, r7, #28
 8101a16:	4619      	mov	r1, r3
 8101a18:	480e      	ldr	r0, [pc, #56]	; (8101a54 <HAL_QSPI_MspInit+0x134>)
 8101a1a:	f004 fb15 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8101a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a24:	2302      	movs	r3, #2
 8101a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a28:	2300      	movs	r3, #0
 8101a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a2c:	2300      	movs	r3, #0
 8101a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101a30:	2309      	movs	r3, #9
 8101a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a34:	f107 031c 	add.w	r3, r7, #28
 8101a38:	4619      	mov	r1, r3
 8101a3a:	4807      	ldr	r0, [pc, #28]	; (8101a58 <HAL_QSPI_MspInit+0x138>)
 8101a3c:	f004 fb04 	bl	8106048 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8101a40:	bf00      	nop
 8101a42:	3730      	adds	r7, #48	; 0x30
 8101a44:	46bd      	mov	sp, r7
 8101a46:	bd80      	pop	{r7, pc}
 8101a48:	52005000 	.word	0x52005000
 8101a4c:	58024400 	.word	0x58024400
 8101a50:	58020400 	.word	0x58020400
 8101a54:	58021400 	.word	0x58021400
 8101a58:	58020c00 	.word	0x58020c00

08101a5c <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8101a5c:	b580      	push	{r7, lr}
 8101a5e:	b08c      	sub	sp, #48	; 0x30
 8101a60:	af00      	add	r7, sp, #0
 8101a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a64:	f107 031c 	add.w	r3, r7, #28
 8101a68:	2200      	movs	r2, #0
 8101a6a:	601a      	str	r2, [r3, #0]
 8101a6c:	605a      	str	r2, [r3, #4]
 8101a6e:	609a      	str	r2, [r3, #8]
 8101a70:	60da      	str	r2, [r3, #12]
 8101a72:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	681b      	ldr	r3, [r3, #0]
 8101a78:	4a3a      	ldr	r2, [pc, #232]	; (8101b64 <HAL_MMC_MspInit+0x108>)
 8101a7a:	4293      	cmp	r3, r2
 8101a7c:	d16d      	bne.n	8101b5a <HAL_MMC_MspInit+0xfe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101a7e:	4b3a      	ldr	r3, [pc, #232]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101a80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101a84:	4a38      	ldr	r2, [pc, #224]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101a8a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101a8e:	4b36      	ldr	r3, [pc, #216]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101a90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101a98:	61bb      	str	r3, [r7, #24]
 8101a9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101a9c:	4b32      	ldr	r3, [pc, #200]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aa2:	4a31      	ldr	r2, [pc, #196]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101aa4:	f043 0304 	orr.w	r3, r3, #4
 8101aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101aac:	4b2e      	ldr	r3, [pc, #184]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ab2:	f003 0304 	and.w	r3, r3, #4
 8101ab6:	617b      	str	r3, [r7, #20]
 8101ab8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101aba:	4b2b      	ldr	r3, [pc, #172]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ac0:	4a29      	ldr	r2, [pc, #164]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101ac2:	f043 0302 	orr.w	r3, r3, #2
 8101ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101aca:	4b27      	ldr	r3, [pc, #156]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ad0:	f003 0302 	and.w	r3, r3, #2
 8101ad4:	613b      	str	r3, [r7, #16]
 8101ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ad8:	4b23      	ldr	r3, [pc, #140]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ade:	4a22      	ldr	r2, [pc, #136]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101ae0:	f043 0308 	orr.w	r3, r3, #8
 8101ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ae8:	4b1f      	ldr	r3, [pc, #124]	; (8101b68 <HAL_MMC_MspInit+0x10c>)
 8101aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aee:	f003 0308 	and.w	r3, r3, #8
 8101af2:	60fb      	str	r3, [r7, #12]
 8101af4:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101af6:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8101afa:	61fb      	str	r3, [r7, #28]
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101afc:	2302      	movs	r3, #2
 8101afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b00:	2300      	movs	r3, #0
 8101b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101b04:	2303      	movs	r3, #3
 8101b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101b08:	230c      	movs	r3, #12
 8101b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101b0c:	f107 031c 	add.w	r3, r7, #28
 8101b10:	4619      	mov	r1, r3
 8101b12:	4816      	ldr	r0, [pc, #88]	; (8101b6c <HAL_MMC_MspInit+0x110>)
 8101b14:	f004 fa98 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8101b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b1e:	2302      	movs	r3, #2
 8101b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b22:	2300      	movs	r3, #0
 8101b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101b26:	2303      	movs	r3, #3
 8101b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101b2a:	230c      	movs	r3, #12
 8101b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101b2e:	f107 031c 	add.w	r3, r7, #28
 8101b32:	4619      	mov	r1, r3
 8101b34:	480e      	ldr	r0, [pc, #56]	; (8101b70 <HAL_MMC_MspInit+0x114>)
 8101b36:	f004 fa87 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8101b3a:	2304      	movs	r3, #4
 8101b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b3e:	2302      	movs	r3, #2
 8101b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b42:	2300      	movs	r3, #0
 8101b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101b46:	2303      	movs	r3, #3
 8101b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101b4a:	230c      	movs	r3, #12
 8101b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101b4e:	f107 031c 	add.w	r3, r7, #28
 8101b52:	4619      	mov	r1, r3
 8101b54:	4807      	ldr	r0, [pc, #28]	; (8101b74 <HAL_MMC_MspInit+0x118>)
 8101b56:	f004 fa77 	bl	8106048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8101b5a:	bf00      	nop
 8101b5c:	3730      	adds	r7, #48	; 0x30
 8101b5e:	46bd      	mov	sp, r7
 8101b60:	bd80      	pop	{r7, pc}
 8101b62:	bf00      	nop
 8101b64:	52007000 	.word	0x52007000
 8101b68:	58024400 	.word	0x58024400
 8101b6c:	58020800 	.word	0x58020800
 8101b70:	58020400 	.word	0x58020400
 8101b74:	58020c00 	.word	0x58020c00

08101b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101b78:	b580      	push	{r7, lr}
 8101b7a:	b08a      	sub	sp, #40	; 0x28
 8101b7c:	af00      	add	r7, sp, #0
 8101b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b80:	f107 0314 	add.w	r3, r7, #20
 8101b84:	2200      	movs	r2, #0
 8101b86:	601a      	str	r2, [r3, #0]
 8101b88:	605a      	str	r2, [r3, #4]
 8101b8a:	609a      	str	r2, [r3, #8]
 8101b8c:	60da      	str	r2, [r3, #12]
 8101b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	4a4c      	ldr	r2, [pc, #304]	; (8101cc8 <HAL_UART_MspInit+0x150>)
 8101b96:	4293      	cmp	r3, r2
 8101b98:	f040 8091 	bne.w	8101cbe <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101b9c:	4b4b      	ldr	r3, [pc, #300]	; (8101ccc <HAL_UART_MspInit+0x154>)
 8101b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ba2:	4a4a      	ldr	r2, [pc, #296]	; (8101ccc <HAL_UART_MspInit+0x154>)
 8101ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101bac:	4b47      	ldr	r3, [pc, #284]	; (8101ccc <HAL_UART_MspInit+0x154>)
 8101bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101bb6:	613b      	str	r3, [r7, #16]
 8101bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101bba:	4b44      	ldr	r3, [pc, #272]	; (8101ccc <HAL_UART_MspInit+0x154>)
 8101bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc0:	4a42      	ldr	r2, [pc, #264]	; (8101ccc <HAL_UART_MspInit+0x154>)
 8101bc2:	f043 0302 	orr.w	r3, r3, #2
 8101bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bca:	4b40      	ldr	r3, [pc, #256]	; (8101ccc <HAL_UART_MspInit+0x154>)
 8101bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd0:	f003 0302 	and.w	r3, r3, #2
 8101bd4:	60fb      	str	r3, [r7, #12]
 8101bd6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8101bd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bde:	2302      	movs	r3, #2
 8101be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101be2:	2300      	movs	r3, #0
 8101be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101be6:	2300      	movs	r3, #0
 8101be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101bea:	2307      	movs	r3, #7
 8101bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101bee:	f107 0314 	add.w	r3, r7, #20
 8101bf2:	4619      	mov	r1, r3
 8101bf4:	4836      	ldr	r0, [pc, #216]	; (8101cd0 <HAL_UART_MspInit+0x158>)
 8101bf6:	f004 fa27 	bl	8106048 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8101bfa:	4b36      	ldr	r3, [pc, #216]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101bfc:	4a36      	ldr	r2, [pc, #216]	; (8101cd8 <HAL_UART_MspInit+0x160>)
 8101bfe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101c00:	4b34      	ldr	r3, [pc, #208]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c02:	222d      	movs	r2, #45	; 0x2d
 8101c04:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101c06:	4b33      	ldr	r3, [pc, #204]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c08:	2200      	movs	r2, #0
 8101c0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101c0c:	4b31      	ldr	r3, [pc, #196]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c0e:	2200      	movs	r2, #0
 8101c10:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101c12:	4b30      	ldr	r3, [pc, #192]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101c18:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101c1a:	4b2e      	ldr	r3, [pc, #184]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c1c:	2200      	movs	r2, #0
 8101c1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101c20:	4b2c      	ldr	r3, [pc, #176]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c22:	2200      	movs	r2, #0
 8101c24:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8101c26:	4b2b      	ldr	r3, [pc, #172]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c28:	2200      	movs	r2, #0
 8101c2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8101c2c:	4b29      	ldr	r3, [pc, #164]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c2e:	2200      	movs	r2, #0
 8101c30:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101c32:	4b28      	ldr	r3, [pc, #160]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c34:	2200      	movs	r2, #0
 8101c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101c38:	4826      	ldr	r0, [pc, #152]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c3a:	f000 fc39 	bl	81024b0 <HAL_DMA_Init>
 8101c3e:	4603      	mov	r3, r0
 8101c40:	2b00      	cmp	r3, #0
 8101c42:	d001      	beq.n	8101c48 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8101c44:	f7ff fbd2 	bl	81013ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	4a22      	ldr	r2, [pc, #136]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c4c:	679a      	str	r2, [r3, #120]	; 0x78
 8101c4e:	4a21      	ldr	r2, [pc, #132]	; (8101cd4 <HAL_UART_MspInit+0x15c>)
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8101c54:	4b21      	ldr	r3, [pc, #132]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c56:	4a22      	ldr	r2, [pc, #136]	; (8101ce0 <HAL_UART_MspInit+0x168>)
 8101c58:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101c5a:	4b20      	ldr	r3, [pc, #128]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c5c:	222e      	movs	r2, #46	; 0x2e
 8101c5e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101c60:	4b1e      	ldr	r3, [pc, #120]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c62:	2240      	movs	r2, #64	; 0x40
 8101c64:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101c66:	4b1d      	ldr	r3, [pc, #116]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c68:	2200      	movs	r2, #0
 8101c6a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101c6c:	4b1b      	ldr	r3, [pc, #108]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101c72:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101c74:	4b19      	ldr	r3, [pc, #100]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c76:	2200      	movs	r2, #0
 8101c78:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101c7a:	4b18      	ldr	r3, [pc, #96]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c7c:	2200      	movs	r2, #0
 8101c7e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8101c80:	4b16      	ldr	r3, [pc, #88]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c82:	2200      	movs	r2, #0
 8101c84:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8101c86:	4b15      	ldr	r3, [pc, #84]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c88:	2200      	movs	r2, #0
 8101c8a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101c8c:	4b13      	ldr	r3, [pc, #76]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c8e:	2200      	movs	r2, #0
 8101c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101c92:	4812      	ldr	r0, [pc, #72]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101c94:	f000 fc0c 	bl	81024b0 <HAL_DMA_Init>
 8101c98:	4603      	mov	r3, r0
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d001      	beq.n	8101ca2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8101c9e:	f7ff fba5 	bl	81013ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8101ca2:	687b      	ldr	r3, [r7, #4]
 8101ca4:	4a0d      	ldr	r2, [pc, #52]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101ca6:	675a      	str	r2, [r3, #116]	; 0x74
 8101ca8:	4a0c      	ldr	r2, [pc, #48]	; (8101cdc <HAL_UART_MspInit+0x164>)
 8101caa:	687b      	ldr	r3, [r7, #4]
 8101cac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8101cae:	2200      	movs	r2, #0
 8101cb0:	2100      	movs	r1, #0
 8101cb2:	2027      	movs	r0, #39	; 0x27
 8101cb4:	f000 fbb3 	bl	810241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8101cb8:	2027      	movs	r0, #39	; 0x27
 8101cba:	f000 fbca 	bl	8102452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101cbe:	bf00      	nop
 8101cc0:	3728      	adds	r7, #40	; 0x28
 8101cc2:	46bd      	mov	sp, r7
 8101cc4:	bd80      	pop	{r7, pc}
 8101cc6:	bf00      	nop
 8101cc8:	40004800 	.word	0x40004800
 8101ccc:	58024400 	.word	0x58024400
 8101cd0:	58020400 	.word	0x58020400
 8101cd4:	10000200 	.word	0x10000200
 8101cd8:	40020010 	.word	0x40020010
 8101cdc:	10000a1c 	.word	0x10000a1c
 8101ce0:	40020028 	.word	0x40020028

08101ce4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101ce4:	b580      	push	{r7, lr}
 8101ce6:	b08a      	sub	sp, #40	; 0x28
 8101ce8:	af00      	add	r7, sp, #0
 8101cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cec:	f107 0314 	add.w	r3, r7, #20
 8101cf0:	2200      	movs	r2, #0
 8101cf2:	601a      	str	r2, [r3, #0]
 8101cf4:	605a      	str	r2, [r3, #4]
 8101cf6:	609a      	str	r2, [r3, #8]
 8101cf8:	60da      	str	r2, [r3, #12]
 8101cfa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	681b      	ldr	r3, [r3, #0]
 8101d00:	4a21      	ldr	r2, [pc, #132]	; (8101d88 <HAL_PCD_MspInit+0xa4>)
 8101d02:	4293      	cmp	r3, r2
 8101d04:	d13b      	bne.n	8101d7e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101d06:	4b21      	ldr	r3, [pc, #132]	; (8101d8c <HAL_PCD_MspInit+0xa8>)
 8101d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d0c:	4a1f      	ldr	r2, [pc, #124]	; (8101d8c <HAL_PCD_MspInit+0xa8>)
 8101d0e:	f043 0301 	orr.w	r3, r3, #1
 8101d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d16:	4b1d      	ldr	r3, [pc, #116]	; (8101d8c <HAL_PCD_MspInit+0xa8>)
 8101d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d1c:	f003 0301 	and.w	r3, r3, #1
 8101d20:	613b      	str	r3, [r7, #16]
 8101d22:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8101d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101d2a:	2300      	movs	r3, #0
 8101d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d2e:	2300      	movs	r3, #0
 8101d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8101d32:	f107 0314 	add.w	r3, r7, #20
 8101d36:	4619      	mov	r1, r3
 8101d38:	4815      	ldr	r0, [pc, #84]	; (8101d90 <HAL_PCD_MspInit+0xac>)
 8101d3a:	f004 f985 	bl	8106048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8101d3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8101d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d44:	2302      	movs	r3, #2
 8101d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d48:	2300      	movs	r3, #0
 8101d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d4c:	2300      	movs	r3, #0
 8101d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8101d50:	230a      	movs	r3, #10
 8101d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101d54:	f107 0314 	add.w	r3, r7, #20
 8101d58:	4619      	mov	r1, r3
 8101d5a:	480d      	ldr	r0, [pc, #52]	; (8101d90 <HAL_PCD_MspInit+0xac>)
 8101d5c:	f004 f974 	bl	8106048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8101d60:	4b0a      	ldr	r3, [pc, #40]	; (8101d8c <HAL_PCD_MspInit+0xa8>)
 8101d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d66:	4a09      	ldr	r2, [pc, #36]	; (8101d8c <HAL_PCD_MspInit+0xa8>)
 8101d68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8101d6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101d70:	4b06      	ldr	r3, [pc, #24]	; (8101d8c <HAL_PCD_MspInit+0xa8>)
 8101d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101d7a:	60fb      	str	r3, [r7, #12]
 8101d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8101d7e:	bf00      	nop
 8101d80:	3728      	adds	r7, #40	; 0x28
 8101d82:	46bd      	mov	sp, r7
 8101d84:	bd80      	pop	{r7, pc}
 8101d86:	bf00      	nop
 8101d88:	40080000 	.word	0x40080000
 8101d8c:	58024400 	.word	0x58024400
 8101d90:	58020000 	.word	0x58020000

08101d94 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8101d94:	b580      	push	{r7, lr}
 8101d96:	b086      	sub	sp, #24
 8101d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8101d9a:	1d3b      	adds	r3, r7, #4
 8101d9c:	2200      	movs	r2, #0
 8101d9e:	601a      	str	r2, [r3, #0]
 8101da0:	605a      	str	r2, [r3, #4]
 8101da2:	609a      	str	r2, [r3, #8]
 8101da4:	60da      	str	r2, [r3, #12]
 8101da6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8101da8:	4b34      	ldr	r3, [pc, #208]	; (8101e7c <HAL_FMC_MspInit+0xe8>)
 8101daa:	681b      	ldr	r3, [r3, #0]
 8101dac:	2b00      	cmp	r3, #0
 8101dae:	d161      	bne.n	8101e74 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8101db0:	4b32      	ldr	r3, [pc, #200]	; (8101e7c <HAL_FMC_MspInit+0xe8>)
 8101db2:	2201      	movs	r2, #1
 8101db4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8101db6:	4b32      	ldr	r3, [pc, #200]	; (8101e80 <HAL_FMC_MspInit+0xec>)
 8101db8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101dbc:	4a30      	ldr	r2, [pc, #192]	; (8101e80 <HAL_FMC_MspInit+0xec>)
 8101dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101dc2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101dc6:	4b2e      	ldr	r3, [pc, #184]	; (8101e80 <HAL_FMC_MspInit+0xec>)
 8101dc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101dd0:	603b      	str	r3, [r7, #0]
 8101dd2:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8101dd4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8101dd8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dda:	2302      	movs	r3, #2
 8101ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dde:	2300      	movs	r3, #0
 8101de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101de2:	2303      	movs	r3, #3
 8101de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101de6:	230c      	movs	r3, #12
 8101de8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101dea:	1d3b      	adds	r3, r7, #4
 8101dec:	4619      	mov	r1, r3
 8101dee:	4825      	ldr	r0, [pc, #148]	; (8101e84 <HAL_FMC_MspInit+0xf0>)
 8101df0:	f004 f92a 	bl	8106048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8101df4:	f248 1333 	movw	r3, #33075	; 0x8133
 8101df8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dfa:	2302      	movs	r3, #2
 8101dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dfe:	2300      	movs	r3, #0
 8101e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101e02:	2303      	movs	r3, #3
 8101e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101e06:	230c      	movs	r3, #12
 8101e08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101e0a:	1d3b      	adds	r3, r7, #4
 8101e0c:	4619      	mov	r1, r3
 8101e0e:	481e      	ldr	r0, [pc, #120]	; (8101e88 <HAL_FMC_MspInit+0xf4>)
 8101e10:	f004 f91a 	bl	8106048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8101e14:	f24c 7303 	movw	r3, #50947	; 0xc703
 8101e18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e1a:	2302      	movs	r3, #2
 8101e1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e1e:	2300      	movs	r3, #0
 8101e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101e22:	2303      	movs	r3, #3
 8101e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101e26:	230c      	movs	r3, #12
 8101e28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101e2a:	1d3b      	adds	r3, r7, #4
 8101e2c:	4619      	mov	r1, r3
 8101e2e:	4817      	ldr	r0, [pc, #92]	; (8101e8c <HAL_FMC_MspInit+0xf8>)
 8101e30:	f004 f90a 	bl	8106048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8101e34:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8101e38:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e3a:	2302      	movs	r3, #2
 8101e3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e3e:	2300      	movs	r3, #0
 8101e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101e42:	2303      	movs	r3, #3
 8101e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101e46:	230c      	movs	r3, #12
 8101e48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101e4a:	1d3b      	adds	r3, r7, #4
 8101e4c:	4619      	mov	r1, r3
 8101e4e:	4810      	ldr	r0, [pc, #64]	; (8101e90 <HAL_FMC_MspInit+0xfc>)
 8101e50:	f004 f8fa 	bl	8106048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8101e54:	23e0      	movs	r3, #224	; 0xe0
 8101e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e58:	2302      	movs	r3, #2
 8101e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e5c:	2300      	movs	r3, #0
 8101e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101e60:	2303      	movs	r3, #3
 8101e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101e64:	230c      	movs	r3, #12
 8101e66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101e68:	1d3b      	adds	r3, r7, #4
 8101e6a:	4619      	mov	r1, r3
 8101e6c:	4809      	ldr	r0, [pc, #36]	; (8101e94 <HAL_FMC_MspInit+0x100>)
 8101e6e:	f004 f8eb 	bl	8106048 <HAL_GPIO_Init>
 8101e72:	e000      	b.n	8101e76 <HAL_FMC_MspInit+0xe2>
    return;
 8101e74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8101e76:	3718      	adds	r7, #24
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	bd80      	pop	{r7, pc}
 8101e7c:	10000160 	.word	0x10000160
 8101e80:	58024400 	.word	0x58024400
 8101e84:	58021000 	.word	0x58021000
 8101e88:	58021800 	.word	0x58021800
 8101e8c:	58020c00 	.word	0x58020c00
 8101e90:	58021400 	.word	0x58021400
 8101e94:	58021c00 	.word	0x58021c00

08101e98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8101e98:	b580      	push	{r7, lr}
 8101e9a:	b082      	sub	sp, #8
 8101e9c:	af00      	add	r7, sp, #0
 8101e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8101ea0:	f7ff ff78 	bl	8101d94 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8101ea4:	bf00      	nop
 8101ea6:	3708      	adds	r7, #8
 8101ea8:	46bd      	mov	sp, r7
 8101eaa:	bd80      	pop	{r7, pc}

08101eac <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101eac:	b580      	push	{r7, lr}
 8101eae:	b08a      	sub	sp, #40	; 0x28
 8101eb0:	af00      	add	r7, sp, #0
 8101eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	4a2e      	ldr	r2, [pc, #184]	; (8101f74 <HAL_SAI_MspInit+0xc8>)
 8101eba:	4293      	cmp	r3, r2
 8101ebc:	d127      	bne.n	8101f0e <HAL_SAI_MspInit+0x62>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8101ebe:	4b2e      	ldr	r3, [pc, #184]	; (8101f78 <HAL_SAI_MspInit+0xcc>)
 8101ec0:	681b      	ldr	r3, [r3, #0]
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	d10e      	bne.n	8101ee4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101ec6:	4b2d      	ldr	r3, [pc, #180]	; (8101f7c <HAL_SAI_MspInit+0xd0>)
 8101ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ecc:	4a2b      	ldr	r2, [pc, #172]	; (8101f7c <HAL_SAI_MspInit+0xd0>)
 8101ece:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ed6:	4b29      	ldr	r3, [pc, #164]	; (8101f7c <HAL_SAI_MspInit+0xd0>)
 8101ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101ee0:	613b      	str	r3, [r7, #16]
 8101ee2:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8101ee4:	4b24      	ldr	r3, [pc, #144]	; (8101f78 <HAL_SAI_MspInit+0xcc>)
 8101ee6:	681b      	ldr	r3, [r3, #0]
 8101ee8:	3301      	adds	r3, #1
 8101eea:	4a23      	ldr	r2, [pc, #140]	; (8101f78 <HAL_SAI_MspInit+0xcc>)
 8101eec:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8101eee:	23f0      	movs	r3, #240	; 0xf0
 8101ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ef2:	2302      	movs	r3, #2
 8101ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ef6:	2300      	movs	r3, #0
 8101ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101efa:	2300      	movs	r3, #0
 8101efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101efe:	230a      	movs	r3, #10
 8101f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101f02:	f107 0314 	add.w	r3, r7, #20
 8101f06:	4619      	mov	r1, r3
 8101f08:	481d      	ldr	r0, [pc, #116]	; (8101f80 <HAL_SAI_MspInit+0xd4>)
 8101f0a:	f004 f89d 	bl	8106048 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	4a1c      	ldr	r2, [pc, #112]	; (8101f84 <HAL_SAI_MspInit+0xd8>)
 8101f14:	4293      	cmp	r3, r2
 8101f16:	d128      	bne.n	8101f6a <HAL_SAI_MspInit+0xbe>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8101f18:	4b17      	ldr	r3, [pc, #92]	; (8101f78 <HAL_SAI_MspInit+0xcc>)
 8101f1a:	681b      	ldr	r3, [r3, #0]
 8101f1c:	2b00      	cmp	r3, #0
 8101f1e:	d10e      	bne.n	8101f3e <HAL_SAI_MspInit+0x92>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101f20:	4b16      	ldr	r3, [pc, #88]	; (8101f7c <HAL_SAI_MspInit+0xd0>)
 8101f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101f26:	4a15      	ldr	r2, [pc, #84]	; (8101f7c <HAL_SAI_MspInit+0xd0>)
 8101f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101f30:	4b12      	ldr	r3, [pc, #72]	; (8101f7c <HAL_SAI_MspInit+0xd0>)
 8101f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101f3a:	60fb      	str	r3, [r7, #12]
 8101f3c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8101f3e:	4b0e      	ldr	r3, [pc, #56]	; (8101f78 <HAL_SAI_MspInit+0xcc>)
 8101f40:	681b      	ldr	r3, [r3, #0]
 8101f42:	3301      	adds	r3, #1
 8101f44:	4a0c      	ldr	r2, [pc, #48]	; (8101f78 <HAL_SAI_MspInit+0xcc>)
 8101f46:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f4e:	2302      	movs	r3, #2
 8101f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f52:	2300      	movs	r3, #0
 8101f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f56:	2300      	movs	r3, #0
 8101f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101f5a:	230a      	movs	r3, #10
 8101f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101f5e:	f107 0314 	add.w	r3, r7, #20
 8101f62:	4619      	mov	r1, r3
 8101f64:	4808      	ldr	r0, [pc, #32]	; (8101f88 <HAL_SAI_MspInit+0xdc>)
 8101f66:	f004 f86f 	bl	8106048 <HAL_GPIO_Init>

    }
}
 8101f6a:	bf00      	nop
 8101f6c:	3728      	adds	r7, #40	; 0x28
 8101f6e:	46bd      	mov	sp, r7
 8101f70:	bd80      	pop	{r7, pc}
 8101f72:	bf00      	nop
 8101f74:	40015c04 	.word	0x40015c04
 8101f78:	10000164 	.word	0x10000164
 8101f7c:	58024400 	.word	0x58024400
 8101f80:	58022000 	.word	0x58022000
 8101f84:	40015c24 	.word	0x40015c24
 8101f88:	58021800 	.word	0x58021800

08101f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101f8c:	b480      	push	{r7}
 8101f8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8101f90:	bf00      	nop
 8101f92:	46bd      	mov	sp, r7
 8101f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f98:	4770      	bx	lr

08101f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101f9a:	b480      	push	{r7}
 8101f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101f9e:	e7fe      	b.n	8101f9e <HardFault_Handler+0x4>

08101fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101fa0:	b480      	push	{r7}
 8101fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101fa4:	e7fe      	b.n	8101fa4 <MemManage_Handler+0x4>

08101fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101fa6:	b480      	push	{r7}
 8101fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101faa:	e7fe      	b.n	8101faa <BusFault_Handler+0x4>

08101fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101fac:	b480      	push	{r7}
 8101fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101fb0:	e7fe      	b.n	8101fb0 <UsageFault_Handler+0x4>

08101fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101fb2:	b480      	push	{r7}
 8101fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101fb6:	bf00      	nop
 8101fb8:	46bd      	mov	sp, r7
 8101fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fbe:	4770      	bx	lr

08101fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101fc0:	b480      	push	{r7}
 8101fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101fc4:	bf00      	nop
 8101fc6:	46bd      	mov	sp, r7
 8101fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fcc:	4770      	bx	lr

08101fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101fce:	b480      	push	{r7}
 8101fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101fd2:	bf00      	nop
 8101fd4:	46bd      	mov	sp, r7
 8101fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fda:	4770      	bx	lr

08101fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101fdc:	b580      	push	{r7, lr}
 8101fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101fe0:	f000 f8e0 	bl	81021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101fe4:	bf00      	nop
 8101fe6:	bd80      	pop	{r7, pc}

08101fe8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101fe8:	b580      	push	{r7, lr}
 8101fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101fec:	4802      	ldr	r0, [pc, #8]	; (8101ff8 <DMA1_Stream0_IRQHandler+0x10>)
 8101fee:	f001 fd85 	bl	8103afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101ff2:	bf00      	nop
 8101ff4:	bd80      	pop	{r7, pc}
 8101ff6:	bf00      	nop
 8101ff8:	10000200 	.word	0x10000200

08101ffc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101ffc:	b580      	push	{r7, lr}
 8101ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102000:	4802      	ldr	r0, [pc, #8]	; (810200c <DMA1_Stream1_IRQHandler+0x10>)
 8102002:	f001 fd7b 	bl	8103afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102006:	bf00      	nop
 8102008:	bd80      	pop	{r7, pc}
 810200a:	bf00      	nop
 810200c:	10000a1c 	.word	0x10000a1c

08102010 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102010:	b580      	push	{r7, lr}
 8102012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	UART_IDLE_Handler(&huart3);
 8102014:	4803      	ldr	r0, [pc, #12]	; (8102024 <USART3_IRQHandler+0x14>)
 8102016:	f7fe fccd 	bl	81009b4 <UART_IDLE_Handler>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 810201a:	4802      	ldr	r0, [pc, #8]	; (8102024 <USART3_IRQHandler+0x14>)
 810201c:	f007 f80e 	bl	810903c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8102020:	bf00      	nop
 8102022:	bd80      	pop	{r7, pc}
 8102024:	10000310 	.word	0x10000310

08102028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8102028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102060 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 810202c:	f7fe fad4 	bl	81005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102030:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8102032:	e003      	b.n	810203c <LoopCopyDataInit>

08102034 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102034:	4b0b      	ldr	r3, [pc, #44]	; (8102064 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8102036:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8102038:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810203a:	3104      	adds	r1, #4

0810203c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 810203c:	480a      	ldr	r0, [pc, #40]	; (8102068 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 810203e:	4b0b      	ldr	r3, [pc, #44]	; (810206c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8102040:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8102042:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8102044:	d3f6      	bcc.n	8102034 <CopyDataInit>
  ldr  r2, =_sbss
 8102046:	4a0a      	ldr	r2, [pc, #40]	; (8102070 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8102048:	e002      	b.n	8102050 <LoopFillZerobss>

0810204a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 810204a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 810204c:	f842 3b04 	str.w	r3, [r2], #4

08102050 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102050:	4b08      	ldr	r3, [pc, #32]	; (8102074 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8102052:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8102054:	d3f9      	bcc.n	810204a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8102056:	f009 faa9 	bl	810b5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810205a:	f7fe fcd3 	bl	8100a04 <main>
  bx  lr    
 810205e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102060:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8102064:	0810b6d0 	.word	0x0810b6d0
  ldr  r0, =_sdata
 8102068:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 810206c:	10000014 	.word	0x10000014
  ldr  r2, =_sbss
 8102070:	100000d4 	.word	0x100000d4
  ldr  r3, = _ebss
 8102074:	10000da4 	.word	0x10000da4

08102078 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102078:	e7fe      	b.n	8102078 <ADC3_IRQHandler>
	...

0810207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810207c:	b580      	push	{r7, lr}
 810207e:	b082      	sub	sp, #8
 8102080:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102082:	4b28      	ldr	r3, [pc, #160]	; (8102124 <HAL_Init+0xa8>)
 8102084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102088:	4a26      	ldr	r2, [pc, #152]	; (8102124 <HAL_Init+0xa8>)
 810208a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810208e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102092:	4b24      	ldr	r3, [pc, #144]	; (8102124 <HAL_Init+0xa8>)
 8102094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810209c:	603b      	str	r3, [r7, #0]
 810209e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81020a0:	4b21      	ldr	r3, [pc, #132]	; (8102128 <HAL_Init+0xac>)
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81020a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81020ac:	4a1e      	ldr	r2, [pc, #120]	; (8102128 <HAL_Init+0xac>)
 81020ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81020b2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81020b4:	4b1c      	ldr	r3, [pc, #112]	; (8102128 <HAL_Init+0xac>)
 81020b6:	681b      	ldr	r3, [r3, #0]
 81020b8:	4a1b      	ldr	r2, [pc, #108]	; (8102128 <HAL_Init+0xac>)
 81020ba:	f043 0301 	orr.w	r3, r3, #1
 81020be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81020c0:	2003      	movs	r0, #3
 81020c2:	f000 f9a1 	bl	8102408 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81020c6:	f005 fb0b 	bl	81076e0 <HAL_RCC_GetSysClockFreq>
 81020ca:	4601      	mov	r1, r0
 81020cc:	4b15      	ldr	r3, [pc, #84]	; (8102124 <HAL_Init+0xa8>)
 81020ce:	699b      	ldr	r3, [r3, #24]
 81020d0:	0a1b      	lsrs	r3, r3, #8
 81020d2:	f003 030f 	and.w	r3, r3, #15
 81020d6:	4a15      	ldr	r2, [pc, #84]	; (810212c <HAL_Init+0xb0>)
 81020d8:	5cd3      	ldrb	r3, [r2, r3]
 81020da:	f003 031f 	and.w	r3, r3, #31
 81020de:	fa21 f303 	lsr.w	r3, r1, r3
 81020e2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81020e4:	4b0f      	ldr	r3, [pc, #60]	; (8102124 <HAL_Init+0xa8>)
 81020e6:	699b      	ldr	r3, [r3, #24]
 81020e8:	f003 030f 	and.w	r3, r3, #15
 81020ec:	4a0f      	ldr	r2, [pc, #60]	; (810212c <HAL_Init+0xb0>)
 81020ee:	5cd3      	ldrb	r3, [r2, r3]
 81020f0:	f003 031f 	and.w	r3, r3, #31
 81020f4:	687a      	ldr	r2, [r7, #4]
 81020f6:	fa22 f303 	lsr.w	r3, r2, r3
 81020fa:	4a0d      	ldr	r2, [pc, #52]	; (8102130 <HAL_Init+0xb4>)
 81020fc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81020fe:	4b0c      	ldr	r3, [pc, #48]	; (8102130 <HAL_Init+0xb4>)
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	4a0c      	ldr	r2, [pc, #48]	; (8102134 <HAL_Init+0xb8>)
 8102104:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102106:	2000      	movs	r0, #0
 8102108:	f000 f816 	bl	8102138 <HAL_InitTick>
 810210c:	4603      	mov	r3, r0
 810210e:	2b00      	cmp	r3, #0
 8102110:	d001      	beq.n	8102116 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102112:	2301      	movs	r3, #1
 8102114:	e002      	b.n	810211c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102116:	f7ff f971 	bl	81013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810211a:	2300      	movs	r3, #0
}
 810211c:	4618      	mov	r0, r3
 810211e:	3708      	adds	r7, #8
 8102120:	46bd      	mov	sp, r7
 8102122:	bd80      	pop	{r7, pc}
 8102124:	58024400 	.word	0x58024400
 8102128:	40024400 	.word	0x40024400
 810212c:	0810b690 	.word	0x0810b690
 8102130:	10000004 	.word	0x10000004
 8102134:	10000000 	.word	0x10000000

08102138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102138:	b580      	push	{r7, lr}
 810213a:	b082      	sub	sp, #8
 810213c:	af00      	add	r7, sp, #0
 810213e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102140:	4b15      	ldr	r3, [pc, #84]	; (8102198 <HAL_InitTick+0x60>)
 8102142:	781b      	ldrb	r3, [r3, #0]
 8102144:	2b00      	cmp	r3, #0
 8102146:	d101      	bne.n	810214c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102148:	2301      	movs	r3, #1
 810214a:	e021      	b.n	8102190 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810214c:	4b13      	ldr	r3, [pc, #76]	; (810219c <HAL_InitTick+0x64>)
 810214e:	681a      	ldr	r2, [r3, #0]
 8102150:	4b11      	ldr	r3, [pc, #68]	; (8102198 <HAL_InitTick+0x60>)
 8102152:	781b      	ldrb	r3, [r3, #0]
 8102154:	4619      	mov	r1, r3
 8102156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810215a:	fbb3 f3f1 	udiv	r3, r3, r1
 810215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8102162:	4618      	mov	r0, r3
 8102164:	f000 f983 	bl	810246e <HAL_SYSTICK_Config>
 8102168:	4603      	mov	r3, r0
 810216a:	2b00      	cmp	r3, #0
 810216c:	d001      	beq.n	8102172 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810216e:	2301      	movs	r3, #1
 8102170:	e00e      	b.n	8102190 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	2b0f      	cmp	r3, #15
 8102176:	d80a      	bhi.n	810218e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102178:	2200      	movs	r2, #0
 810217a:	6879      	ldr	r1, [r7, #4]
 810217c:	f04f 30ff 	mov.w	r0, #4294967295
 8102180:	f000 f94d 	bl	810241e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102184:	4a06      	ldr	r2, [pc, #24]	; (81021a0 <HAL_InitTick+0x68>)
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810218a:	2300      	movs	r3, #0
 810218c:	e000      	b.n	8102190 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810218e:	2301      	movs	r3, #1
}
 8102190:	4618      	mov	r0, r3
 8102192:	3708      	adds	r7, #8
 8102194:	46bd      	mov	sp, r7
 8102196:	bd80      	pop	{r7, pc}
 8102198:	10000010 	.word	0x10000010
 810219c:	10000000 	.word	0x10000000
 81021a0:	1000000c 	.word	0x1000000c

081021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81021a4:	b480      	push	{r7}
 81021a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81021a8:	4b06      	ldr	r3, [pc, #24]	; (81021c4 <HAL_IncTick+0x20>)
 81021aa:	781b      	ldrb	r3, [r3, #0]
 81021ac:	461a      	mov	r2, r3
 81021ae:	4b06      	ldr	r3, [pc, #24]	; (81021c8 <HAL_IncTick+0x24>)
 81021b0:	681b      	ldr	r3, [r3, #0]
 81021b2:	4413      	add	r3, r2
 81021b4:	4a04      	ldr	r2, [pc, #16]	; (81021c8 <HAL_IncTick+0x24>)
 81021b6:	6013      	str	r3, [r2, #0]
}
 81021b8:	bf00      	nop
 81021ba:	46bd      	mov	sp, r7
 81021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021c0:	4770      	bx	lr
 81021c2:	bf00      	nop
 81021c4:	10000010 	.word	0x10000010
 81021c8:	10000da0 	.word	0x10000da0

081021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81021cc:	b480      	push	{r7}
 81021ce:	af00      	add	r7, sp, #0
  return uwTick;
 81021d0:	4b03      	ldr	r3, [pc, #12]	; (81021e0 <HAL_GetTick+0x14>)
 81021d2:	681b      	ldr	r3, [r3, #0]
}
 81021d4:	4618      	mov	r0, r3
 81021d6:	46bd      	mov	sp, r7
 81021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021dc:	4770      	bx	lr
 81021de:	bf00      	nop
 81021e0:	10000da0 	.word	0x10000da0

081021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81021e4:	b580      	push	{r7, lr}
 81021e6:	b084      	sub	sp, #16
 81021e8:	af00      	add	r7, sp, #0
 81021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81021ec:	f7ff ffee 	bl	81021cc <HAL_GetTick>
 81021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81021f6:	68fb      	ldr	r3, [r7, #12]
 81021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81021fc:	d005      	beq.n	810220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81021fe:	4b09      	ldr	r3, [pc, #36]	; (8102224 <HAL_Delay+0x40>)
 8102200:	781b      	ldrb	r3, [r3, #0]
 8102202:	461a      	mov	r2, r3
 8102204:	68fb      	ldr	r3, [r7, #12]
 8102206:	4413      	add	r3, r2
 8102208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810220a:	bf00      	nop
 810220c:	f7ff ffde 	bl	81021cc <HAL_GetTick>
 8102210:	4602      	mov	r2, r0
 8102212:	68bb      	ldr	r3, [r7, #8]
 8102214:	1ad3      	subs	r3, r2, r3
 8102216:	68fa      	ldr	r2, [r7, #12]
 8102218:	429a      	cmp	r2, r3
 810221a:	d8f7      	bhi.n	810220c <HAL_Delay+0x28>
  {
  }
}
 810221c:	bf00      	nop
 810221e:	3710      	adds	r7, #16
 8102220:	46bd      	mov	sp, r7
 8102222:	bd80      	pop	{r7, pc}
 8102224:	10000010 	.word	0x10000010

08102228 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102228:	b480      	push	{r7}
 810222a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 810222c:	4b03      	ldr	r3, [pc, #12]	; (810223c <HAL_GetREVID+0x14>)
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	0c1b      	lsrs	r3, r3, #16
}
 8102232:	4618      	mov	r0, r3
 8102234:	46bd      	mov	sp, r7
 8102236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810223a:	4770      	bx	lr
 810223c:	5c001000 	.word	0x5c001000

08102240 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102240:	b480      	push	{r7}
 8102242:	b083      	sub	sp, #12
 8102244:	af00      	add	r7, sp, #0
 8102246:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102248:	4b06      	ldr	r3, [pc, #24]	; (8102264 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810224a:	685b      	ldr	r3, [r3, #4]
 810224c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102250:	4904      	ldr	r1, [pc, #16]	; (8102264 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	4313      	orrs	r3, r2
 8102256:	604b      	str	r3, [r1, #4]
}
 8102258:	bf00      	nop
 810225a:	370c      	adds	r7, #12
 810225c:	46bd      	mov	sp, r7
 810225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102262:	4770      	bx	lr
 8102264:	58000400 	.word	0x58000400

08102268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102268:	b480      	push	{r7}
 810226a:	b085      	sub	sp, #20
 810226c:	af00      	add	r7, sp, #0
 810226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	f003 0307 	and.w	r3, r3, #7
 8102276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102278:	4b0c      	ldr	r3, [pc, #48]	; (81022ac <__NVIC_SetPriorityGrouping+0x44>)
 810227a:	68db      	ldr	r3, [r3, #12]
 810227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810227e:	68ba      	ldr	r2, [r7, #8]
 8102280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102284:	4013      	ands	r3, r2
 8102286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102288:	68fb      	ldr	r3, [r7, #12]
 810228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810228c:	68bb      	ldr	r3, [r7, #8]
 810228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810229a:	4a04      	ldr	r2, [pc, #16]	; (81022ac <__NVIC_SetPriorityGrouping+0x44>)
 810229c:	68bb      	ldr	r3, [r7, #8]
 810229e:	60d3      	str	r3, [r2, #12]
}
 81022a0:	bf00      	nop
 81022a2:	3714      	adds	r7, #20
 81022a4:	46bd      	mov	sp, r7
 81022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022aa:	4770      	bx	lr
 81022ac:	e000ed00 	.word	0xe000ed00

081022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81022b0:	b480      	push	{r7}
 81022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81022b4:	4b04      	ldr	r3, [pc, #16]	; (81022c8 <__NVIC_GetPriorityGrouping+0x18>)
 81022b6:	68db      	ldr	r3, [r3, #12]
 81022b8:	0a1b      	lsrs	r3, r3, #8
 81022ba:	f003 0307 	and.w	r3, r3, #7
}
 81022be:	4618      	mov	r0, r3
 81022c0:	46bd      	mov	sp, r7
 81022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c6:	4770      	bx	lr
 81022c8:	e000ed00 	.word	0xe000ed00

081022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81022cc:	b480      	push	{r7}
 81022ce:	b083      	sub	sp, #12
 81022d0:	af00      	add	r7, sp, #0
 81022d2:	4603      	mov	r3, r0
 81022d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81022d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81022da:	2b00      	cmp	r3, #0
 81022dc:	db0b      	blt.n	81022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81022de:	88fb      	ldrh	r3, [r7, #6]
 81022e0:	f003 021f 	and.w	r2, r3, #31
 81022e4:	4907      	ldr	r1, [pc, #28]	; (8102304 <__NVIC_EnableIRQ+0x38>)
 81022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81022ea:	095b      	lsrs	r3, r3, #5
 81022ec:	2001      	movs	r0, #1
 81022ee:	fa00 f202 	lsl.w	r2, r0, r2
 81022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 81022f6:	bf00      	nop
 81022f8:	370c      	adds	r7, #12
 81022fa:	46bd      	mov	sp, r7
 81022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102300:	4770      	bx	lr
 8102302:	bf00      	nop
 8102304:	e000e100 	.word	0xe000e100

08102308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102308:	b480      	push	{r7}
 810230a:	b083      	sub	sp, #12
 810230c:	af00      	add	r7, sp, #0
 810230e:	4603      	mov	r3, r0
 8102310:	6039      	str	r1, [r7, #0]
 8102312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102318:	2b00      	cmp	r3, #0
 810231a:	db0a      	blt.n	8102332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810231c:	683b      	ldr	r3, [r7, #0]
 810231e:	b2da      	uxtb	r2, r3
 8102320:	490c      	ldr	r1, [pc, #48]	; (8102354 <__NVIC_SetPriority+0x4c>)
 8102322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102326:	0112      	lsls	r2, r2, #4
 8102328:	b2d2      	uxtb	r2, r2
 810232a:	440b      	add	r3, r1
 810232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102330:	e00a      	b.n	8102348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102332:	683b      	ldr	r3, [r7, #0]
 8102334:	b2da      	uxtb	r2, r3
 8102336:	4908      	ldr	r1, [pc, #32]	; (8102358 <__NVIC_SetPriority+0x50>)
 8102338:	88fb      	ldrh	r3, [r7, #6]
 810233a:	f003 030f 	and.w	r3, r3, #15
 810233e:	3b04      	subs	r3, #4
 8102340:	0112      	lsls	r2, r2, #4
 8102342:	b2d2      	uxtb	r2, r2
 8102344:	440b      	add	r3, r1
 8102346:	761a      	strb	r2, [r3, #24]
}
 8102348:	bf00      	nop
 810234a:	370c      	adds	r7, #12
 810234c:	46bd      	mov	sp, r7
 810234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102352:	4770      	bx	lr
 8102354:	e000e100 	.word	0xe000e100
 8102358:	e000ed00 	.word	0xe000ed00

0810235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810235c:	b480      	push	{r7}
 810235e:	b089      	sub	sp, #36	; 0x24
 8102360:	af00      	add	r7, sp, #0
 8102362:	60f8      	str	r0, [r7, #12]
 8102364:	60b9      	str	r1, [r7, #8]
 8102366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102368:	68fb      	ldr	r3, [r7, #12]
 810236a:	f003 0307 	and.w	r3, r3, #7
 810236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102370:	69fb      	ldr	r3, [r7, #28]
 8102372:	f1c3 0307 	rsb	r3, r3, #7
 8102376:	2b04      	cmp	r3, #4
 8102378:	bf28      	it	cs
 810237a:	2304      	movcs	r3, #4
 810237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810237e:	69fb      	ldr	r3, [r7, #28]
 8102380:	3304      	adds	r3, #4
 8102382:	2b06      	cmp	r3, #6
 8102384:	d902      	bls.n	810238c <NVIC_EncodePriority+0x30>
 8102386:	69fb      	ldr	r3, [r7, #28]
 8102388:	3b03      	subs	r3, #3
 810238a:	e000      	b.n	810238e <NVIC_EncodePriority+0x32>
 810238c:	2300      	movs	r3, #0
 810238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102390:	f04f 32ff 	mov.w	r2, #4294967295
 8102394:	69bb      	ldr	r3, [r7, #24]
 8102396:	fa02 f303 	lsl.w	r3, r2, r3
 810239a:	43da      	mvns	r2, r3
 810239c:	68bb      	ldr	r3, [r7, #8]
 810239e:	401a      	ands	r2, r3
 81023a0:	697b      	ldr	r3, [r7, #20]
 81023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81023a4:	f04f 31ff 	mov.w	r1, #4294967295
 81023a8:	697b      	ldr	r3, [r7, #20]
 81023aa:	fa01 f303 	lsl.w	r3, r1, r3
 81023ae:	43d9      	mvns	r1, r3
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023b4:	4313      	orrs	r3, r2
         );
}
 81023b6:	4618      	mov	r0, r3
 81023b8:	3724      	adds	r7, #36	; 0x24
 81023ba:	46bd      	mov	sp, r7
 81023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c0:	4770      	bx	lr
	...

081023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81023c4:	b580      	push	{r7, lr}
 81023c6:	b082      	sub	sp, #8
 81023c8:	af00      	add	r7, sp, #0
 81023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	3b01      	subs	r3, #1
 81023d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81023d4:	d301      	bcc.n	81023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81023d6:	2301      	movs	r3, #1
 81023d8:	e00f      	b.n	81023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81023da:	4a0a      	ldr	r2, [pc, #40]	; (8102404 <SysTick_Config+0x40>)
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	3b01      	subs	r3, #1
 81023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81023e2:	210f      	movs	r1, #15
 81023e4:	f04f 30ff 	mov.w	r0, #4294967295
 81023e8:	f7ff ff8e 	bl	8102308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81023ec:	4b05      	ldr	r3, [pc, #20]	; (8102404 <SysTick_Config+0x40>)
 81023ee:	2200      	movs	r2, #0
 81023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81023f2:	4b04      	ldr	r3, [pc, #16]	; (8102404 <SysTick_Config+0x40>)
 81023f4:	2207      	movs	r2, #7
 81023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81023f8:	2300      	movs	r3, #0
}
 81023fa:	4618      	mov	r0, r3
 81023fc:	3708      	adds	r7, #8
 81023fe:	46bd      	mov	sp, r7
 8102400:	bd80      	pop	{r7, pc}
 8102402:	bf00      	nop
 8102404:	e000e010 	.word	0xe000e010

08102408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102408:	b580      	push	{r7, lr}
 810240a:	b082      	sub	sp, #8
 810240c:	af00      	add	r7, sp, #0
 810240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102410:	6878      	ldr	r0, [r7, #4]
 8102412:	f7ff ff29 	bl	8102268 <__NVIC_SetPriorityGrouping>
}
 8102416:	bf00      	nop
 8102418:	3708      	adds	r7, #8
 810241a:	46bd      	mov	sp, r7
 810241c:	bd80      	pop	{r7, pc}

0810241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810241e:	b580      	push	{r7, lr}
 8102420:	b086      	sub	sp, #24
 8102422:	af00      	add	r7, sp, #0
 8102424:	4603      	mov	r3, r0
 8102426:	60b9      	str	r1, [r7, #8]
 8102428:	607a      	str	r2, [r7, #4]
 810242a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810242c:	f7ff ff40 	bl	81022b0 <__NVIC_GetPriorityGrouping>
 8102430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102432:	687a      	ldr	r2, [r7, #4]
 8102434:	68b9      	ldr	r1, [r7, #8]
 8102436:	6978      	ldr	r0, [r7, #20]
 8102438:	f7ff ff90 	bl	810235c <NVIC_EncodePriority>
 810243c:	4602      	mov	r2, r0
 810243e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102442:	4611      	mov	r1, r2
 8102444:	4618      	mov	r0, r3
 8102446:	f7ff ff5f 	bl	8102308 <__NVIC_SetPriority>
}
 810244a:	bf00      	nop
 810244c:	3718      	adds	r7, #24
 810244e:	46bd      	mov	sp, r7
 8102450:	bd80      	pop	{r7, pc}

08102452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102452:	b580      	push	{r7, lr}
 8102454:	b082      	sub	sp, #8
 8102456:	af00      	add	r7, sp, #0
 8102458:	4603      	mov	r3, r0
 810245a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810245c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102460:	4618      	mov	r0, r3
 8102462:	f7ff ff33 	bl	81022cc <__NVIC_EnableIRQ>
}
 8102466:	bf00      	nop
 8102468:	3708      	adds	r7, #8
 810246a:	46bd      	mov	sp, r7
 810246c:	bd80      	pop	{r7, pc}

0810246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810246e:	b580      	push	{r7, lr}
 8102470:	b082      	sub	sp, #8
 8102472:	af00      	add	r7, sp, #0
 8102474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102476:	6878      	ldr	r0, [r7, #4]
 8102478:	f7ff ffa4 	bl	81023c4 <SysTick_Config>
 810247c:	4603      	mov	r3, r0
}
 810247e:	4618      	mov	r0, r3
 8102480:	3708      	adds	r7, #8
 8102482:	46bd      	mov	sp, r7
 8102484:	bd80      	pop	{r7, pc}
	...

08102488 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102488:	b480      	push	{r7}
 810248a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810248c:	4b07      	ldr	r3, [pc, #28]	; (81024ac <HAL_GetCurrentCPUID+0x24>)
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	091b      	lsrs	r3, r3, #4
 8102492:	f003 030f 	and.w	r3, r3, #15
 8102496:	2b07      	cmp	r3, #7
 8102498:	d101      	bne.n	810249e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810249a:	2303      	movs	r3, #3
 810249c:	e000      	b.n	81024a0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810249e:	2301      	movs	r3, #1
  }
}
 81024a0:	4618      	mov	r0, r3
 81024a2:	46bd      	mov	sp, r7
 81024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024a8:	4770      	bx	lr
 81024aa:	bf00      	nop
 81024ac:	e000ed00 	.word	0xe000ed00

081024b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81024b0:	b580      	push	{r7, lr}
 81024b2:	b086      	sub	sp, #24
 81024b4:	af00      	add	r7, sp, #0
 81024b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81024b8:	f7ff fe88 	bl	81021cc <HAL_GetTick>
 81024bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d101      	bne.n	81024c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81024c4:	2301      	movs	r3, #1
 81024c6:	e314      	b.n	8102af2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	4a66      	ldr	r2, [pc, #408]	; (8102668 <HAL_DMA_Init+0x1b8>)
 81024ce:	4293      	cmp	r3, r2
 81024d0:	d04a      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	4a65      	ldr	r2, [pc, #404]	; (810266c <HAL_DMA_Init+0x1bc>)
 81024d8:	4293      	cmp	r3, r2
 81024da:	d045      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 81024dc:	687b      	ldr	r3, [r7, #4]
 81024de:	681b      	ldr	r3, [r3, #0]
 81024e0:	4a63      	ldr	r2, [pc, #396]	; (8102670 <HAL_DMA_Init+0x1c0>)
 81024e2:	4293      	cmp	r3, r2
 81024e4:	d040      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	681b      	ldr	r3, [r3, #0]
 81024ea:	4a62      	ldr	r2, [pc, #392]	; (8102674 <HAL_DMA_Init+0x1c4>)
 81024ec:	4293      	cmp	r3, r2
 81024ee:	d03b      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	4a60      	ldr	r2, [pc, #384]	; (8102678 <HAL_DMA_Init+0x1c8>)
 81024f6:	4293      	cmp	r3, r2
 81024f8:	d036      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	4a5f      	ldr	r2, [pc, #380]	; (810267c <HAL_DMA_Init+0x1cc>)
 8102500:	4293      	cmp	r3, r2
 8102502:	d031      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	4a5d      	ldr	r2, [pc, #372]	; (8102680 <HAL_DMA_Init+0x1d0>)
 810250a:	4293      	cmp	r3, r2
 810250c:	d02c      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	4a5c      	ldr	r2, [pc, #368]	; (8102684 <HAL_DMA_Init+0x1d4>)
 8102514:	4293      	cmp	r3, r2
 8102516:	d027      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	4a5a      	ldr	r2, [pc, #360]	; (8102688 <HAL_DMA_Init+0x1d8>)
 810251e:	4293      	cmp	r3, r2
 8102520:	d022      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	681b      	ldr	r3, [r3, #0]
 8102526:	4a59      	ldr	r2, [pc, #356]	; (810268c <HAL_DMA_Init+0x1dc>)
 8102528:	4293      	cmp	r3, r2
 810252a:	d01d      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	4a57      	ldr	r2, [pc, #348]	; (8102690 <HAL_DMA_Init+0x1e0>)
 8102532:	4293      	cmp	r3, r2
 8102534:	d018      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4a56      	ldr	r2, [pc, #344]	; (8102694 <HAL_DMA_Init+0x1e4>)
 810253c:	4293      	cmp	r3, r2
 810253e:	d013      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	4a54      	ldr	r2, [pc, #336]	; (8102698 <HAL_DMA_Init+0x1e8>)
 8102546:	4293      	cmp	r3, r2
 8102548:	d00e      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	4a53      	ldr	r2, [pc, #332]	; (810269c <HAL_DMA_Init+0x1ec>)
 8102550:	4293      	cmp	r3, r2
 8102552:	d009      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	4a51      	ldr	r2, [pc, #324]	; (81026a0 <HAL_DMA_Init+0x1f0>)
 810255a:	4293      	cmp	r3, r2
 810255c:	d004      	beq.n	8102568 <HAL_DMA_Init+0xb8>
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	4a50      	ldr	r2, [pc, #320]	; (81026a4 <HAL_DMA_Init+0x1f4>)
 8102564:	4293      	cmp	r3, r2
 8102566:	d101      	bne.n	810256c <HAL_DMA_Init+0xbc>
 8102568:	2301      	movs	r3, #1
 810256a:	e000      	b.n	810256e <HAL_DMA_Init+0xbe>
 810256c:	2300      	movs	r3, #0
 810256e:	2b00      	cmp	r3, #0
 8102570:	f000 813b 	beq.w	81027ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	2200      	movs	r2, #0
 8102578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	2202      	movs	r2, #2
 8102580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	4a37      	ldr	r2, [pc, #220]	; (8102668 <HAL_DMA_Init+0x1b8>)
 810258a:	4293      	cmp	r3, r2
 810258c:	d04a      	beq.n	8102624 <HAL_DMA_Init+0x174>
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	4a36      	ldr	r2, [pc, #216]	; (810266c <HAL_DMA_Init+0x1bc>)
 8102594:	4293      	cmp	r3, r2
 8102596:	d045      	beq.n	8102624 <HAL_DMA_Init+0x174>
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	4a34      	ldr	r2, [pc, #208]	; (8102670 <HAL_DMA_Init+0x1c0>)
 810259e:	4293      	cmp	r3, r2
 81025a0:	d040      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	4a33      	ldr	r2, [pc, #204]	; (8102674 <HAL_DMA_Init+0x1c4>)
 81025a8:	4293      	cmp	r3, r2
 81025aa:	d03b      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	681b      	ldr	r3, [r3, #0]
 81025b0:	4a31      	ldr	r2, [pc, #196]	; (8102678 <HAL_DMA_Init+0x1c8>)
 81025b2:	4293      	cmp	r3, r2
 81025b4:	d036      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	681b      	ldr	r3, [r3, #0]
 81025ba:	4a30      	ldr	r2, [pc, #192]	; (810267c <HAL_DMA_Init+0x1cc>)
 81025bc:	4293      	cmp	r3, r2
 81025be:	d031      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	4a2e      	ldr	r2, [pc, #184]	; (8102680 <HAL_DMA_Init+0x1d0>)
 81025c6:	4293      	cmp	r3, r2
 81025c8:	d02c      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	681b      	ldr	r3, [r3, #0]
 81025ce:	4a2d      	ldr	r2, [pc, #180]	; (8102684 <HAL_DMA_Init+0x1d4>)
 81025d0:	4293      	cmp	r3, r2
 81025d2:	d027      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025d4:	687b      	ldr	r3, [r7, #4]
 81025d6:	681b      	ldr	r3, [r3, #0]
 81025d8:	4a2b      	ldr	r2, [pc, #172]	; (8102688 <HAL_DMA_Init+0x1d8>)
 81025da:	4293      	cmp	r3, r2
 81025dc:	d022      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	681b      	ldr	r3, [r3, #0]
 81025e2:	4a2a      	ldr	r2, [pc, #168]	; (810268c <HAL_DMA_Init+0x1dc>)
 81025e4:	4293      	cmp	r3, r2
 81025e6:	d01d      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	4a28      	ldr	r2, [pc, #160]	; (8102690 <HAL_DMA_Init+0x1e0>)
 81025ee:	4293      	cmp	r3, r2
 81025f0:	d018      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	681b      	ldr	r3, [r3, #0]
 81025f6:	4a27      	ldr	r2, [pc, #156]	; (8102694 <HAL_DMA_Init+0x1e4>)
 81025f8:	4293      	cmp	r3, r2
 81025fa:	d013      	beq.n	8102624 <HAL_DMA_Init+0x174>
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	681b      	ldr	r3, [r3, #0]
 8102600:	4a25      	ldr	r2, [pc, #148]	; (8102698 <HAL_DMA_Init+0x1e8>)
 8102602:	4293      	cmp	r3, r2
 8102604:	d00e      	beq.n	8102624 <HAL_DMA_Init+0x174>
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	681b      	ldr	r3, [r3, #0]
 810260a:	4a24      	ldr	r2, [pc, #144]	; (810269c <HAL_DMA_Init+0x1ec>)
 810260c:	4293      	cmp	r3, r2
 810260e:	d009      	beq.n	8102624 <HAL_DMA_Init+0x174>
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	4a22      	ldr	r2, [pc, #136]	; (81026a0 <HAL_DMA_Init+0x1f0>)
 8102616:	4293      	cmp	r3, r2
 8102618:	d004      	beq.n	8102624 <HAL_DMA_Init+0x174>
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	681b      	ldr	r3, [r3, #0]
 810261e:	4a21      	ldr	r2, [pc, #132]	; (81026a4 <HAL_DMA_Init+0x1f4>)
 8102620:	4293      	cmp	r3, r2
 8102622:	d108      	bne.n	8102636 <HAL_DMA_Init+0x186>
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	681a      	ldr	r2, [r3, #0]
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	f022 0201 	bic.w	r2, r2, #1
 8102632:	601a      	str	r2, [r3, #0]
 8102634:	e007      	b.n	8102646 <HAL_DMA_Init+0x196>
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	681a      	ldr	r2, [r3, #0]
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	f022 0201 	bic.w	r2, r2, #1
 8102644:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102646:	e02f      	b.n	81026a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102648:	f7ff fdc0 	bl	81021cc <HAL_GetTick>
 810264c:	4602      	mov	r2, r0
 810264e:	693b      	ldr	r3, [r7, #16]
 8102650:	1ad3      	subs	r3, r2, r3
 8102652:	2b05      	cmp	r3, #5
 8102654:	d928      	bls.n	81026a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	2220      	movs	r2, #32
 810265a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	2203      	movs	r2, #3
 8102660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102664:	2301      	movs	r3, #1
 8102666:	e244      	b.n	8102af2 <HAL_DMA_Init+0x642>
 8102668:	40020010 	.word	0x40020010
 810266c:	40020028 	.word	0x40020028
 8102670:	40020040 	.word	0x40020040
 8102674:	40020058 	.word	0x40020058
 8102678:	40020070 	.word	0x40020070
 810267c:	40020088 	.word	0x40020088
 8102680:	400200a0 	.word	0x400200a0
 8102684:	400200b8 	.word	0x400200b8
 8102688:	40020410 	.word	0x40020410
 810268c:	40020428 	.word	0x40020428
 8102690:	40020440 	.word	0x40020440
 8102694:	40020458 	.word	0x40020458
 8102698:	40020470 	.word	0x40020470
 810269c:	40020488 	.word	0x40020488
 81026a0:	400204a0 	.word	0x400204a0
 81026a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	681b      	ldr	r3, [r3, #0]
 81026ac:	681b      	ldr	r3, [r3, #0]
 81026ae:	f003 0301 	and.w	r3, r3, #1
 81026b2:	2b00      	cmp	r3, #0
 81026b4:	d1c8      	bne.n	8102648 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81026be:	697a      	ldr	r2, [r7, #20]
 81026c0:	4b84      	ldr	r3, [pc, #528]	; (81028d4 <HAL_DMA_Init+0x424>)
 81026c2:	4013      	ands	r3, r2
 81026c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81026ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	691b      	ldr	r3, [r3, #16]
 81026d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	699b      	ldr	r3, [r3, #24]
 81026e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	6a1b      	ldr	r3, [r3, #32]
 81026ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81026ee:	697a      	ldr	r2, [r7, #20]
 81026f0:	4313      	orrs	r3, r2
 81026f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026f8:	2b04      	cmp	r3, #4
 81026fa:	d107      	bne.n	810270c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102704:	4313      	orrs	r3, r2
 8102706:	697a      	ldr	r2, [r7, #20]
 8102708:	4313      	orrs	r3, r2
 810270a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810270c:	4b72      	ldr	r3, [pc, #456]	; (81028d8 <HAL_DMA_Init+0x428>)
 810270e:	681b      	ldr	r3, [r3, #0]
 8102710:	0c1b      	lsrs	r3, r3, #16
 8102712:	041b      	lsls	r3, r3, #16
 8102714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102718:	d328      	bcc.n	810276c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	685b      	ldr	r3, [r3, #4]
 810271e:	2b28      	cmp	r3, #40	; 0x28
 8102720:	d903      	bls.n	810272a <HAL_DMA_Init+0x27a>
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	685b      	ldr	r3, [r3, #4]
 8102726:	2b2e      	cmp	r3, #46	; 0x2e
 8102728:	d917      	bls.n	810275a <HAL_DMA_Init+0x2aa>
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	685b      	ldr	r3, [r3, #4]
 810272e:	2b3e      	cmp	r3, #62	; 0x3e
 8102730:	d903      	bls.n	810273a <HAL_DMA_Init+0x28a>
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	685b      	ldr	r3, [r3, #4]
 8102736:	2b42      	cmp	r3, #66	; 0x42
 8102738:	d90f      	bls.n	810275a <HAL_DMA_Init+0x2aa>
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	685b      	ldr	r3, [r3, #4]
 810273e:	2b46      	cmp	r3, #70	; 0x46
 8102740:	d903      	bls.n	810274a <HAL_DMA_Init+0x29a>
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	685b      	ldr	r3, [r3, #4]
 8102746:	2b48      	cmp	r3, #72	; 0x48
 8102748:	d907      	bls.n	810275a <HAL_DMA_Init+0x2aa>
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	685b      	ldr	r3, [r3, #4]
 810274e:	2b4e      	cmp	r3, #78	; 0x4e
 8102750:	d905      	bls.n	810275e <HAL_DMA_Init+0x2ae>
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	685b      	ldr	r3, [r3, #4]
 8102756:	2b52      	cmp	r3, #82	; 0x52
 8102758:	d801      	bhi.n	810275e <HAL_DMA_Init+0x2ae>
 810275a:	2301      	movs	r3, #1
 810275c:	e000      	b.n	8102760 <HAL_DMA_Init+0x2b0>
 810275e:	2300      	movs	r3, #0
 8102760:	2b00      	cmp	r3, #0
 8102762:	d003      	beq.n	810276c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102764:	697b      	ldr	r3, [r7, #20]
 8102766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810276a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	697a      	ldr	r2, [r7, #20]
 8102772:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	695b      	ldr	r3, [r3, #20]
 810277a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810277c:	697b      	ldr	r3, [r7, #20]
 810277e:	f023 0307 	bic.w	r3, r3, #7
 8102782:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102788:	697a      	ldr	r2, [r7, #20]
 810278a:	4313      	orrs	r3, r2
 810278c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102792:	2b04      	cmp	r3, #4
 8102794:	d117      	bne.n	81027c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810279a:	697a      	ldr	r2, [r7, #20]
 810279c:	4313      	orrs	r3, r2
 810279e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027a4:	2b00      	cmp	r3, #0
 81027a6:	d00e      	beq.n	81027c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81027a8:	6878      	ldr	r0, [r7, #4]
 81027aa:	f002 fb3b 	bl	8104e24 <DMA_CheckFifoParam>
 81027ae:	4603      	mov	r3, r0
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	d008      	beq.n	81027c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	2240      	movs	r2, #64	; 0x40
 81027b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	2201      	movs	r2, #1
 81027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81027c2:	2301      	movs	r3, #1
 81027c4:	e195      	b.n	8102af2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	697a      	ldr	r2, [r7, #20]
 81027cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81027ce:	6878      	ldr	r0, [r7, #4]
 81027d0:	f002 fa76 	bl	8104cc0 <DMA_CalcBaseAndBitshift>
 81027d4:	4603      	mov	r3, r0
 81027d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81027dc:	f003 031f 	and.w	r3, r3, #31
 81027e0:	223f      	movs	r2, #63	; 0x3f
 81027e2:	409a      	lsls	r2, r3
 81027e4:	68bb      	ldr	r3, [r7, #8]
 81027e6:	609a      	str	r2, [r3, #8]
 81027e8:	e0cb      	b.n	8102982 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	4a3b      	ldr	r2, [pc, #236]	; (81028dc <HAL_DMA_Init+0x42c>)
 81027f0:	4293      	cmp	r3, r2
 81027f2:	d022      	beq.n	810283a <HAL_DMA_Init+0x38a>
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	4a39      	ldr	r2, [pc, #228]	; (81028e0 <HAL_DMA_Init+0x430>)
 81027fa:	4293      	cmp	r3, r2
 81027fc:	d01d      	beq.n	810283a <HAL_DMA_Init+0x38a>
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	681b      	ldr	r3, [r3, #0]
 8102802:	4a38      	ldr	r2, [pc, #224]	; (81028e4 <HAL_DMA_Init+0x434>)
 8102804:	4293      	cmp	r3, r2
 8102806:	d018      	beq.n	810283a <HAL_DMA_Init+0x38a>
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	681b      	ldr	r3, [r3, #0]
 810280c:	4a36      	ldr	r2, [pc, #216]	; (81028e8 <HAL_DMA_Init+0x438>)
 810280e:	4293      	cmp	r3, r2
 8102810:	d013      	beq.n	810283a <HAL_DMA_Init+0x38a>
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	4a35      	ldr	r2, [pc, #212]	; (81028ec <HAL_DMA_Init+0x43c>)
 8102818:	4293      	cmp	r3, r2
 810281a:	d00e      	beq.n	810283a <HAL_DMA_Init+0x38a>
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	4a33      	ldr	r2, [pc, #204]	; (81028f0 <HAL_DMA_Init+0x440>)
 8102822:	4293      	cmp	r3, r2
 8102824:	d009      	beq.n	810283a <HAL_DMA_Init+0x38a>
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	4a32      	ldr	r2, [pc, #200]	; (81028f4 <HAL_DMA_Init+0x444>)
 810282c:	4293      	cmp	r3, r2
 810282e:	d004      	beq.n	810283a <HAL_DMA_Init+0x38a>
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	4a30      	ldr	r2, [pc, #192]	; (81028f8 <HAL_DMA_Init+0x448>)
 8102836:	4293      	cmp	r3, r2
 8102838:	d101      	bne.n	810283e <HAL_DMA_Init+0x38e>
 810283a:	2301      	movs	r3, #1
 810283c:	e000      	b.n	8102840 <HAL_DMA_Init+0x390>
 810283e:	2300      	movs	r3, #0
 8102840:	2b00      	cmp	r3, #0
 8102842:	f000 8095 	beq.w	8102970 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	4a24      	ldr	r2, [pc, #144]	; (81028dc <HAL_DMA_Init+0x42c>)
 810284c:	4293      	cmp	r3, r2
 810284e:	d021      	beq.n	8102894 <HAL_DMA_Init+0x3e4>
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	4a22      	ldr	r2, [pc, #136]	; (81028e0 <HAL_DMA_Init+0x430>)
 8102856:	4293      	cmp	r3, r2
 8102858:	d01c      	beq.n	8102894 <HAL_DMA_Init+0x3e4>
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	681b      	ldr	r3, [r3, #0]
 810285e:	4a21      	ldr	r2, [pc, #132]	; (81028e4 <HAL_DMA_Init+0x434>)
 8102860:	4293      	cmp	r3, r2
 8102862:	d017      	beq.n	8102894 <HAL_DMA_Init+0x3e4>
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	4a1f      	ldr	r2, [pc, #124]	; (81028e8 <HAL_DMA_Init+0x438>)
 810286a:	4293      	cmp	r3, r2
 810286c:	d012      	beq.n	8102894 <HAL_DMA_Init+0x3e4>
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	4a1e      	ldr	r2, [pc, #120]	; (81028ec <HAL_DMA_Init+0x43c>)
 8102874:	4293      	cmp	r3, r2
 8102876:	d00d      	beq.n	8102894 <HAL_DMA_Init+0x3e4>
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	681b      	ldr	r3, [r3, #0]
 810287c:	4a1c      	ldr	r2, [pc, #112]	; (81028f0 <HAL_DMA_Init+0x440>)
 810287e:	4293      	cmp	r3, r2
 8102880:	d008      	beq.n	8102894 <HAL_DMA_Init+0x3e4>
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	4a1b      	ldr	r2, [pc, #108]	; (81028f4 <HAL_DMA_Init+0x444>)
 8102888:	4293      	cmp	r3, r2
 810288a:	d003      	beq.n	8102894 <HAL_DMA_Init+0x3e4>
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	4a19      	ldr	r2, [pc, #100]	; (81028f8 <HAL_DMA_Init+0x448>)
 8102892:	4293      	cmp	r3, r2
 8102894:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	2200      	movs	r2, #0
 810289a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	2202      	movs	r2, #2
 81028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81028a6:	687b      	ldr	r3, [r7, #4]
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81028ae:	697b      	ldr	r3, [r7, #20]
 81028b0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81028b4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81028b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	689b      	ldr	r3, [r3, #8]
 81028be:	2b40      	cmp	r3, #64	; 0x40
 81028c0:	d01c      	beq.n	81028fc <HAL_DMA_Init+0x44c>
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	689b      	ldr	r3, [r3, #8]
 81028c6:	2b80      	cmp	r3, #128	; 0x80
 81028c8:	d102      	bne.n	81028d0 <HAL_DMA_Init+0x420>
 81028ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81028ce:	e016      	b.n	81028fe <HAL_DMA_Init+0x44e>
 81028d0:	2300      	movs	r3, #0
 81028d2:	e014      	b.n	81028fe <HAL_DMA_Init+0x44e>
 81028d4:	fe10803f 	.word	0xfe10803f
 81028d8:	5c001000 	.word	0x5c001000
 81028dc:	58025408 	.word	0x58025408
 81028e0:	5802541c 	.word	0x5802541c
 81028e4:	58025430 	.word	0x58025430
 81028e8:	58025444 	.word	0x58025444
 81028ec:	58025458 	.word	0x58025458
 81028f0:	5802546c 	.word	0x5802546c
 81028f4:	58025480 	.word	0x58025480
 81028f8:	58025494 	.word	0x58025494
 81028fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81028fe:	687a      	ldr	r2, [r7, #4]
 8102900:	68d2      	ldr	r2, [r2, #12]
 8102902:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102904:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	691b      	ldr	r3, [r3, #16]
 810290a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810290c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	695b      	ldr	r3, [r3, #20]
 8102912:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102916:	687b      	ldr	r3, [r7, #4]
 8102918:	699b      	ldr	r3, [r3, #24]
 810291a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810291c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	69db      	ldr	r3, [r3, #28]
 8102922:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	6a1b      	ldr	r3, [r3, #32]
 810292a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810292c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810292e:	697a      	ldr	r2, [r7, #20]
 8102930:	4313      	orrs	r3, r2
 8102932:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	697a      	ldr	r2, [r7, #20]
 810293a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	681b      	ldr	r3, [r3, #0]
 8102940:	461a      	mov	r2, r3
 8102942:	4b6e      	ldr	r3, [pc, #440]	; (8102afc <HAL_DMA_Init+0x64c>)
 8102944:	4413      	add	r3, r2
 8102946:	4a6e      	ldr	r2, [pc, #440]	; (8102b00 <HAL_DMA_Init+0x650>)
 8102948:	fba2 2303 	umull	r2, r3, r2, r3
 810294c:	091b      	lsrs	r3, r3, #4
 810294e:	009a      	lsls	r2, r3, #2
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102954:	6878      	ldr	r0, [r7, #4]
 8102956:	f002 f9b3 	bl	8104cc0 <DMA_CalcBaseAndBitshift>
 810295a:	4603      	mov	r3, r0
 810295c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102962:	f003 031f 	and.w	r3, r3, #31
 8102966:	2201      	movs	r2, #1
 8102968:	409a      	lsls	r2, r3
 810296a:	68fb      	ldr	r3, [r7, #12]
 810296c:	605a      	str	r2, [r3, #4]
 810296e:	e008      	b.n	8102982 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	2240      	movs	r2, #64	; 0x40
 8102974:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	2203      	movs	r2, #3
 810297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810297e:	2301      	movs	r3, #1
 8102980:	e0b7      	b.n	8102af2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	681b      	ldr	r3, [r3, #0]
 8102986:	4a5f      	ldr	r2, [pc, #380]	; (8102b04 <HAL_DMA_Init+0x654>)
 8102988:	4293      	cmp	r3, r2
 810298a:	d072      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	4a5d      	ldr	r2, [pc, #372]	; (8102b08 <HAL_DMA_Init+0x658>)
 8102992:	4293      	cmp	r3, r2
 8102994:	d06d      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	681b      	ldr	r3, [r3, #0]
 810299a:	4a5c      	ldr	r2, [pc, #368]	; (8102b0c <HAL_DMA_Init+0x65c>)
 810299c:	4293      	cmp	r3, r2
 810299e:	d068      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	4a5a      	ldr	r2, [pc, #360]	; (8102b10 <HAL_DMA_Init+0x660>)
 81029a6:	4293      	cmp	r3, r2
 81029a8:	d063      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	4a59      	ldr	r2, [pc, #356]	; (8102b14 <HAL_DMA_Init+0x664>)
 81029b0:	4293      	cmp	r3, r2
 81029b2:	d05e      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	681b      	ldr	r3, [r3, #0]
 81029b8:	4a57      	ldr	r2, [pc, #348]	; (8102b18 <HAL_DMA_Init+0x668>)
 81029ba:	4293      	cmp	r3, r2
 81029bc:	d059      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	4a56      	ldr	r2, [pc, #344]	; (8102b1c <HAL_DMA_Init+0x66c>)
 81029c4:	4293      	cmp	r3, r2
 81029c6:	d054      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	4a54      	ldr	r2, [pc, #336]	; (8102b20 <HAL_DMA_Init+0x670>)
 81029ce:	4293      	cmp	r3, r2
 81029d0:	d04f      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	4a53      	ldr	r2, [pc, #332]	; (8102b24 <HAL_DMA_Init+0x674>)
 81029d8:	4293      	cmp	r3, r2
 81029da:	d04a      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	4a51      	ldr	r2, [pc, #324]	; (8102b28 <HAL_DMA_Init+0x678>)
 81029e2:	4293      	cmp	r3, r2
 81029e4:	d045      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	4a50      	ldr	r2, [pc, #320]	; (8102b2c <HAL_DMA_Init+0x67c>)
 81029ec:	4293      	cmp	r3, r2
 81029ee:	d040      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	4a4e      	ldr	r2, [pc, #312]	; (8102b30 <HAL_DMA_Init+0x680>)
 81029f6:	4293      	cmp	r3, r2
 81029f8:	d03b      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	4a4d      	ldr	r2, [pc, #308]	; (8102b34 <HAL_DMA_Init+0x684>)
 8102a00:	4293      	cmp	r3, r2
 8102a02:	d036      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	4a4b      	ldr	r2, [pc, #300]	; (8102b38 <HAL_DMA_Init+0x688>)
 8102a0a:	4293      	cmp	r3, r2
 8102a0c:	d031      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	4a4a      	ldr	r2, [pc, #296]	; (8102b3c <HAL_DMA_Init+0x68c>)
 8102a14:	4293      	cmp	r3, r2
 8102a16:	d02c      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	681b      	ldr	r3, [r3, #0]
 8102a1c:	4a48      	ldr	r2, [pc, #288]	; (8102b40 <HAL_DMA_Init+0x690>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d027      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	4a47      	ldr	r2, [pc, #284]	; (8102b44 <HAL_DMA_Init+0x694>)
 8102a28:	4293      	cmp	r3, r2
 8102a2a:	d022      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	4a45      	ldr	r2, [pc, #276]	; (8102b48 <HAL_DMA_Init+0x698>)
 8102a32:	4293      	cmp	r3, r2
 8102a34:	d01d      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	4a44      	ldr	r2, [pc, #272]	; (8102b4c <HAL_DMA_Init+0x69c>)
 8102a3c:	4293      	cmp	r3, r2
 8102a3e:	d018      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	4a42      	ldr	r2, [pc, #264]	; (8102b50 <HAL_DMA_Init+0x6a0>)
 8102a46:	4293      	cmp	r3, r2
 8102a48:	d013      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	4a41      	ldr	r2, [pc, #260]	; (8102b54 <HAL_DMA_Init+0x6a4>)
 8102a50:	4293      	cmp	r3, r2
 8102a52:	d00e      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	4a3f      	ldr	r2, [pc, #252]	; (8102b58 <HAL_DMA_Init+0x6a8>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d009      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	4a3e      	ldr	r2, [pc, #248]	; (8102b5c <HAL_DMA_Init+0x6ac>)
 8102a64:	4293      	cmp	r3, r2
 8102a66:	d004      	beq.n	8102a72 <HAL_DMA_Init+0x5c2>
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	4a3c      	ldr	r2, [pc, #240]	; (8102b60 <HAL_DMA_Init+0x6b0>)
 8102a6e:	4293      	cmp	r3, r2
 8102a70:	d101      	bne.n	8102a76 <HAL_DMA_Init+0x5c6>
 8102a72:	2301      	movs	r3, #1
 8102a74:	e000      	b.n	8102a78 <HAL_DMA_Init+0x5c8>
 8102a76:	2300      	movs	r3, #0
 8102a78:	2b00      	cmp	r3, #0
 8102a7a:	d032      	beq.n	8102ae2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102a7c:	6878      	ldr	r0, [r7, #4]
 8102a7e:	f002 fa4d 	bl	8104f1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	689b      	ldr	r3, [r3, #8]
 8102a86:	2b80      	cmp	r3, #128	; 0x80
 8102a88:	d102      	bne.n	8102a90 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102a8a:	687b      	ldr	r3, [r7, #4]
 8102a8c:	2200      	movs	r2, #0
 8102a8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	685a      	ldr	r2, [r3, #4]
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102a98:	b2d2      	uxtb	r2, r2
 8102a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102aa0:	687a      	ldr	r2, [r7, #4]
 8102aa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102aa4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	685b      	ldr	r3, [r3, #4]
 8102aaa:	2b00      	cmp	r3, #0
 8102aac:	d010      	beq.n	8102ad0 <HAL_DMA_Init+0x620>
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	685b      	ldr	r3, [r3, #4]
 8102ab2:	2b08      	cmp	r3, #8
 8102ab4:	d80c      	bhi.n	8102ad0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102ab6:	6878      	ldr	r0, [r7, #4]
 8102ab8:	f002 faca 	bl	8105050 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102ac0:	2200      	movs	r2, #0
 8102ac2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102ac8:	687a      	ldr	r2, [r7, #4]
 8102aca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102acc:	605a      	str	r2, [r3, #4]
 8102ace:	e008      	b.n	8102ae2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	2200      	movs	r2, #0
 8102ad4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	2200      	movs	r2, #0
 8102ada:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	2200      	movs	r2, #0
 8102ae0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	2200      	movs	r2, #0
 8102ae6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	2201      	movs	r2, #1
 8102aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102af0:	2300      	movs	r3, #0
}
 8102af2:	4618      	mov	r0, r3
 8102af4:	3718      	adds	r7, #24
 8102af6:	46bd      	mov	sp, r7
 8102af8:	bd80      	pop	{r7, pc}
 8102afa:	bf00      	nop
 8102afc:	a7fdabf8 	.word	0xa7fdabf8
 8102b00:	cccccccd 	.word	0xcccccccd
 8102b04:	40020010 	.word	0x40020010
 8102b08:	40020028 	.word	0x40020028
 8102b0c:	40020040 	.word	0x40020040
 8102b10:	40020058 	.word	0x40020058
 8102b14:	40020070 	.word	0x40020070
 8102b18:	40020088 	.word	0x40020088
 8102b1c:	400200a0 	.word	0x400200a0
 8102b20:	400200b8 	.word	0x400200b8
 8102b24:	40020410 	.word	0x40020410
 8102b28:	40020428 	.word	0x40020428
 8102b2c:	40020440 	.word	0x40020440
 8102b30:	40020458 	.word	0x40020458
 8102b34:	40020470 	.word	0x40020470
 8102b38:	40020488 	.word	0x40020488
 8102b3c:	400204a0 	.word	0x400204a0
 8102b40:	400204b8 	.word	0x400204b8
 8102b44:	58025408 	.word	0x58025408
 8102b48:	5802541c 	.word	0x5802541c
 8102b4c:	58025430 	.word	0x58025430
 8102b50:	58025444 	.word	0x58025444
 8102b54:	58025458 	.word	0x58025458
 8102b58:	5802546c 	.word	0x5802546c
 8102b5c:	58025480 	.word	0x58025480
 8102b60:	58025494 	.word	0x58025494

08102b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102b64:	b580      	push	{r7, lr}
 8102b66:	b086      	sub	sp, #24
 8102b68:	af00      	add	r7, sp, #0
 8102b6a:	60f8      	str	r0, [r7, #12]
 8102b6c:	60b9      	str	r1, [r7, #8]
 8102b6e:	607a      	str	r2, [r7, #4]
 8102b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102b72:	2300      	movs	r3, #0
 8102b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102b76:	68fb      	ldr	r3, [r7, #12]
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d101      	bne.n	8102b80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102b7c:	2301      	movs	r3, #1
 8102b7e:	e226      	b.n	8102fce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102b80:	68fb      	ldr	r3, [r7, #12]
 8102b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102b86:	2b01      	cmp	r3, #1
 8102b88:	d101      	bne.n	8102b8e <HAL_DMA_Start_IT+0x2a>
 8102b8a:	2302      	movs	r3, #2
 8102b8c:	e21f      	b.n	8102fce <HAL_DMA_Start_IT+0x46a>
 8102b8e:	68fb      	ldr	r3, [r7, #12]
 8102b90:	2201      	movs	r2, #1
 8102b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102b96:	68fb      	ldr	r3, [r7, #12]
 8102b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102b9c:	b2db      	uxtb	r3, r3
 8102b9e:	2b01      	cmp	r3, #1
 8102ba0:	f040 820a 	bne.w	8102fb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102ba4:	68fb      	ldr	r3, [r7, #12]
 8102ba6:	2202      	movs	r2, #2
 8102ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102bac:	68fb      	ldr	r3, [r7, #12]
 8102bae:	2200      	movs	r2, #0
 8102bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102bb2:	68fb      	ldr	r3, [r7, #12]
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	4a68      	ldr	r2, [pc, #416]	; (8102d58 <HAL_DMA_Start_IT+0x1f4>)
 8102bb8:	4293      	cmp	r3, r2
 8102bba:	d04a      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	681b      	ldr	r3, [r3, #0]
 8102bc0:	4a66      	ldr	r2, [pc, #408]	; (8102d5c <HAL_DMA_Start_IT+0x1f8>)
 8102bc2:	4293      	cmp	r3, r2
 8102bc4:	d045      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102bc6:	68fb      	ldr	r3, [r7, #12]
 8102bc8:	681b      	ldr	r3, [r3, #0]
 8102bca:	4a65      	ldr	r2, [pc, #404]	; (8102d60 <HAL_DMA_Start_IT+0x1fc>)
 8102bcc:	4293      	cmp	r3, r2
 8102bce:	d040      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102bd0:	68fb      	ldr	r3, [r7, #12]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	4a63      	ldr	r2, [pc, #396]	; (8102d64 <HAL_DMA_Start_IT+0x200>)
 8102bd6:	4293      	cmp	r3, r2
 8102bd8:	d03b      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102bda:	68fb      	ldr	r3, [r7, #12]
 8102bdc:	681b      	ldr	r3, [r3, #0]
 8102bde:	4a62      	ldr	r2, [pc, #392]	; (8102d68 <HAL_DMA_Start_IT+0x204>)
 8102be0:	4293      	cmp	r3, r2
 8102be2:	d036      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	4a60      	ldr	r2, [pc, #384]	; (8102d6c <HAL_DMA_Start_IT+0x208>)
 8102bea:	4293      	cmp	r3, r2
 8102bec:	d031      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102bee:	68fb      	ldr	r3, [r7, #12]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	4a5f      	ldr	r2, [pc, #380]	; (8102d70 <HAL_DMA_Start_IT+0x20c>)
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	d02c      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	681b      	ldr	r3, [r3, #0]
 8102bfc:	4a5d      	ldr	r2, [pc, #372]	; (8102d74 <HAL_DMA_Start_IT+0x210>)
 8102bfe:	4293      	cmp	r3, r2
 8102c00:	d027      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c02:	68fb      	ldr	r3, [r7, #12]
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	4a5c      	ldr	r2, [pc, #368]	; (8102d78 <HAL_DMA_Start_IT+0x214>)
 8102c08:	4293      	cmp	r3, r2
 8102c0a:	d022      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	4a5a      	ldr	r2, [pc, #360]	; (8102d7c <HAL_DMA_Start_IT+0x218>)
 8102c12:	4293      	cmp	r3, r2
 8102c14:	d01d      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c16:	68fb      	ldr	r3, [r7, #12]
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	4a59      	ldr	r2, [pc, #356]	; (8102d80 <HAL_DMA_Start_IT+0x21c>)
 8102c1c:	4293      	cmp	r3, r2
 8102c1e:	d018      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	4a57      	ldr	r2, [pc, #348]	; (8102d84 <HAL_DMA_Start_IT+0x220>)
 8102c26:	4293      	cmp	r3, r2
 8102c28:	d013      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c2a:	68fb      	ldr	r3, [r7, #12]
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	4a56      	ldr	r2, [pc, #344]	; (8102d88 <HAL_DMA_Start_IT+0x224>)
 8102c30:	4293      	cmp	r3, r2
 8102c32:	d00e      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	4a54      	ldr	r2, [pc, #336]	; (8102d8c <HAL_DMA_Start_IT+0x228>)
 8102c3a:	4293      	cmp	r3, r2
 8102c3c:	d009      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	4a53      	ldr	r2, [pc, #332]	; (8102d90 <HAL_DMA_Start_IT+0x22c>)
 8102c44:	4293      	cmp	r3, r2
 8102c46:	d004      	beq.n	8102c52 <HAL_DMA_Start_IT+0xee>
 8102c48:	68fb      	ldr	r3, [r7, #12]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	4a51      	ldr	r2, [pc, #324]	; (8102d94 <HAL_DMA_Start_IT+0x230>)
 8102c4e:	4293      	cmp	r3, r2
 8102c50:	d108      	bne.n	8102c64 <HAL_DMA_Start_IT+0x100>
 8102c52:	68fb      	ldr	r3, [r7, #12]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	681a      	ldr	r2, [r3, #0]
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f022 0201 	bic.w	r2, r2, #1
 8102c60:	601a      	str	r2, [r3, #0]
 8102c62:	e007      	b.n	8102c74 <HAL_DMA_Start_IT+0x110>
 8102c64:	68fb      	ldr	r3, [r7, #12]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	681a      	ldr	r2, [r3, #0]
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	f022 0201 	bic.w	r2, r2, #1
 8102c72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102c74:	683b      	ldr	r3, [r7, #0]
 8102c76:	687a      	ldr	r2, [r7, #4]
 8102c78:	68b9      	ldr	r1, [r7, #8]
 8102c7a:	68f8      	ldr	r0, [r7, #12]
 8102c7c:	f001 fe74 	bl	8104968 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	4a34      	ldr	r2, [pc, #208]	; (8102d58 <HAL_DMA_Start_IT+0x1f4>)
 8102c86:	4293      	cmp	r3, r2
 8102c88:	d04a      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102c8a:	68fb      	ldr	r3, [r7, #12]
 8102c8c:	681b      	ldr	r3, [r3, #0]
 8102c8e:	4a33      	ldr	r2, [pc, #204]	; (8102d5c <HAL_DMA_Start_IT+0x1f8>)
 8102c90:	4293      	cmp	r3, r2
 8102c92:	d045      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	4a31      	ldr	r2, [pc, #196]	; (8102d60 <HAL_DMA_Start_IT+0x1fc>)
 8102c9a:	4293      	cmp	r3, r2
 8102c9c:	d040      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102c9e:	68fb      	ldr	r3, [r7, #12]
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	4a30      	ldr	r2, [pc, #192]	; (8102d64 <HAL_DMA_Start_IT+0x200>)
 8102ca4:	4293      	cmp	r3, r2
 8102ca6:	d03b      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102ca8:	68fb      	ldr	r3, [r7, #12]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	4a2e      	ldr	r2, [pc, #184]	; (8102d68 <HAL_DMA_Start_IT+0x204>)
 8102cae:	4293      	cmp	r3, r2
 8102cb0:	d036      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102cb2:	68fb      	ldr	r3, [r7, #12]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	4a2d      	ldr	r2, [pc, #180]	; (8102d6c <HAL_DMA_Start_IT+0x208>)
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d031      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102cbc:	68fb      	ldr	r3, [r7, #12]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	4a2b      	ldr	r2, [pc, #172]	; (8102d70 <HAL_DMA_Start_IT+0x20c>)
 8102cc2:	4293      	cmp	r3, r2
 8102cc4:	d02c      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	4a2a      	ldr	r2, [pc, #168]	; (8102d74 <HAL_DMA_Start_IT+0x210>)
 8102ccc:	4293      	cmp	r3, r2
 8102cce:	d027      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	4a28      	ldr	r2, [pc, #160]	; (8102d78 <HAL_DMA_Start_IT+0x214>)
 8102cd6:	4293      	cmp	r3, r2
 8102cd8:	d022      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102cda:	68fb      	ldr	r3, [r7, #12]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	4a27      	ldr	r2, [pc, #156]	; (8102d7c <HAL_DMA_Start_IT+0x218>)
 8102ce0:	4293      	cmp	r3, r2
 8102ce2:	d01d      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102ce4:	68fb      	ldr	r3, [r7, #12]
 8102ce6:	681b      	ldr	r3, [r3, #0]
 8102ce8:	4a25      	ldr	r2, [pc, #148]	; (8102d80 <HAL_DMA_Start_IT+0x21c>)
 8102cea:	4293      	cmp	r3, r2
 8102cec:	d018      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102cee:	68fb      	ldr	r3, [r7, #12]
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	4a24      	ldr	r2, [pc, #144]	; (8102d84 <HAL_DMA_Start_IT+0x220>)
 8102cf4:	4293      	cmp	r3, r2
 8102cf6:	d013      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102cf8:	68fb      	ldr	r3, [r7, #12]
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	4a22      	ldr	r2, [pc, #136]	; (8102d88 <HAL_DMA_Start_IT+0x224>)
 8102cfe:	4293      	cmp	r3, r2
 8102d00:	d00e      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102d02:	68fb      	ldr	r3, [r7, #12]
 8102d04:	681b      	ldr	r3, [r3, #0]
 8102d06:	4a21      	ldr	r2, [pc, #132]	; (8102d8c <HAL_DMA_Start_IT+0x228>)
 8102d08:	4293      	cmp	r3, r2
 8102d0a:	d009      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102d0c:	68fb      	ldr	r3, [r7, #12]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	4a1f      	ldr	r2, [pc, #124]	; (8102d90 <HAL_DMA_Start_IT+0x22c>)
 8102d12:	4293      	cmp	r3, r2
 8102d14:	d004      	beq.n	8102d20 <HAL_DMA_Start_IT+0x1bc>
 8102d16:	68fb      	ldr	r3, [r7, #12]
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	4a1e      	ldr	r2, [pc, #120]	; (8102d94 <HAL_DMA_Start_IT+0x230>)
 8102d1c:	4293      	cmp	r3, r2
 8102d1e:	d101      	bne.n	8102d24 <HAL_DMA_Start_IT+0x1c0>
 8102d20:	2301      	movs	r3, #1
 8102d22:	e000      	b.n	8102d26 <HAL_DMA_Start_IT+0x1c2>
 8102d24:	2300      	movs	r3, #0
 8102d26:	2b00      	cmp	r3, #0
 8102d28:	d036      	beq.n	8102d98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102d2a:	68fb      	ldr	r3, [r7, #12]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	f023 021e 	bic.w	r2, r3, #30
 8102d34:	68fb      	ldr	r3, [r7, #12]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	f042 0216 	orr.w	r2, r2, #22
 8102d3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d03e      	beq.n	8102dc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102d46:	68fb      	ldr	r3, [r7, #12]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	681a      	ldr	r2, [r3, #0]
 8102d4c:	68fb      	ldr	r3, [r7, #12]
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	f042 0208 	orr.w	r2, r2, #8
 8102d54:	601a      	str	r2, [r3, #0]
 8102d56:	e035      	b.n	8102dc4 <HAL_DMA_Start_IT+0x260>
 8102d58:	40020010 	.word	0x40020010
 8102d5c:	40020028 	.word	0x40020028
 8102d60:	40020040 	.word	0x40020040
 8102d64:	40020058 	.word	0x40020058
 8102d68:	40020070 	.word	0x40020070
 8102d6c:	40020088 	.word	0x40020088
 8102d70:	400200a0 	.word	0x400200a0
 8102d74:	400200b8 	.word	0x400200b8
 8102d78:	40020410 	.word	0x40020410
 8102d7c:	40020428 	.word	0x40020428
 8102d80:	40020440 	.word	0x40020440
 8102d84:	40020458 	.word	0x40020458
 8102d88:	40020470 	.word	0x40020470
 8102d8c:	40020488 	.word	0x40020488
 8102d90:	400204a0 	.word	0x400204a0
 8102d94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102d98:	68fb      	ldr	r3, [r7, #12]
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	f023 020e 	bic.w	r2, r3, #14
 8102da2:	68fb      	ldr	r3, [r7, #12]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	f042 020a 	orr.w	r2, r2, #10
 8102daa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102dac:	68fb      	ldr	r3, [r7, #12]
 8102dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102db0:	2b00      	cmp	r3, #0
 8102db2:	d007      	beq.n	8102dc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102db4:	68fb      	ldr	r3, [r7, #12]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	681a      	ldr	r2, [r3, #0]
 8102dba:	68fb      	ldr	r3, [r7, #12]
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	f042 0204 	orr.w	r2, r2, #4
 8102dc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102dc4:	68fb      	ldr	r3, [r7, #12]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	4a83      	ldr	r2, [pc, #524]	; (8102fd8 <HAL_DMA_Start_IT+0x474>)
 8102dca:	4293      	cmp	r3, r2
 8102dcc:	d072      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102dce:	68fb      	ldr	r3, [r7, #12]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	4a82      	ldr	r2, [pc, #520]	; (8102fdc <HAL_DMA_Start_IT+0x478>)
 8102dd4:	4293      	cmp	r3, r2
 8102dd6:	d06d      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	4a80      	ldr	r2, [pc, #512]	; (8102fe0 <HAL_DMA_Start_IT+0x47c>)
 8102dde:	4293      	cmp	r3, r2
 8102de0:	d068      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102de2:	68fb      	ldr	r3, [r7, #12]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	4a7f      	ldr	r2, [pc, #508]	; (8102fe4 <HAL_DMA_Start_IT+0x480>)
 8102de8:	4293      	cmp	r3, r2
 8102dea:	d063      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	4a7d      	ldr	r2, [pc, #500]	; (8102fe8 <HAL_DMA_Start_IT+0x484>)
 8102df2:	4293      	cmp	r3, r2
 8102df4:	d05e      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102df6:	68fb      	ldr	r3, [r7, #12]
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	4a7c      	ldr	r2, [pc, #496]	; (8102fec <HAL_DMA_Start_IT+0x488>)
 8102dfc:	4293      	cmp	r3, r2
 8102dfe:	d059      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e00:	68fb      	ldr	r3, [r7, #12]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	4a7a      	ldr	r2, [pc, #488]	; (8102ff0 <HAL_DMA_Start_IT+0x48c>)
 8102e06:	4293      	cmp	r3, r2
 8102e08:	d054      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e0a:	68fb      	ldr	r3, [r7, #12]
 8102e0c:	681b      	ldr	r3, [r3, #0]
 8102e0e:	4a79      	ldr	r2, [pc, #484]	; (8102ff4 <HAL_DMA_Start_IT+0x490>)
 8102e10:	4293      	cmp	r3, r2
 8102e12:	d04f      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e14:	68fb      	ldr	r3, [r7, #12]
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	4a77      	ldr	r2, [pc, #476]	; (8102ff8 <HAL_DMA_Start_IT+0x494>)
 8102e1a:	4293      	cmp	r3, r2
 8102e1c:	d04a      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e1e:	68fb      	ldr	r3, [r7, #12]
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	4a76      	ldr	r2, [pc, #472]	; (8102ffc <HAL_DMA_Start_IT+0x498>)
 8102e24:	4293      	cmp	r3, r2
 8102e26:	d045      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e28:	68fb      	ldr	r3, [r7, #12]
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	4a74      	ldr	r2, [pc, #464]	; (8103000 <HAL_DMA_Start_IT+0x49c>)
 8102e2e:	4293      	cmp	r3, r2
 8102e30:	d040      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e32:	68fb      	ldr	r3, [r7, #12]
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	4a73      	ldr	r2, [pc, #460]	; (8103004 <HAL_DMA_Start_IT+0x4a0>)
 8102e38:	4293      	cmp	r3, r2
 8102e3a:	d03b      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	4a71      	ldr	r2, [pc, #452]	; (8103008 <HAL_DMA_Start_IT+0x4a4>)
 8102e42:	4293      	cmp	r3, r2
 8102e44:	d036      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e46:	68fb      	ldr	r3, [r7, #12]
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	4a70      	ldr	r2, [pc, #448]	; (810300c <HAL_DMA_Start_IT+0x4a8>)
 8102e4c:	4293      	cmp	r3, r2
 8102e4e:	d031      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e50:	68fb      	ldr	r3, [r7, #12]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	4a6e      	ldr	r2, [pc, #440]	; (8103010 <HAL_DMA_Start_IT+0x4ac>)
 8102e56:	4293      	cmp	r3, r2
 8102e58:	d02c      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e5a:	68fb      	ldr	r3, [r7, #12]
 8102e5c:	681b      	ldr	r3, [r3, #0]
 8102e5e:	4a6d      	ldr	r2, [pc, #436]	; (8103014 <HAL_DMA_Start_IT+0x4b0>)
 8102e60:	4293      	cmp	r3, r2
 8102e62:	d027      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	681b      	ldr	r3, [r3, #0]
 8102e68:	4a6b      	ldr	r2, [pc, #428]	; (8103018 <HAL_DMA_Start_IT+0x4b4>)
 8102e6a:	4293      	cmp	r3, r2
 8102e6c:	d022      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e6e:	68fb      	ldr	r3, [r7, #12]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	4a6a      	ldr	r2, [pc, #424]	; (810301c <HAL_DMA_Start_IT+0x4b8>)
 8102e74:	4293      	cmp	r3, r2
 8102e76:	d01d      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e78:	68fb      	ldr	r3, [r7, #12]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	4a68      	ldr	r2, [pc, #416]	; (8103020 <HAL_DMA_Start_IT+0x4bc>)
 8102e7e:	4293      	cmp	r3, r2
 8102e80:	d018      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e82:	68fb      	ldr	r3, [r7, #12]
 8102e84:	681b      	ldr	r3, [r3, #0]
 8102e86:	4a67      	ldr	r2, [pc, #412]	; (8103024 <HAL_DMA_Start_IT+0x4c0>)
 8102e88:	4293      	cmp	r3, r2
 8102e8a:	d013      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e8c:	68fb      	ldr	r3, [r7, #12]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	4a65      	ldr	r2, [pc, #404]	; (8103028 <HAL_DMA_Start_IT+0x4c4>)
 8102e92:	4293      	cmp	r3, r2
 8102e94:	d00e      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	681b      	ldr	r3, [r3, #0]
 8102e9a:	4a64      	ldr	r2, [pc, #400]	; (810302c <HAL_DMA_Start_IT+0x4c8>)
 8102e9c:	4293      	cmp	r3, r2
 8102e9e:	d009      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	4a62      	ldr	r2, [pc, #392]	; (8103030 <HAL_DMA_Start_IT+0x4cc>)
 8102ea6:	4293      	cmp	r3, r2
 8102ea8:	d004      	beq.n	8102eb4 <HAL_DMA_Start_IT+0x350>
 8102eaa:	68fb      	ldr	r3, [r7, #12]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	4a61      	ldr	r2, [pc, #388]	; (8103034 <HAL_DMA_Start_IT+0x4d0>)
 8102eb0:	4293      	cmp	r3, r2
 8102eb2:	d101      	bne.n	8102eb8 <HAL_DMA_Start_IT+0x354>
 8102eb4:	2301      	movs	r3, #1
 8102eb6:	e000      	b.n	8102eba <HAL_DMA_Start_IT+0x356>
 8102eb8:	2300      	movs	r3, #0
 8102eba:	2b00      	cmp	r3, #0
 8102ebc:	d01a      	beq.n	8102ef4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102ebe:	68fb      	ldr	r3, [r7, #12]
 8102ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	d007      	beq.n	8102edc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102ecc:	68fb      	ldr	r3, [r7, #12]
 8102ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ed0:	681a      	ldr	r2, [r3, #0]
 8102ed2:	68fb      	ldr	r3, [r7, #12]
 8102ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102eda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102ee0:	2b00      	cmp	r3, #0
 8102ee2:	d007      	beq.n	8102ef4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102ee4:	68fb      	ldr	r3, [r7, #12]
 8102ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102ee8:	681a      	ldr	r2, [r3, #0]
 8102eea:	68fb      	ldr	r3, [r7, #12]
 8102eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102ef2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102ef4:	68fb      	ldr	r3, [r7, #12]
 8102ef6:	681b      	ldr	r3, [r3, #0]
 8102ef8:	4a37      	ldr	r2, [pc, #220]	; (8102fd8 <HAL_DMA_Start_IT+0x474>)
 8102efa:	4293      	cmp	r3, r2
 8102efc:	d04a      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102efe:	68fb      	ldr	r3, [r7, #12]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4a36      	ldr	r2, [pc, #216]	; (8102fdc <HAL_DMA_Start_IT+0x478>)
 8102f04:	4293      	cmp	r3, r2
 8102f06:	d045      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f08:	68fb      	ldr	r3, [r7, #12]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	4a34      	ldr	r2, [pc, #208]	; (8102fe0 <HAL_DMA_Start_IT+0x47c>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d040      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f12:	68fb      	ldr	r3, [r7, #12]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4a33      	ldr	r2, [pc, #204]	; (8102fe4 <HAL_DMA_Start_IT+0x480>)
 8102f18:	4293      	cmp	r3, r2
 8102f1a:	d03b      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f1c:	68fb      	ldr	r3, [r7, #12]
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	4a31      	ldr	r2, [pc, #196]	; (8102fe8 <HAL_DMA_Start_IT+0x484>)
 8102f22:	4293      	cmp	r3, r2
 8102f24:	d036      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f26:	68fb      	ldr	r3, [r7, #12]
 8102f28:	681b      	ldr	r3, [r3, #0]
 8102f2a:	4a30      	ldr	r2, [pc, #192]	; (8102fec <HAL_DMA_Start_IT+0x488>)
 8102f2c:	4293      	cmp	r3, r2
 8102f2e:	d031      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f30:	68fb      	ldr	r3, [r7, #12]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	4a2e      	ldr	r2, [pc, #184]	; (8102ff0 <HAL_DMA_Start_IT+0x48c>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d02c      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f3a:	68fb      	ldr	r3, [r7, #12]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	4a2d      	ldr	r2, [pc, #180]	; (8102ff4 <HAL_DMA_Start_IT+0x490>)
 8102f40:	4293      	cmp	r3, r2
 8102f42:	d027      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f44:	68fb      	ldr	r3, [r7, #12]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	4a2b      	ldr	r2, [pc, #172]	; (8102ff8 <HAL_DMA_Start_IT+0x494>)
 8102f4a:	4293      	cmp	r3, r2
 8102f4c:	d022      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f4e:	68fb      	ldr	r3, [r7, #12]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	4a2a      	ldr	r2, [pc, #168]	; (8102ffc <HAL_DMA_Start_IT+0x498>)
 8102f54:	4293      	cmp	r3, r2
 8102f56:	d01d      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f58:	68fb      	ldr	r3, [r7, #12]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	4a28      	ldr	r2, [pc, #160]	; (8103000 <HAL_DMA_Start_IT+0x49c>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d018      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f62:	68fb      	ldr	r3, [r7, #12]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	4a27      	ldr	r2, [pc, #156]	; (8103004 <HAL_DMA_Start_IT+0x4a0>)
 8102f68:	4293      	cmp	r3, r2
 8102f6a:	d013      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f6c:	68fb      	ldr	r3, [r7, #12]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	4a25      	ldr	r2, [pc, #148]	; (8103008 <HAL_DMA_Start_IT+0x4a4>)
 8102f72:	4293      	cmp	r3, r2
 8102f74:	d00e      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f76:	68fb      	ldr	r3, [r7, #12]
 8102f78:	681b      	ldr	r3, [r3, #0]
 8102f7a:	4a24      	ldr	r2, [pc, #144]	; (810300c <HAL_DMA_Start_IT+0x4a8>)
 8102f7c:	4293      	cmp	r3, r2
 8102f7e:	d009      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f80:	68fb      	ldr	r3, [r7, #12]
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	4a22      	ldr	r2, [pc, #136]	; (8103010 <HAL_DMA_Start_IT+0x4ac>)
 8102f86:	4293      	cmp	r3, r2
 8102f88:	d004      	beq.n	8102f94 <HAL_DMA_Start_IT+0x430>
 8102f8a:	68fb      	ldr	r3, [r7, #12]
 8102f8c:	681b      	ldr	r3, [r3, #0]
 8102f8e:	4a21      	ldr	r2, [pc, #132]	; (8103014 <HAL_DMA_Start_IT+0x4b0>)
 8102f90:	4293      	cmp	r3, r2
 8102f92:	d108      	bne.n	8102fa6 <HAL_DMA_Start_IT+0x442>
 8102f94:	68fb      	ldr	r3, [r7, #12]
 8102f96:	681b      	ldr	r3, [r3, #0]
 8102f98:	681a      	ldr	r2, [r3, #0]
 8102f9a:	68fb      	ldr	r3, [r7, #12]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	f042 0201 	orr.w	r2, r2, #1
 8102fa2:	601a      	str	r2, [r3, #0]
 8102fa4:	e012      	b.n	8102fcc <HAL_DMA_Start_IT+0x468>
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	681a      	ldr	r2, [r3, #0]
 8102fac:	68fb      	ldr	r3, [r7, #12]
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	f042 0201 	orr.w	r2, r2, #1
 8102fb4:	601a      	str	r2, [r3, #0]
 8102fb6:	e009      	b.n	8102fcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102fb8:	68fb      	ldr	r3, [r7, #12]
 8102fba:	2200      	movs	r2, #0
 8102fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102fc0:	68fb      	ldr	r3, [r7, #12]
 8102fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102fc8:	2301      	movs	r3, #1
 8102fca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8102fce:	4618      	mov	r0, r3
 8102fd0:	3718      	adds	r7, #24
 8102fd2:	46bd      	mov	sp, r7
 8102fd4:	bd80      	pop	{r7, pc}
 8102fd6:	bf00      	nop
 8102fd8:	40020010 	.word	0x40020010
 8102fdc:	40020028 	.word	0x40020028
 8102fe0:	40020040 	.word	0x40020040
 8102fe4:	40020058 	.word	0x40020058
 8102fe8:	40020070 	.word	0x40020070
 8102fec:	40020088 	.word	0x40020088
 8102ff0:	400200a0 	.word	0x400200a0
 8102ff4:	400200b8 	.word	0x400200b8
 8102ff8:	40020410 	.word	0x40020410
 8102ffc:	40020428 	.word	0x40020428
 8103000:	40020440 	.word	0x40020440
 8103004:	40020458 	.word	0x40020458
 8103008:	40020470 	.word	0x40020470
 810300c:	40020488 	.word	0x40020488
 8103010:	400204a0 	.word	0x400204a0
 8103014:	400204b8 	.word	0x400204b8
 8103018:	58025408 	.word	0x58025408
 810301c:	5802541c 	.word	0x5802541c
 8103020:	58025430 	.word	0x58025430
 8103024:	58025444 	.word	0x58025444
 8103028:	58025458 	.word	0x58025458
 810302c:	5802546c 	.word	0x5802546c
 8103030:	58025480 	.word	0x58025480
 8103034:	58025494 	.word	0x58025494

08103038 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8103038:	b580      	push	{r7, lr}
 810303a:	b086      	sub	sp, #24
 810303c:	af00      	add	r7, sp, #0
 810303e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8103040:	f7ff f8c4 	bl	81021cc <HAL_GetTick>
 8103044:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	2b00      	cmp	r3, #0
 810304a:	d101      	bne.n	8103050 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 810304c:	2301      	movs	r3, #1
 810304e:	e2dc      	b.n	810360a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103056:	b2db      	uxtb	r3, r3
 8103058:	2b02      	cmp	r3, #2
 810305a:	d008      	beq.n	810306e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	2280      	movs	r2, #128	; 0x80
 8103060:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	2200      	movs	r2, #0
 8103066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 810306a:	2301      	movs	r3, #1
 810306c:	e2cd      	b.n	810360a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	4a76      	ldr	r2, [pc, #472]	; (810324c <HAL_DMA_Abort+0x214>)
 8103074:	4293      	cmp	r3, r2
 8103076:	d04a      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	4a74      	ldr	r2, [pc, #464]	; (8103250 <HAL_DMA_Abort+0x218>)
 810307e:	4293      	cmp	r3, r2
 8103080:	d045      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	4a73      	ldr	r2, [pc, #460]	; (8103254 <HAL_DMA_Abort+0x21c>)
 8103088:	4293      	cmp	r3, r2
 810308a:	d040      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	4a71      	ldr	r2, [pc, #452]	; (8103258 <HAL_DMA_Abort+0x220>)
 8103092:	4293      	cmp	r3, r2
 8103094:	d03b      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	4a70      	ldr	r2, [pc, #448]	; (810325c <HAL_DMA_Abort+0x224>)
 810309c:	4293      	cmp	r3, r2
 810309e:	d036      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	4a6e      	ldr	r2, [pc, #440]	; (8103260 <HAL_DMA_Abort+0x228>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d031      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	681b      	ldr	r3, [r3, #0]
 81030ae:	4a6d      	ldr	r2, [pc, #436]	; (8103264 <HAL_DMA_Abort+0x22c>)
 81030b0:	4293      	cmp	r3, r2
 81030b2:	d02c      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030b4:	687b      	ldr	r3, [r7, #4]
 81030b6:	681b      	ldr	r3, [r3, #0]
 81030b8:	4a6b      	ldr	r2, [pc, #428]	; (8103268 <HAL_DMA_Abort+0x230>)
 81030ba:	4293      	cmp	r3, r2
 81030bc:	d027      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	681b      	ldr	r3, [r3, #0]
 81030c2:	4a6a      	ldr	r2, [pc, #424]	; (810326c <HAL_DMA_Abort+0x234>)
 81030c4:	4293      	cmp	r3, r2
 81030c6:	d022      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	4a68      	ldr	r2, [pc, #416]	; (8103270 <HAL_DMA_Abort+0x238>)
 81030ce:	4293      	cmp	r3, r2
 81030d0:	d01d      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	681b      	ldr	r3, [r3, #0]
 81030d6:	4a67      	ldr	r2, [pc, #412]	; (8103274 <HAL_DMA_Abort+0x23c>)
 81030d8:	4293      	cmp	r3, r2
 81030da:	d018      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	4a65      	ldr	r2, [pc, #404]	; (8103278 <HAL_DMA_Abort+0x240>)
 81030e2:	4293      	cmp	r3, r2
 81030e4:	d013      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	4a64      	ldr	r2, [pc, #400]	; (810327c <HAL_DMA_Abort+0x244>)
 81030ec:	4293      	cmp	r3, r2
 81030ee:	d00e      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	4a62      	ldr	r2, [pc, #392]	; (8103280 <HAL_DMA_Abort+0x248>)
 81030f6:	4293      	cmp	r3, r2
 81030f8:	d009      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	681b      	ldr	r3, [r3, #0]
 81030fe:	4a61      	ldr	r2, [pc, #388]	; (8103284 <HAL_DMA_Abort+0x24c>)
 8103100:	4293      	cmp	r3, r2
 8103102:	d004      	beq.n	810310e <HAL_DMA_Abort+0xd6>
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	4a5f      	ldr	r2, [pc, #380]	; (8103288 <HAL_DMA_Abort+0x250>)
 810310a:	4293      	cmp	r3, r2
 810310c:	d101      	bne.n	8103112 <HAL_DMA_Abort+0xda>
 810310e:	2301      	movs	r3, #1
 8103110:	e000      	b.n	8103114 <HAL_DMA_Abort+0xdc>
 8103112:	2300      	movs	r3, #0
 8103114:	2b00      	cmp	r3, #0
 8103116:	d013      	beq.n	8103140 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	681b      	ldr	r3, [r3, #0]
 810311c:	681a      	ldr	r2, [r3, #0]
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	f022 021e 	bic.w	r2, r2, #30
 8103126:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	695a      	ldr	r2, [r3, #20]
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103136:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	617b      	str	r3, [r7, #20]
 810313e:	e00a      	b.n	8103156 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	681a      	ldr	r2, [r3, #0]
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	f022 020e 	bic.w	r2, r2, #14
 810314e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a3c      	ldr	r2, [pc, #240]	; (810324c <HAL_DMA_Abort+0x214>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d072      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a3a      	ldr	r2, [pc, #232]	; (8103250 <HAL_DMA_Abort+0x218>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d06d      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a39      	ldr	r2, [pc, #228]	; (8103254 <HAL_DMA_Abort+0x21c>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d068      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	4a37      	ldr	r2, [pc, #220]	; (8103258 <HAL_DMA_Abort+0x220>)
 810317a:	4293      	cmp	r3, r2
 810317c:	d063      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	4a36      	ldr	r2, [pc, #216]	; (810325c <HAL_DMA_Abort+0x224>)
 8103184:	4293      	cmp	r3, r2
 8103186:	d05e      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	4a34      	ldr	r2, [pc, #208]	; (8103260 <HAL_DMA_Abort+0x228>)
 810318e:	4293      	cmp	r3, r2
 8103190:	d059      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	4a33      	ldr	r2, [pc, #204]	; (8103264 <HAL_DMA_Abort+0x22c>)
 8103198:	4293      	cmp	r3, r2
 810319a:	d054      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	4a31      	ldr	r2, [pc, #196]	; (8103268 <HAL_DMA_Abort+0x230>)
 81031a2:	4293      	cmp	r3, r2
 81031a4:	d04f      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	4a30      	ldr	r2, [pc, #192]	; (810326c <HAL_DMA_Abort+0x234>)
 81031ac:	4293      	cmp	r3, r2
 81031ae:	d04a      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	4a2e      	ldr	r2, [pc, #184]	; (8103270 <HAL_DMA_Abort+0x238>)
 81031b6:	4293      	cmp	r3, r2
 81031b8:	d045      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	4a2d      	ldr	r2, [pc, #180]	; (8103274 <HAL_DMA_Abort+0x23c>)
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d040      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	4a2b      	ldr	r2, [pc, #172]	; (8103278 <HAL_DMA_Abort+0x240>)
 81031ca:	4293      	cmp	r3, r2
 81031cc:	d03b      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	4a2a      	ldr	r2, [pc, #168]	; (810327c <HAL_DMA_Abort+0x244>)
 81031d4:	4293      	cmp	r3, r2
 81031d6:	d036      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	681b      	ldr	r3, [r3, #0]
 81031dc:	4a28      	ldr	r2, [pc, #160]	; (8103280 <HAL_DMA_Abort+0x248>)
 81031de:	4293      	cmp	r3, r2
 81031e0:	d031      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	4a27      	ldr	r2, [pc, #156]	; (8103284 <HAL_DMA_Abort+0x24c>)
 81031e8:	4293      	cmp	r3, r2
 81031ea:	d02c      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	4a25      	ldr	r2, [pc, #148]	; (8103288 <HAL_DMA_Abort+0x250>)
 81031f2:	4293      	cmp	r3, r2
 81031f4:	d027      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	681b      	ldr	r3, [r3, #0]
 81031fa:	4a24      	ldr	r2, [pc, #144]	; (810328c <HAL_DMA_Abort+0x254>)
 81031fc:	4293      	cmp	r3, r2
 81031fe:	d022      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	681b      	ldr	r3, [r3, #0]
 8103204:	4a22      	ldr	r2, [pc, #136]	; (8103290 <HAL_DMA_Abort+0x258>)
 8103206:	4293      	cmp	r3, r2
 8103208:	d01d      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	4a21      	ldr	r2, [pc, #132]	; (8103294 <HAL_DMA_Abort+0x25c>)
 8103210:	4293      	cmp	r3, r2
 8103212:	d018      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	4a1f      	ldr	r2, [pc, #124]	; (8103298 <HAL_DMA_Abort+0x260>)
 810321a:	4293      	cmp	r3, r2
 810321c:	d013      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	4a1e      	ldr	r2, [pc, #120]	; (810329c <HAL_DMA_Abort+0x264>)
 8103224:	4293      	cmp	r3, r2
 8103226:	d00e      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	4a1c      	ldr	r2, [pc, #112]	; (81032a0 <HAL_DMA_Abort+0x268>)
 810322e:	4293      	cmp	r3, r2
 8103230:	d009      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	4a1b      	ldr	r2, [pc, #108]	; (81032a4 <HAL_DMA_Abort+0x26c>)
 8103238:	4293      	cmp	r3, r2
 810323a:	d004      	beq.n	8103246 <HAL_DMA_Abort+0x20e>
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4a19      	ldr	r2, [pc, #100]	; (81032a8 <HAL_DMA_Abort+0x270>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d132      	bne.n	81032ac <HAL_DMA_Abort+0x274>
 8103246:	2301      	movs	r3, #1
 8103248:	e031      	b.n	81032ae <HAL_DMA_Abort+0x276>
 810324a:	bf00      	nop
 810324c:	40020010 	.word	0x40020010
 8103250:	40020028 	.word	0x40020028
 8103254:	40020040 	.word	0x40020040
 8103258:	40020058 	.word	0x40020058
 810325c:	40020070 	.word	0x40020070
 8103260:	40020088 	.word	0x40020088
 8103264:	400200a0 	.word	0x400200a0
 8103268:	400200b8 	.word	0x400200b8
 810326c:	40020410 	.word	0x40020410
 8103270:	40020428 	.word	0x40020428
 8103274:	40020440 	.word	0x40020440
 8103278:	40020458 	.word	0x40020458
 810327c:	40020470 	.word	0x40020470
 8103280:	40020488 	.word	0x40020488
 8103284:	400204a0 	.word	0x400204a0
 8103288:	400204b8 	.word	0x400204b8
 810328c:	58025408 	.word	0x58025408
 8103290:	5802541c 	.word	0x5802541c
 8103294:	58025430 	.word	0x58025430
 8103298:	58025444 	.word	0x58025444
 810329c:	58025458 	.word	0x58025458
 81032a0:	5802546c 	.word	0x5802546c
 81032a4:	58025480 	.word	0x58025480
 81032a8:	58025494 	.word	0x58025494
 81032ac:	2300      	movs	r3, #0
 81032ae:	2b00      	cmp	r3, #0
 81032b0:	d007      	beq.n	81032c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81032b6:	681a      	ldr	r2, [r3, #0]
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81032bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81032c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	4a6d      	ldr	r2, [pc, #436]	; (810347c <HAL_DMA_Abort+0x444>)
 81032c8:	4293      	cmp	r3, r2
 81032ca:	d04a      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	4a6b      	ldr	r2, [pc, #428]	; (8103480 <HAL_DMA_Abort+0x448>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d045      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	4a6a      	ldr	r2, [pc, #424]	; (8103484 <HAL_DMA_Abort+0x44c>)
 81032dc:	4293      	cmp	r3, r2
 81032de:	d040      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	4a68      	ldr	r2, [pc, #416]	; (8103488 <HAL_DMA_Abort+0x450>)
 81032e6:	4293      	cmp	r3, r2
 81032e8:	d03b      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	4a67      	ldr	r2, [pc, #412]	; (810348c <HAL_DMA_Abort+0x454>)
 81032f0:	4293      	cmp	r3, r2
 81032f2:	d036      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	4a65      	ldr	r2, [pc, #404]	; (8103490 <HAL_DMA_Abort+0x458>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d031      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	4a64      	ldr	r2, [pc, #400]	; (8103494 <HAL_DMA_Abort+0x45c>)
 8103304:	4293      	cmp	r3, r2
 8103306:	d02c      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	4a62      	ldr	r2, [pc, #392]	; (8103498 <HAL_DMA_Abort+0x460>)
 810330e:	4293      	cmp	r3, r2
 8103310:	d027      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	4a61      	ldr	r2, [pc, #388]	; (810349c <HAL_DMA_Abort+0x464>)
 8103318:	4293      	cmp	r3, r2
 810331a:	d022      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	4a5f      	ldr	r2, [pc, #380]	; (81034a0 <HAL_DMA_Abort+0x468>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d01d      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	4a5e      	ldr	r2, [pc, #376]	; (81034a4 <HAL_DMA_Abort+0x46c>)
 810332c:	4293      	cmp	r3, r2
 810332e:	d018      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	4a5c      	ldr	r2, [pc, #368]	; (81034a8 <HAL_DMA_Abort+0x470>)
 8103336:	4293      	cmp	r3, r2
 8103338:	d013      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	681b      	ldr	r3, [r3, #0]
 810333e:	4a5b      	ldr	r2, [pc, #364]	; (81034ac <HAL_DMA_Abort+0x474>)
 8103340:	4293      	cmp	r3, r2
 8103342:	d00e      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	4a59      	ldr	r2, [pc, #356]	; (81034b0 <HAL_DMA_Abort+0x478>)
 810334a:	4293      	cmp	r3, r2
 810334c:	d009      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	4a58      	ldr	r2, [pc, #352]	; (81034b4 <HAL_DMA_Abort+0x47c>)
 8103354:	4293      	cmp	r3, r2
 8103356:	d004      	beq.n	8103362 <HAL_DMA_Abort+0x32a>
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	4a56      	ldr	r2, [pc, #344]	; (81034b8 <HAL_DMA_Abort+0x480>)
 810335e:	4293      	cmp	r3, r2
 8103360:	d108      	bne.n	8103374 <HAL_DMA_Abort+0x33c>
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	681a      	ldr	r2, [r3, #0]
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	f022 0201 	bic.w	r2, r2, #1
 8103370:	601a      	str	r2, [r3, #0]
 8103372:	e007      	b.n	8103384 <HAL_DMA_Abort+0x34c>
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	681a      	ldr	r2, [r3, #0]
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	f022 0201 	bic.w	r2, r2, #1
 8103382:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103384:	e013      	b.n	81033ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103386:	f7fe ff21 	bl	81021cc <HAL_GetTick>
 810338a:	4602      	mov	r2, r0
 810338c:	693b      	ldr	r3, [r7, #16]
 810338e:	1ad3      	subs	r3, r2, r3
 8103390:	2b05      	cmp	r3, #5
 8103392:	d90c      	bls.n	81033ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	2220      	movs	r2, #32
 8103398:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	2200      	movs	r2, #0
 810339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	2203      	movs	r2, #3
 81033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81033aa:	2301      	movs	r3, #1
 81033ac:	e12d      	b.n	810360a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81033ae:	697b      	ldr	r3, [r7, #20]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	f003 0301 	and.w	r3, r3, #1
 81033b6:	2b00      	cmp	r3, #0
 81033b8:	d1e5      	bne.n	8103386 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	4a2f      	ldr	r2, [pc, #188]	; (810347c <HAL_DMA_Abort+0x444>)
 81033c0:	4293      	cmp	r3, r2
 81033c2:	d04a      	beq.n	810345a <HAL_DMA_Abort+0x422>
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	4a2d      	ldr	r2, [pc, #180]	; (8103480 <HAL_DMA_Abort+0x448>)
 81033ca:	4293      	cmp	r3, r2
 81033cc:	d045      	beq.n	810345a <HAL_DMA_Abort+0x422>
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	4a2c      	ldr	r2, [pc, #176]	; (8103484 <HAL_DMA_Abort+0x44c>)
 81033d4:	4293      	cmp	r3, r2
 81033d6:	d040      	beq.n	810345a <HAL_DMA_Abort+0x422>
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	4a2a      	ldr	r2, [pc, #168]	; (8103488 <HAL_DMA_Abort+0x450>)
 81033de:	4293      	cmp	r3, r2
 81033e0:	d03b      	beq.n	810345a <HAL_DMA_Abort+0x422>
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	4a29      	ldr	r2, [pc, #164]	; (810348c <HAL_DMA_Abort+0x454>)
 81033e8:	4293      	cmp	r3, r2
 81033ea:	d036      	beq.n	810345a <HAL_DMA_Abort+0x422>
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	4a27      	ldr	r2, [pc, #156]	; (8103490 <HAL_DMA_Abort+0x458>)
 81033f2:	4293      	cmp	r3, r2
 81033f4:	d031      	beq.n	810345a <HAL_DMA_Abort+0x422>
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	4a26      	ldr	r2, [pc, #152]	; (8103494 <HAL_DMA_Abort+0x45c>)
 81033fc:	4293      	cmp	r3, r2
 81033fe:	d02c      	beq.n	810345a <HAL_DMA_Abort+0x422>
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4a24      	ldr	r2, [pc, #144]	; (8103498 <HAL_DMA_Abort+0x460>)
 8103406:	4293      	cmp	r3, r2
 8103408:	d027      	beq.n	810345a <HAL_DMA_Abort+0x422>
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	4a23      	ldr	r2, [pc, #140]	; (810349c <HAL_DMA_Abort+0x464>)
 8103410:	4293      	cmp	r3, r2
 8103412:	d022      	beq.n	810345a <HAL_DMA_Abort+0x422>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	4a21      	ldr	r2, [pc, #132]	; (81034a0 <HAL_DMA_Abort+0x468>)
 810341a:	4293      	cmp	r3, r2
 810341c:	d01d      	beq.n	810345a <HAL_DMA_Abort+0x422>
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	4a20      	ldr	r2, [pc, #128]	; (81034a4 <HAL_DMA_Abort+0x46c>)
 8103424:	4293      	cmp	r3, r2
 8103426:	d018      	beq.n	810345a <HAL_DMA_Abort+0x422>
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	4a1e      	ldr	r2, [pc, #120]	; (81034a8 <HAL_DMA_Abort+0x470>)
 810342e:	4293      	cmp	r3, r2
 8103430:	d013      	beq.n	810345a <HAL_DMA_Abort+0x422>
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a1d      	ldr	r2, [pc, #116]	; (81034ac <HAL_DMA_Abort+0x474>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d00e      	beq.n	810345a <HAL_DMA_Abort+0x422>
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	4a1b      	ldr	r2, [pc, #108]	; (81034b0 <HAL_DMA_Abort+0x478>)
 8103442:	4293      	cmp	r3, r2
 8103444:	d009      	beq.n	810345a <HAL_DMA_Abort+0x422>
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	4a1a      	ldr	r2, [pc, #104]	; (81034b4 <HAL_DMA_Abort+0x47c>)
 810344c:	4293      	cmp	r3, r2
 810344e:	d004      	beq.n	810345a <HAL_DMA_Abort+0x422>
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	4a18      	ldr	r2, [pc, #96]	; (81034b8 <HAL_DMA_Abort+0x480>)
 8103456:	4293      	cmp	r3, r2
 8103458:	d101      	bne.n	810345e <HAL_DMA_Abort+0x426>
 810345a:	2301      	movs	r3, #1
 810345c:	e000      	b.n	8103460 <HAL_DMA_Abort+0x428>
 810345e:	2300      	movs	r3, #0
 8103460:	2b00      	cmp	r3, #0
 8103462:	d02b      	beq.n	81034bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103468:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810346a:	687b      	ldr	r3, [r7, #4]
 810346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810346e:	f003 031f 	and.w	r3, r3, #31
 8103472:	223f      	movs	r2, #63	; 0x3f
 8103474:	409a      	lsls	r2, r3
 8103476:	68bb      	ldr	r3, [r7, #8]
 8103478:	609a      	str	r2, [r3, #8]
 810347a:	e02a      	b.n	81034d2 <HAL_DMA_Abort+0x49a>
 810347c:	40020010 	.word	0x40020010
 8103480:	40020028 	.word	0x40020028
 8103484:	40020040 	.word	0x40020040
 8103488:	40020058 	.word	0x40020058
 810348c:	40020070 	.word	0x40020070
 8103490:	40020088 	.word	0x40020088
 8103494:	400200a0 	.word	0x400200a0
 8103498:	400200b8 	.word	0x400200b8
 810349c:	40020410 	.word	0x40020410
 81034a0:	40020428 	.word	0x40020428
 81034a4:	40020440 	.word	0x40020440
 81034a8:	40020458 	.word	0x40020458
 81034ac:	40020470 	.word	0x40020470
 81034b0:	40020488 	.word	0x40020488
 81034b4:	400204a0 	.word	0x400204a0
 81034b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034c6:	f003 031f 	and.w	r3, r3, #31
 81034ca:	2201      	movs	r2, #1
 81034cc:	409a      	lsls	r2, r3
 81034ce:	68fb      	ldr	r3, [r7, #12]
 81034d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	4a4f      	ldr	r2, [pc, #316]	; (8103614 <HAL_DMA_Abort+0x5dc>)
 81034d8:	4293      	cmp	r3, r2
 81034da:	d072      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	681b      	ldr	r3, [r3, #0]
 81034e0:	4a4d      	ldr	r2, [pc, #308]	; (8103618 <HAL_DMA_Abort+0x5e0>)
 81034e2:	4293      	cmp	r3, r2
 81034e4:	d06d      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	4a4c      	ldr	r2, [pc, #304]	; (810361c <HAL_DMA_Abort+0x5e4>)
 81034ec:	4293      	cmp	r3, r2
 81034ee:	d068      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	4a4a      	ldr	r2, [pc, #296]	; (8103620 <HAL_DMA_Abort+0x5e8>)
 81034f6:	4293      	cmp	r3, r2
 81034f8:	d063      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	4a49      	ldr	r2, [pc, #292]	; (8103624 <HAL_DMA_Abort+0x5ec>)
 8103500:	4293      	cmp	r3, r2
 8103502:	d05e      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	4a47      	ldr	r2, [pc, #284]	; (8103628 <HAL_DMA_Abort+0x5f0>)
 810350a:	4293      	cmp	r3, r2
 810350c:	d059      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4a46      	ldr	r2, [pc, #280]	; (810362c <HAL_DMA_Abort+0x5f4>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d054      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	4a44      	ldr	r2, [pc, #272]	; (8103630 <HAL_DMA_Abort+0x5f8>)
 810351e:	4293      	cmp	r3, r2
 8103520:	d04f      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a43      	ldr	r2, [pc, #268]	; (8103634 <HAL_DMA_Abort+0x5fc>)
 8103528:	4293      	cmp	r3, r2
 810352a:	d04a      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	4a41      	ldr	r2, [pc, #260]	; (8103638 <HAL_DMA_Abort+0x600>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d045      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a40      	ldr	r2, [pc, #256]	; (810363c <HAL_DMA_Abort+0x604>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d040      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a3e      	ldr	r2, [pc, #248]	; (8103640 <HAL_DMA_Abort+0x608>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d03b      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a3d      	ldr	r2, [pc, #244]	; (8103644 <HAL_DMA_Abort+0x60c>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d036      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	4a3b      	ldr	r2, [pc, #236]	; (8103648 <HAL_DMA_Abort+0x610>)
 810355a:	4293      	cmp	r3, r2
 810355c:	d031      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	4a3a      	ldr	r2, [pc, #232]	; (810364c <HAL_DMA_Abort+0x614>)
 8103564:	4293      	cmp	r3, r2
 8103566:	d02c      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	4a38      	ldr	r2, [pc, #224]	; (8103650 <HAL_DMA_Abort+0x618>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d027      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a37      	ldr	r2, [pc, #220]	; (8103654 <HAL_DMA_Abort+0x61c>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d022      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a35      	ldr	r2, [pc, #212]	; (8103658 <HAL_DMA_Abort+0x620>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d01d      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a34      	ldr	r2, [pc, #208]	; (810365c <HAL_DMA_Abort+0x624>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d018      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a32      	ldr	r2, [pc, #200]	; (8103660 <HAL_DMA_Abort+0x628>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d013      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a31      	ldr	r2, [pc, #196]	; (8103664 <HAL_DMA_Abort+0x62c>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d00e      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	4a2f      	ldr	r2, [pc, #188]	; (8103668 <HAL_DMA_Abort+0x630>)
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d009      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	4a2e      	ldr	r2, [pc, #184]	; (810366c <HAL_DMA_Abort+0x634>)
 81035b4:	4293      	cmp	r3, r2
 81035b6:	d004      	beq.n	81035c2 <HAL_DMA_Abort+0x58a>
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	4a2c      	ldr	r2, [pc, #176]	; (8103670 <HAL_DMA_Abort+0x638>)
 81035be:	4293      	cmp	r3, r2
 81035c0:	d101      	bne.n	81035c6 <HAL_DMA_Abort+0x58e>
 81035c2:	2301      	movs	r3, #1
 81035c4:	e000      	b.n	81035c8 <HAL_DMA_Abort+0x590>
 81035c6:	2300      	movs	r3, #0
 81035c8:	2b00      	cmp	r3, #0
 81035ca:	d015      	beq.n	81035f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81035d0:	687a      	ldr	r2, [r7, #4]
 81035d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81035d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81035da:	2b00      	cmp	r3, #0
 81035dc:	d00c      	beq.n	81035f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81035e2:	681a      	ldr	r2, [r3, #0]
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81035e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81035ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035f2:	687a      	ldr	r2, [r7, #4]
 81035f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81035f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	2200      	movs	r2, #0
 81035fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	2201      	movs	r2, #1
 8103604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8103608:	2300      	movs	r3, #0
}
 810360a:	4618      	mov	r0, r3
 810360c:	3718      	adds	r7, #24
 810360e:	46bd      	mov	sp, r7
 8103610:	bd80      	pop	{r7, pc}
 8103612:	bf00      	nop
 8103614:	40020010 	.word	0x40020010
 8103618:	40020028 	.word	0x40020028
 810361c:	40020040 	.word	0x40020040
 8103620:	40020058 	.word	0x40020058
 8103624:	40020070 	.word	0x40020070
 8103628:	40020088 	.word	0x40020088
 810362c:	400200a0 	.word	0x400200a0
 8103630:	400200b8 	.word	0x400200b8
 8103634:	40020410 	.word	0x40020410
 8103638:	40020428 	.word	0x40020428
 810363c:	40020440 	.word	0x40020440
 8103640:	40020458 	.word	0x40020458
 8103644:	40020470 	.word	0x40020470
 8103648:	40020488 	.word	0x40020488
 810364c:	400204a0 	.word	0x400204a0
 8103650:	400204b8 	.word	0x400204b8
 8103654:	58025408 	.word	0x58025408
 8103658:	5802541c 	.word	0x5802541c
 810365c:	58025430 	.word	0x58025430
 8103660:	58025444 	.word	0x58025444
 8103664:	58025458 	.word	0x58025458
 8103668:	5802546c 	.word	0x5802546c
 810366c:	58025480 	.word	0x58025480
 8103670:	58025494 	.word	0x58025494

08103674 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103674:	b580      	push	{r7, lr}
 8103676:	b084      	sub	sp, #16
 8103678:	af00      	add	r7, sp, #0
 810367a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	2b00      	cmp	r3, #0
 8103680:	d101      	bne.n	8103686 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103682:	2301      	movs	r3, #1
 8103684:	e205      	b.n	8103a92 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810368c:	b2db      	uxtb	r3, r3
 810368e:	2b02      	cmp	r3, #2
 8103690:	d004      	beq.n	810369c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	2280      	movs	r2, #128	; 0x80
 8103696:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8103698:	2301      	movs	r3, #1
 810369a:	e1fa      	b.n	8103a92 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	681b      	ldr	r3, [r3, #0]
 81036a0:	4a8c      	ldr	r2, [pc, #560]	; (81038d4 <HAL_DMA_Abort_IT+0x260>)
 81036a2:	4293      	cmp	r3, r2
 81036a4:	d04a      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	4a8b      	ldr	r2, [pc, #556]	; (81038d8 <HAL_DMA_Abort_IT+0x264>)
 81036ac:	4293      	cmp	r3, r2
 81036ae:	d045      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	4a89      	ldr	r2, [pc, #548]	; (81038dc <HAL_DMA_Abort_IT+0x268>)
 81036b6:	4293      	cmp	r3, r2
 81036b8:	d040      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	681b      	ldr	r3, [r3, #0]
 81036be:	4a88      	ldr	r2, [pc, #544]	; (81038e0 <HAL_DMA_Abort_IT+0x26c>)
 81036c0:	4293      	cmp	r3, r2
 81036c2:	d03b      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	4a86      	ldr	r2, [pc, #536]	; (81038e4 <HAL_DMA_Abort_IT+0x270>)
 81036ca:	4293      	cmp	r3, r2
 81036cc:	d036      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	681b      	ldr	r3, [r3, #0]
 81036d2:	4a85      	ldr	r2, [pc, #532]	; (81038e8 <HAL_DMA_Abort_IT+0x274>)
 81036d4:	4293      	cmp	r3, r2
 81036d6:	d031      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	4a83      	ldr	r2, [pc, #524]	; (81038ec <HAL_DMA_Abort_IT+0x278>)
 81036de:	4293      	cmp	r3, r2
 81036e0:	d02c      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4a82      	ldr	r2, [pc, #520]	; (81038f0 <HAL_DMA_Abort_IT+0x27c>)
 81036e8:	4293      	cmp	r3, r2
 81036ea:	d027      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	681b      	ldr	r3, [r3, #0]
 81036f0:	4a80      	ldr	r2, [pc, #512]	; (81038f4 <HAL_DMA_Abort_IT+0x280>)
 81036f2:	4293      	cmp	r3, r2
 81036f4:	d022      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	4a7f      	ldr	r2, [pc, #508]	; (81038f8 <HAL_DMA_Abort_IT+0x284>)
 81036fc:	4293      	cmp	r3, r2
 81036fe:	d01d      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	4a7d      	ldr	r2, [pc, #500]	; (81038fc <HAL_DMA_Abort_IT+0x288>)
 8103706:	4293      	cmp	r3, r2
 8103708:	d018      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	681b      	ldr	r3, [r3, #0]
 810370e:	4a7c      	ldr	r2, [pc, #496]	; (8103900 <HAL_DMA_Abort_IT+0x28c>)
 8103710:	4293      	cmp	r3, r2
 8103712:	d013      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	681b      	ldr	r3, [r3, #0]
 8103718:	4a7a      	ldr	r2, [pc, #488]	; (8103904 <HAL_DMA_Abort_IT+0x290>)
 810371a:	4293      	cmp	r3, r2
 810371c:	d00e      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	4a79      	ldr	r2, [pc, #484]	; (8103908 <HAL_DMA_Abort_IT+0x294>)
 8103724:	4293      	cmp	r3, r2
 8103726:	d009      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	4a77      	ldr	r2, [pc, #476]	; (810390c <HAL_DMA_Abort_IT+0x298>)
 810372e:	4293      	cmp	r3, r2
 8103730:	d004      	beq.n	810373c <HAL_DMA_Abort_IT+0xc8>
 8103732:	687b      	ldr	r3, [r7, #4]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	4a76      	ldr	r2, [pc, #472]	; (8103910 <HAL_DMA_Abort_IT+0x29c>)
 8103738:	4293      	cmp	r3, r2
 810373a:	d101      	bne.n	8103740 <HAL_DMA_Abort_IT+0xcc>
 810373c:	2301      	movs	r3, #1
 810373e:	e000      	b.n	8103742 <HAL_DMA_Abort_IT+0xce>
 8103740:	2300      	movs	r3, #0
 8103742:	2b00      	cmp	r3, #0
 8103744:	d065      	beq.n	8103812 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	2204      	movs	r2, #4
 810374a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	681b      	ldr	r3, [r3, #0]
 8103752:	4a60      	ldr	r2, [pc, #384]	; (81038d4 <HAL_DMA_Abort_IT+0x260>)
 8103754:	4293      	cmp	r3, r2
 8103756:	d04a      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	681b      	ldr	r3, [r3, #0]
 810375c:	4a5e      	ldr	r2, [pc, #376]	; (81038d8 <HAL_DMA_Abort_IT+0x264>)
 810375e:	4293      	cmp	r3, r2
 8103760:	d045      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	4a5d      	ldr	r2, [pc, #372]	; (81038dc <HAL_DMA_Abort_IT+0x268>)
 8103768:	4293      	cmp	r3, r2
 810376a:	d040      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	4a5b      	ldr	r2, [pc, #364]	; (81038e0 <HAL_DMA_Abort_IT+0x26c>)
 8103772:	4293      	cmp	r3, r2
 8103774:	d03b      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	4a5a      	ldr	r2, [pc, #360]	; (81038e4 <HAL_DMA_Abort_IT+0x270>)
 810377c:	4293      	cmp	r3, r2
 810377e:	d036      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	4a58      	ldr	r2, [pc, #352]	; (81038e8 <HAL_DMA_Abort_IT+0x274>)
 8103786:	4293      	cmp	r3, r2
 8103788:	d031      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	4a57      	ldr	r2, [pc, #348]	; (81038ec <HAL_DMA_Abort_IT+0x278>)
 8103790:	4293      	cmp	r3, r2
 8103792:	d02c      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	681b      	ldr	r3, [r3, #0]
 8103798:	4a55      	ldr	r2, [pc, #340]	; (81038f0 <HAL_DMA_Abort_IT+0x27c>)
 810379a:	4293      	cmp	r3, r2
 810379c:	d027      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 810379e:	687b      	ldr	r3, [r7, #4]
 81037a0:	681b      	ldr	r3, [r3, #0]
 81037a2:	4a54      	ldr	r2, [pc, #336]	; (81038f4 <HAL_DMA_Abort_IT+0x280>)
 81037a4:	4293      	cmp	r3, r2
 81037a6:	d022      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	4a52      	ldr	r2, [pc, #328]	; (81038f8 <HAL_DMA_Abort_IT+0x284>)
 81037ae:	4293      	cmp	r3, r2
 81037b0:	d01d      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	681b      	ldr	r3, [r3, #0]
 81037b6:	4a51      	ldr	r2, [pc, #324]	; (81038fc <HAL_DMA_Abort_IT+0x288>)
 81037b8:	4293      	cmp	r3, r2
 81037ba:	d018      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	681b      	ldr	r3, [r3, #0]
 81037c0:	4a4f      	ldr	r2, [pc, #316]	; (8103900 <HAL_DMA_Abort_IT+0x28c>)
 81037c2:	4293      	cmp	r3, r2
 81037c4:	d013      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	4a4e      	ldr	r2, [pc, #312]	; (8103904 <HAL_DMA_Abort_IT+0x290>)
 81037cc:	4293      	cmp	r3, r2
 81037ce:	d00e      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	681b      	ldr	r3, [r3, #0]
 81037d4:	4a4c      	ldr	r2, [pc, #304]	; (8103908 <HAL_DMA_Abort_IT+0x294>)
 81037d6:	4293      	cmp	r3, r2
 81037d8:	d009      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	4a4b      	ldr	r2, [pc, #300]	; (810390c <HAL_DMA_Abort_IT+0x298>)
 81037e0:	4293      	cmp	r3, r2
 81037e2:	d004      	beq.n	81037ee <HAL_DMA_Abort_IT+0x17a>
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	4a49      	ldr	r2, [pc, #292]	; (8103910 <HAL_DMA_Abort_IT+0x29c>)
 81037ea:	4293      	cmp	r3, r2
 81037ec:	d108      	bne.n	8103800 <HAL_DMA_Abort_IT+0x18c>
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	681b      	ldr	r3, [r3, #0]
 81037f2:	681a      	ldr	r2, [r3, #0]
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	f022 0201 	bic.w	r2, r2, #1
 81037fc:	601a      	str	r2, [r3, #0]
 81037fe:	e147      	b.n	8103a90 <HAL_DMA_Abort_IT+0x41c>
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	681a      	ldr	r2, [r3, #0]
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	f022 0201 	bic.w	r2, r2, #1
 810380e:	601a      	str	r2, [r3, #0]
 8103810:	e13e      	b.n	8103a90 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	681a      	ldr	r2, [r3, #0]
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	f022 020e 	bic.w	r2, r2, #14
 8103820:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	4a2b      	ldr	r2, [pc, #172]	; (81038d4 <HAL_DMA_Abort_IT+0x260>)
 8103828:	4293      	cmp	r3, r2
 810382a:	d04a      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	4a29      	ldr	r2, [pc, #164]	; (81038d8 <HAL_DMA_Abort_IT+0x264>)
 8103832:	4293      	cmp	r3, r2
 8103834:	d045      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	4a28      	ldr	r2, [pc, #160]	; (81038dc <HAL_DMA_Abort_IT+0x268>)
 810383c:	4293      	cmp	r3, r2
 810383e:	d040      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	681b      	ldr	r3, [r3, #0]
 8103844:	4a26      	ldr	r2, [pc, #152]	; (81038e0 <HAL_DMA_Abort_IT+0x26c>)
 8103846:	4293      	cmp	r3, r2
 8103848:	d03b      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 810384a:	687b      	ldr	r3, [r7, #4]
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	4a25      	ldr	r2, [pc, #148]	; (81038e4 <HAL_DMA_Abort_IT+0x270>)
 8103850:	4293      	cmp	r3, r2
 8103852:	d036      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	4a23      	ldr	r2, [pc, #140]	; (81038e8 <HAL_DMA_Abort_IT+0x274>)
 810385a:	4293      	cmp	r3, r2
 810385c:	d031      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	681b      	ldr	r3, [r3, #0]
 8103862:	4a22      	ldr	r2, [pc, #136]	; (81038ec <HAL_DMA_Abort_IT+0x278>)
 8103864:	4293      	cmp	r3, r2
 8103866:	d02c      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	4a20      	ldr	r2, [pc, #128]	; (81038f0 <HAL_DMA_Abort_IT+0x27c>)
 810386e:	4293      	cmp	r3, r2
 8103870:	d027      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	4a1f      	ldr	r2, [pc, #124]	; (81038f4 <HAL_DMA_Abort_IT+0x280>)
 8103878:	4293      	cmp	r3, r2
 810387a:	d022      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	4a1d      	ldr	r2, [pc, #116]	; (81038f8 <HAL_DMA_Abort_IT+0x284>)
 8103882:	4293      	cmp	r3, r2
 8103884:	d01d      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	4a1c      	ldr	r2, [pc, #112]	; (81038fc <HAL_DMA_Abort_IT+0x288>)
 810388c:	4293      	cmp	r3, r2
 810388e:	d018      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	4a1a      	ldr	r2, [pc, #104]	; (8103900 <HAL_DMA_Abort_IT+0x28c>)
 8103896:	4293      	cmp	r3, r2
 8103898:	d013      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	4a19      	ldr	r2, [pc, #100]	; (8103904 <HAL_DMA_Abort_IT+0x290>)
 81038a0:	4293      	cmp	r3, r2
 81038a2:	d00e      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	681b      	ldr	r3, [r3, #0]
 81038a8:	4a17      	ldr	r2, [pc, #92]	; (8103908 <HAL_DMA_Abort_IT+0x294>)
 81038aa:	4293      	cmp	r3, r2
 81038ac:	d009      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	4a16      	ldr	r2, [pc, #88]	; (810390c <HAL_DMA_Abort_IT+0x298>)
 81038b4:	4293      	cmp	r3, r2
 81038b6:	d004      	beq.n	81038c2 <HAL_DMA_Abort_IT+0x24e>
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	4a14      	ldr	r2, [pc, #80]	; (8103910 <HAL_DMA_Abort_IT+0x29c>)
 81038be:	4293      	cmp	r3, r2
 81038c0:	d128      	bne.n	8103914 <HAL_DMA_Abort_IT+0x2a0>
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	681a      	ldr	r2, [r3, #0]
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	f022 0201 	bic.w	r2, r2, #1
 81038d0:	601a      	str	r2, [r3, #0]
 81038d2:	e027      	b.n	8103924 <HAL_DMA_Abort_IT+0x2b0>
 81038d4:	40020010 	.word	0x40020010
 81038d8:	40020028 	.word	0x40020028
 81038dc:	40020040 	.word	0x40020040
 81038e0:	40020058 	.word	0x40020058
 81038e4:	40020070 	.word	0x40020070
 81038e8:	40020088 	.word	0x40020088
 81038ec:	400200a0 	.word	0x400200a0
 81038f0:	400200b8 	.word	0x400200b8
 81038f4:	40020410 	.word	0x40020410
 81038f8:	40020428 	.word	0x40020428
 81038fc:	40020440 	.word	0x40020440
 8103900:	40020458 	.word	0x40020458
 8103904:	40020470 	.word	0x40020470
 8103908:	40020488 	.word	0x40020488
 810390c:	400204a0 	.word	0x400204a0
 8103910:	400204b8 	.word	0x400204b8
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	681a      	ldr	r2, [r3, #0]
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	f022 0201 	bic.w	r2, r2, #1
 8103922:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	4a5c      	ldr	r2, [pc, #368]	; (8103a9c <HAL_DMA_Abort_IT+0x428>)
 810392a:	4293      	cmp	r3, r2
 810392c:	d072      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	4a5b      	ldr	r2, [pc, #364]	; (8103aa0 <HAL_DMA_Abort_IT+0x42c>)
 8103934:	4293      	cmp	r3, r2
 8103936:	d06d      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	4a59      	ldr	r2, [pc, #356]	; (8103aa4 <HAL_DMA_Abort_IT+0x430>)
 810393e:	4293      	cmp	r3, r2
 8103940:	d068      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	4a58      	ldr	r2, [pc, #352]	; (8103aa8 <HAL_DMA_Abort_IT+0x434>)
 8103948:	4293      	cmp	r3, r2
 810394a:	d063      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	681b      	ldr	r3, [r3, #0]
 8103950:	4a56      	ldr	r2, [pc, #344]	; (8103aac <HAL_DMA_Abort_IT+0x438>)
 8103952:	4293      	cmp	r3, r2
 8103954:	d05e      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103956:	687b      	ldr	r3, [r7, #4]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	4a55      	ldr	r2, [pc, #340]	; (8103ab0 <HAL_DMA_Abort_IT+0x43c>)
 810395c:	4293      	cmp	r3, r2
 810395e:	d059      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	4a53      	ldr	r2, [pc, #332]	; (8103ab4 <HAL_DMA_Abort_IT+0x440>)
 8103966:	4293      	cmp	r3, r2
 8103968:	d054      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	4a52      	ldr	r2, [pc, #328]	; (8103ab8 <HAL_DMA_Abort_IT+0x444>)
 8103970:	4293      	cmp	r3, r2
 8103972:	d04f      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	681b      	ldr	r3, [r3, #0]
 8103978:	4a50      	ldr	r2, [pc, #320]	; (8103abc <HAL_DMA_Abort_IT+0x448>)
 810397a:	4293      	cmp	r3, r2
 810397c:	d04a      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	4a4f      	ldr	r2, [pc, #316]	; (8103ac0 <HAL_DMA_Abort_IT+0x44c>)
 8103984:	4293      	cmp	r3, r2
 8103986:	d045      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	681b      	ldr	r3, [r3, #0]
 810398c:	4a4d      	ldr	r2, [pc, #308]	; (8103ac4 <HAL_DMA_Abort_IT+0x450>)
 810398e:	4293      	cmp	r3, r2
 8103990:	d040      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	681b      	ldr	r3, [r3, #0]
 8103996:	4a4c      	ldr	r2, [pc, #304]	; (8103ac8 <HAL_DMA_Abort_IT+0x454>)
 8103998:	4293      	cmp	r3, r2
 810399a:	d03b      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	4a4a      	ldr	r2, [pc, #296]	; (8103acc <HAL_DMA_Abort_IT+0x458>)
 81039a2:	4293      	cmp	r3, r2
 81039a4:	d036      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	4a49      	ldr	r2, [pc, #292]	; (8103ad0 <HAL_DMA_Abort_IT+0x45c>)
 81039ac:	4293      	cmp	r3, r2
 81039ae:	d031      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	4a47      	ldr	r2, [pc, #284]	; (8103ad4 <HAL_DMA_Abort_IT+0x460>)
 81039b6:	4293      	cmp	r3, r2
 81039b8:	d02c      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	681b      	ldr	r3, [r3, #0]
 81039be:	4a46      	ldr	r2, [pc, #280]	; (8103ad8 <HAL_DMA_Abort_IT+0x464>)
 81039c0:	4293      	cmp	r3, r2
 81039c2:	d027      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	681b      	ldr	r3, [r3, #0]
 81039c8:	4a44      	ldr	r2, [pc, #272]	; (8103adc <HAL_DMA_Abort_IT+0x468>)
 81039ca:	4293      	cmp	r3, r2
 81039cc:	d022      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	681b      	ldr	r3, [r3, #0]
 81039d2:	4a43      	ldr	r2, [pc, #268]	; (8103ae0 <HAL_DMA_Abort_IT+0x46c>)
 81039d4:	4293      	cmp	r3, r2
 81039d6:	d01d      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	4a41      	ldr	r2, [pc, #260]	; (8103ae4 <HAL_DMA_Abort_IT+0x470>)
 81039de:	4293      	cmp	r3, r2
 81039e0:	d018      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	4a40      	ldr	r2, [pc, #256]	; (8103ae8 <HAL_DMA_Abort_IT+0x474>)
 81039e8:	4293      	cmp	r3, r2
 81039ea:	d013      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	4a3e      	ldr	r2, [pc, #248]	; (8103aec <HAL_DMA_Abort_IT+0x478>)
 81039f2:	4293      	cmp	r3, r2
 81039f4:	d00e      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	681b      	ldr	r3, [r3, #0]
 81039fa:	4a3d      	ldr	r2, [pc, #244]	; (8103af0 <HAL_DMA_Abort_IT+0x47c>)
 81039fc:	4293      	cmp	r3, r2
 81039fe:	d009      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	4a3b      	ldr	r2, [pc, #236]	; (8103af4 <HAL_DMA_Abort_IT+0x480>)
 8103a06:	4293      	cmp	r3, r2
 8103a08:	d004      	beq.n	8103a14 <HAL_DMA_Abort_IT+0x3a0>
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	4a3a      	ldr	r2, [pc, #232]	; (8103af8 <HAL_DMA_Abort_IT+0x484>)
 8103a10:	4293      	cmp	r3, r2
 8103a12:	d101      	bne.n	8103a18 <HAL_DMA_Abort_IT+0x3a4>
 8103a14:	2301      	movs	r3, #1
 8103a16:	e000      	b.n	8103a1a <HAL_DMA_Abort_IT+0x3a6>
 8103a18:	2300      	movs	r3, #0
 8103a1a:	2b00      	cmp	r3, #0
 8103a1c:	d028      	beq.n	8103a70 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103a22:	681a      	ldr	r2, [r3, #0]
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103a2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a38:	f003 031f 	and.w	r3, r3, #31
 8103a3c:	2201      	movs	r2, #1
 8103a3e:	409a      	lsls	r2, r3
 8103a40:	68fb      	ldr	r3, [r7, #12]
 8103a42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a48:	687a      	ldr	r2, [r7, #4]
 8103a4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103a4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103a52:	2b00      	cmp	r3, #0
 8103a54:	d00c      	beq.n	8103a70 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103a5a:	681a      	ldr	r2, [r3, #0]
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103a64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a6a:	687a      	ldr	r2, [r7, #4]
 8103a6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103a6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	2200      	movs	r2, #0
 8103a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	2201      	movs	r2, #1
 8103a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a84:	2b00      	cmp	r3, #0
 8103a86:	d003      	beq.n	8103a90 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a8c:	6878      	ldr	r0, [r7, #4]
 8103a8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103a90:	2300      	movs	r3, #0
}
 8103a92:	4618      	mov	r0, r3
 8103a94:	3710      	adds	r7, #16
 8103a96:	46bd      	mov	sp, r7
 8103a98:	bd80      	pop	{r7, pc}
 8103a9a:	bf00      	nop
 8103a9c:	40020010 	.word	0x40020010
 8103aa0:	40020028 	.word	0x40020028
 8103aa4:	40020040 	.word	0x40020040
 8103aa8:	40020058 	.word	0x40020058
 8103aac:	40020070 	.word	0x40020070
 8103ab0:	40020088 	.word	0x40020088
 8103ab4:	400200a0 	.word	0x400200a0
 8103ab8:	400200b8 	.word	0x400200b8
 8103abc:	40020410 	.word	0x40020410
 8103ac0:	40020428 	.word	0x40020428
 8103ac4:	40020440 	.word	0x40020440
 8103ac8:	40020458 	.word	0x40020458
 8103acc:	40020470 	.word	0x40020470
 8103ad0:	40020488 	.word	0x40020488
 8103ad4:	400204a0 	.word	0x400204a0
 8103ad8:	400204b8 	.word	0x400204b8
 8103adc:	58025408 	.word	0x58025408
 8103ae0:	5802541c 	.word	0x5802541c
 8103ae4:	58025430 	.word	0x58025430
 8103ae8:	58025444 	.word	0x58025444
 8103aec:	58025458 	.word	0x58025458
 8103af0:	5802546c 	.word	0x5802546c
 8103af4:	58025480 	.word	0x58025480
 8103af8:	58025494 	.word	0x58025494

08103afc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8103afc:	b580      	push	{r7, lr}
 8103afe:	b08a      	sub	sp, #40	; 0x28
 8103b00:	af00      	add	r7, sp, #0
 8103b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103b04:	2300      	movs	r3, #0
 8103b06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103b08:	4b67      	ldr	r3, [pc, #412]	; (8103ca8 <HAL_DMA_IRQHandler+0x1ac>)
 8103b0a:	681b      	ldr	r3, [r3, #0]
 8103b0c:	4a67      	ldr	r2, [pc, #412]	; (8103cac <HAL_DMA_IRQHandler+0x1b0>)
 8103b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8103b12:	0a9b      	lsrs	r3, r3, #10
 8103b14:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103b22:	6a3b      	ldr	r3, [r7, #32]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103b28:	69fb      	ldr	r3, [r7, #28]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a5f      	ldr	r2, [pc, #380]	; (8103cb0 <HAL_DMA_IRQHandler+0x1b4>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d04a      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	4a5d      	ldr	r2, [pc, #372]	; (8103cb4 <HAL_DMA_IRQHandler+0x1b8>)
 8103b3e:	4293      	cmp	r3, r2
 8103b40:	d045      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	4a5c      	ldr	r2, [pc, #368]	; (8103cb8 <HAL_DMA_IRQHandler+0x1bc>)
 8103b48:	4293      	cmp	r3, r2
 8103b4a:	d040      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	4a5a      	ldr	r2, [pc, #360]	; (8103cbc <HAL_DMA_IRQHandler+0x1c0>)
 8103b52:	4293      	cmp	r3, r2
 8103b54:	d03b      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	4a59      	ldr	r2, [pc, #356]	; (8103cc0 <HAL_DMA_IRQHandler+0x1c4>)
 8103b5c:	4293      	cmp	r3, r2
 8103b5e:	d036      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	4a57      	ldr	r2, [pc, #348]	; (8103cc4 <HAL_DMA_IRQHandler+0x1c8>)
 8103b66:	4293      	cmp	r3, r2
 8103b68:	d031      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	4a56      	ldr	r2, [pc, #344]	; (8103cc8 <HAL_DMA_IRQHandler+0x1cc>)
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d02c      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	4a54      	ldr	r2, [pc, #336]	; (8103ccc <HAL_DMA_IRQHandler+0x1d0>)
 8103b7a:	4293      	cmp	r3, r2
 8103b7c:	d027      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	4a53      	ldr	r2, [pc, #332]	; (8103cd0 <HAL_DMA_IRQHandler+0x1d4>)
 8103b84:	4293      	cmp	r3, r2
 8103b86:	d022      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	4a51      	ldr	r2, [pc, #324]	; (8103cd4 <HAL_DMA_IRQHandler+0x1d8>)
 8103b8e:	4293      	cmp	r3, r2
 8103b90:	d01d      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	4a50      	ldr	r2, [pc, #320]	; (8103cd8 <HAL_DMA_IRQHandler+0x1dc>)
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d018      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	4a4e      	ldr	r2, [pc, #312]	; (8103cdc <HAL_DMA_IRQHandler+0x1e0>)
 8103ba2:	4293      	cmp	r3, r2
 8103ba4:	d013      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4a4d      	ldr	r2, [pc, #308]	; (8103ce0 <HAL_DMA_IRQHandler+0x1e4>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d00e      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	4a4b      	ldr	r2, [pc, #300]	; (8103ce4 <HAL_DMA_IRQHandler+0x1e8>)
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d009      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	4a4a      	ldr	r2, [pc, #296]	; (8103ce8 <HAL_DMA_IRQHandler+0x1ec>)
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d004      	beq.n	8103bce <HAL_DMA_IRQHandler+0xd2>
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	4a48      	ldr	r2, [pc, #288]	; (8103cec <HAL_DMA_IRQHandler+0x1f0>)
 8103bca:	4293      	cmp	r3, r2
 8103bcc:	d101      	bne.n	8103bd2 <HAL_DMA_IRQHandler+0xd6>
 8103bce:	2301      	movs	r3, #1
 8103bd0:	e000      	b.n	8103bd4 <HAL_DMA_IRQHandler+0xd8>
 8103bd2:	2300      	movs	r3, #0
 8103bd4:	2b00      	cmp	r3, #0
 8103bd6:	f000 842b 	beq.w	8104430 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bde:	f003 031f 	and.w	r3, r3, #31
 8103be2:	2208      	movs	r2, #8
 8103be4:	409a      	lsls	r2, r3
 8103be6:	69bb      	ldr	r3, [r7, #24]
 8103be8:	4013      	ands	r3, r2
 8103bea:	2b00      	cmp	r3, #0
 8103bec:	f000 80a2 	beq.w	8103d34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	4a2e      	ldr	r2, [pc, #184]	; (8103cb0 <HAL_DMA_IRQHandler+0x1b4>)
 8103bf6:	4293      	cmp	r3, r2
 8103bf8:	d04a      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	4a2d      	ldr	r2, [pc, #180]	; (8103cb4 <HAL_DMA_IRQHandler+0x1b8>)
 8103c00:	4293      	cmp	r3, r2
 8103c02:	d045      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	4a2b      	ldr	r2, [pc, #172]	; (8103cb8 <HAL_DMA_IRQHandler+0x1bc>)
 8103c0a:	4293      	cmp	r3, r2
 8103c0c:	d040      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	4a2a      	ldr	r2, [pc, #168]	; (8103cbc <HAL_DMA_IRQHandler+0x1c0>)
 8103c14:	4293      	cmp	r3, r2
 8103c16:	d03b      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a28      	ldr	r2, [pc, #160]	; (8103cc0 <HAL_DMA_IRQHandler+0x1c4>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d036      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	4a27      	ldr	r2, [pc, #156]	; (8103cc4 <HAL_DMA_IRQHandler+0x1c8>)
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d031      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a25      	ldr	r2, [pc, #148]	; (8103cc8 <HAL_DMA_IRQHandler+0x1cc>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d02c      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a24      	ldr	r2, [pc, #144]	; (8103ccc <HAL_DMA_IRQHandler+0x1d0>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d027      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a22      	ldr	r2, [pc, #136]	; (8103cd0 <HAL_DMA_IRQHandler+0x1d4>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d022      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a21      	ldr	r2, [pc, #132]	; (8103cd4 <HAL_DMA_IRQHandler+0x1d8>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d01d      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a1f      	ldr	r2, [pc, #124]	; (8103cd8 <HAL_DMA_IRQHandler+0x1dc>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d018      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a1e      	ldr	r2, [pc, #120]	; (8103cdc <HAL_DMA_IRQHandler+0x1e0>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d013      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a1c      	ldr	r2, [pc, #112]	; (8103ce0 <HAL_DMA_IRQHandler+0x1e4>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d00e      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a1b      	ldr	r2, [pc, #108]	; (8103ce4 <HAL_DMA_IRQHandler+0x1e8>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d009      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a19      	ldr	r2, [pc, #100]	; (8103ce8 <HAL_DMA_IRQHandler+0x1ec>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d004      	beq.n	8103c90 <HAL_DMA_IRQHandler+0x194>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a18      	ldr	r2, [pc, #96]	; (8103cec <HAL_DMA_IRQHandler+0x1f0>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d12f      	bne.n	8103cf0 <HAL_DMA_IRQHandler+0x1f4>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	f003 0304 	and.w	r3, r3, #4
 8103c9a:	2b00      	cmp	r3, #0
 8103c9c:	bf14      	ite	ne
 8103c9e:	2301      	movne	r3, #1
 8103ca0:	2300      	moveq	r3, #0
 8103ca2:	b2db      	uxtb	r3, r3
 8103ca4:	e02e      	b.n	8103d04 <HAL_DMA_IRQHandler+0x208>
 8103ca6:	bf00      	nop
 8103ca8:	10000000 	.word	0x10000000
 8103cac:	1b4e81b5 	.word	0x1b4e81b5
 8103cb0:	40020010 	.word	0x40020010
 8103cb4:	40020028 	.word	0x40020028
 8103cb8:	40020040 	.word	0x40020040
 8103cbc:	40020058 	.word	0x40020058
 8103cc0:	40020070 	.word	0x40020070
 8103cc4:	40020088 	.word	0x40020088
 8103cc8:	400200a0 	.word	0x400200a0
 8103ccc:	400200b8 	.word	0x400200b8
 8103cd0:	40020410 	.word	0x40020410
 8103cd4:	40020428 	.word	0x40020428
 8103cd8:	40020440 	.word	0x40020440
 8103cdc:	40020458 	.word	0x40020458
 8103ce0:	40020470 	.word	0x40020470
 8103ce4:	40020488 	.word	0x40020488
 8103ce8:	400204a0 	.word	0x400204a0
 8103cec:	400204b8 	.word	0x400204b8
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	681b      	ldr	r3, [r3, #0]
 8103cf6:	f003 0308 	and.w	r3, r3, #8
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	bf14      	ite	ne
 8103cfe:	2301      	movne	r3, #1
 8103d00:	2300      	moveq	r3, #0
 8103d02:	b2db      	uxtb	r3, r3
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	d015      	beq.n	8103d34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	681a      	ldr	r2, [r3, #0]
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	f022 0204 	bic.w	r2, r2, #4
 8103d16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d1c:	f003 031f 	and.w	r3, r3, #31
 8103d20:	2208      	movs	r2, #8
 8103d22:	409a      	lsls	r2, r3
 8103d24:	6a3b      	ldr	r3, [r7, #32]
 8103d26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d2c:	f043 0201 	orr.w	r2, r3, #1
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d38:	f003 031f 	and.w	r3, r3, #31
 8103d3c:	69ba      	ldr	r2, [r7, #24]
 8103d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8103d42:	f003 0301 	and.w	r3, r3, #1
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	d06e      	beq.n	8103e28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	681b      	ldr	r3, [r3, #0]
 8103d4e:	4a69      	ldr	r2, [pc, #420]	; (8103ef4 <HAL_DMA_IRQHandler+0x3f8>)
 8103d50:	4293      	cmp	r3, r2
 8103d52:	d04a      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	681b      	ldr	r3, [r3, #0]
 8103d58:	4a67      	ldr	r2, [pc, #412]	; (8103ef8 <HAL_DMA_IRQHandler+0x3fc>)
 8103d5a:	4293      	cmp	r3, r2
 8103d5c:	d045      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	681b      	ldr	r3, [r3, #0]
 8103d62:	4a66      	ldr	r2, [pc, #408]	; (8103efc <HAL_DMA_IRQHandler+0x400>)
 8103d64:	4293      	cmp	r3, r2
 8103d66:	d040      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	681b      	ldr	r3, [r3, #0]
 8103d6c:	4a64      	ldr	r2, [pc, #400]	; (8103f00 <HAL_DMA_IRQHandler+0x404>)
 8103d6e:	4293      	cmp	r3, r2
 8103d70:	d03b      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	681b      	ldr	r3, [r3, #0]
 8103d76:	4a63      	ldr	r2, [pc, #396]	; (8103f04 <HAL_DMA_IRQHandler+0x408>)
 8103d78:	4293      	cmp	r3, r2
 8103d7a:	d036      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	681b      	ldr	r3, [r3, #0]
 8103d80:	4a61      	ldr	r2, [pc, #388]	; (8103f08 <HAL_DMA_IRQHandler+0x40c>)
 8103d82:	4293      	cmp	r3, r2
 8103d84:	d031      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	4a60      	ldr	r2, [pc, #384]	; (8103f0c <HAL_DMA_IRQHandler+0x410>)
 8103d8c:	4293      	cmp	r3, r2
 8103d8e:	d02c      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	4a5e      	ldr	r2, [pc, #376]	; (8103f10 <HAL_DMA_IRQHandler+0x414>)
 8103d96:	4293      	cmp	r3, r2
 8103d98:	d027      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	4a5d      	ldr	r2, [pc, #372]	; (8103f14 <HAL_DMA_IRQHandler+0x418>)
 8103da0:	4293      	cmp	r3, r2
 8103da2:	d022      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	681b      	ldr	r3, [r3, #0]
 8103da8:	4a5b      	ldr	r2, [pc, #364]	; (8103f18 <HAL_DMA_IRQHandler+0x41c>)
 8103daa:	4293      	cmp	r3, r2
 8103dac:	d01d      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	4a5a      	ldr	r2, [pc, #360]	; (8103f1c <HAL_DMA_IRQHandler+0x420>)
 8103db4:	4293      	cmp	r3, r2
 8103db6:	d018      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	4a58      	ldr	r2, [pc, #352]	; (8103f20 <HAL_DMA_IRQHandler+0x424>)
 8103dbe:	4293      	cmp	r3, r2
 8103dc0:	d013      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	4a57      	ldr	r2, [pc, #348]	; (8103f24 <HAL_DMA_IRQHandler+0x428>)
 8103dc8:	4293      	cmp	r3, r2
 8103dca:	d00e      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	4a55      	ldr	r2, [pc, #340]	; (8103f28 <HAL_DMA_IRQHandler+0x42c>)
 8103dd2:	4293      	cmp	r3, r2
 8103dd4:	d009      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	4a54      	ldr	r2, [pc, #336]	; (8103f2c <HAL_DMA_IRQHandler+0x430>)
 8103ddc:	4293      	cmp	r3, r2
 8103dde:	d004      	beq.n	8103dea <HAL_DMA_IRQHandler+0x2ee>
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	4a52      	ldr	r2, [pc, #328]	; (8103f30 <HAL_DMA_IRQHandler+0x434>)
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d10a      	bne.n	8103e00 <HAL_DMA_IRQHandler+0x304>
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	695b      	ldr	r3, [r3, #20]
 8103df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	bf14      	ite	ne
 8103df8:	2301      	movne	r3, #1
 8103dfa:	2300      	moveq	r3, #0
 8103dfc:	b2db      	uxtb	r3, r3
 8103dfe:	e003      	b.n	8103e08 <HAL_DMA_IRQHandler+0x30c>
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	2300      	movs	r3, #0
 8103e08:	2b00      	cmp	r3, #0
 8103e0a:	d00d      	beq.n	8103e28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e10:	f003 031f 	and.w	r3, r3, #31
 8103e14:	2201      	movs	r2, #1
 8103e16:	409a      	lsls	r2, r3
 8103e18:	6a3b      	ldr	r3, [r7, #32]
 8103e1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e20:	f043 0202 	orr.w	r2, r3, #2
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e2c:	f003 031f 	and.w	r3, r3, #31
 8103e30:	2204      	movs	r2, #4
 8103e32:	409a      	lsls	r2, r3
 8103e34:	69bb      	ldr	r3, [r7, #24]
 8103e36:	4013      	ands	r3, r2
 8103e38:	2b00      	cmp	r3, #0
 8103e3a:	f000 808f 	beq.w	8103f5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	681b      	ldr	r3, [r3, #0]
 8103e42:	4a2c      	ldr	r2, [pc, #176]	; (8103ef4 <HAL_DMA_IRQHandler+0x3f8>)
 8103e44:	4293      	cmp	r3, r2
 8103e46:	d04a      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	681b      	ldr	r3, [r3, #0]
 8103e4c:	4a2a      	ldr	r2, [pc, #168]	; (8103ef8 <HAL_DMA_IRQHandler+0x3fc>)
 8103e4e:	4293      	cmp	r3, r2
 8103e50:	d045      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	681b      	ldr	r3, [r3, #0]
 8103e56:	4a29      	ldr	r2, [pc, #164]	; (8103efc <HAL_DMA_IRQHandler+0x400>)
 8103e58:	4293      	cmp	r3, r2
 8103e5a:	d040      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	681b      	ldr	r3, [r3, #0]
 8103e60:	4a27      	ldr	r2, [pc, #156]	; (8103f00 <HAL_DMA_IRQHandler+0x404>)
 8103e62:	4293      	cmp	r3, r2
 8103e64:	d03b      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	4a26      	ldr	r2, [pc, #152]	; (8103f04 <HAL_DMA_IRQHandler+0x408>)
 8103e6c:	4293      	cmp	r3, r2
 8103e6e:	d036      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	4a24      	ldr	r2, [pc, #144]	; (8103f08 <HAL_DMA_IRQHandler+0x40c>)
 8103e76:	4293      	cmp	r3, r2
 8103e78:	d031      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	4a23      	ldr	r2, [pc, #140]	; (8103f0c <HAL_DMA_IRQHandler+0x410>)
 8103e80:	4293      	cmp	r3, r2
 8103e82:	d02c      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	681b      	ldr	r3, [r3, #0]
 8103e88:	4a21      	ldr	r2, [pc, #132]	; (8103f10 <HAL_DMA_IRQHandler+0x414>)
 8103e8a:	4293      	cmp	r3, r2
 8103e8c:	d027      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	4a20      	ldr	r2, [pc, #128]	; (8103f14 <HAL_DMA_IRQHandler+0x418>)
 8103e94:	4293      	cmp	r3, r2
 8103e96:	d022      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103e98:	687b      	ldr	r3, [r7, #4]
 8103e9a:	681b      	ldr	r3, [r3, #0]
 8103e9c:	4a1e      	ldr	r2, [pc, #120]	; (8103f18 <HAL_DMA_IRQHandler+0x41c>)
 8103e9e:	4293      	cmp	r3, r2
 8103ea0:	d01d      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	681b      	ldr	r3, [r3, #0]
 8103ea6:	4a1d      	ldr	r2, [pc, #116]	; (8103f1c <HAL_DMA_IRQHandler+0x420>)
 8103ea8:	4293      	cmp	r3, r2
 8103eaa:	d018      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	4a1b      	ldr	r2, [pc, #108]	; (8103f20 <HAL_DMA_IRQHandler+0x424>)
 8103eb2:	4293      	cmp	r3, r2
 8103eb4:	d013      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	681b      	ldr	r3, [r3, #0]
 8103eba:	4a1a      	ldr	r2, [pc, #104]	; (8103f24 <HAL_DMA_IRQHandler+0x428>)
 8103ebc:	4293      	cmp	r3, r2
 8103ebe:	d00e      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	4a18      	ldr	r2, [pc, #96]	; (8103f28 <HAL_DMA_IRQHandler+0x42c>)
 8103ec6:	4293      	cmp	r3, r2
 8103ec8:	d009      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	4a17      	ldr	r2, [pc, #92]	; (8103f2c <HAL_DMA_IRQHandler+0x430>)
 8103ed0:	4293      	cmp	r3, r2
 8103ed2:	d004      	beq.n	8103ede <HAL_DMA_IRQHandler+0x3e2>
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	681b      	ldr	r3, [r3, #0]
 8103ed8:	4a15      	ldr	r2, [pc, #84]	; (8103f30 <HAL_DMA_IRQHandler+0x434>)
 8103eda:	4293      	cmp	r3, r2
 8103edc:	d12a      	bne.n	8103f34 <HAL_DMA_IRQHandler+0x438>
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	f003 0302 	and.w	r3, r3, #2
 8103ee8:	2b00      	cmp	r3, #0
 8103eea:	bf14      	ite	ne
 8103eec:	2301      	movne	r3, #1
 8103eee:	2300      	moveq	r3, #0
 8103ef0:	b2db      	uxtb	r3, r3
 8103ef2:	e023      	b.n	8103f3c <HAL_DMA_IRQHandler+0x440>
 8103ef4:	40020010 	.word	0x40020010
 8103ef8:	40020028 	.word	0x40020028
 8103efc:	40020040 	.word	0x40020040
 8103f00:	40020058 	.word	0x40020058
 8103f04:	40020070 	.word	0x40020070
 8103f08:	40020088 	.word	0x40020088
 8103f0c:	400200a0 	.word	0x400200a0
 8103f10:	400200b8 	.word	0x400200b8
 8103f14:	40020410 	.word	0x40020410
 8103f18:	40020428 	.word	0x40020428
 8103f1c:	40020440 	.word	0x40020440
 8103f20:	40020458 	.word	0x40020458
 8103f24:	40020470 	.word	0x40020470
 8103f28:	40020488 	.word	0x40020488
 8103f2c:	400204a0 	.word	0x400204a0
 8103f30:	400204b8 	.word	0x400204b8
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	2300      	movs	r3, #0
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	d00d      	beq.n	8103f5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f44:	f003 031f 	and.w	r3, r3, #31
 8103f48:	2204      	movs	r2, #4
 8103f4a:	409a      	lsls	r2, r3
 8103f4c:	6a3b      	ldr	r3, [r7, #32]
 8103f4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f54:	f043 0204 	orr.w	r2, r3, #4
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f60:	f003 031f 	and.w	r3, r3, #31
 8103f64:	2210      	movs	r2, #16
 8103f66:	409a      	lsls	r2, r3
 8103f68:	69bb      	ldr	r3, [r7, #24]
 8103f6a:	4013      	ands	r3, r2
 8103f6c:	2b00      	cmp	r3, #0
 8103f6e:	f000 80a6 	beq.w	81040be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	4a85      	ldr	r2, [pc, #532]	; (810418c <HAL_DMA_IRQHandler+0x690>)
 8103f78:	4293      	cmp	r3, r2
 8103f7a:	d04a      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	4a83      	ldr	r2, [pc, #524]	; (8104190 <HAL_DMA_IRQHandler+0x694>)
 8103f82:	4293      	cmp	r3, r2
 8103f84:	d045      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	4a82      	ldr	r2, [pc, #520]	; (8104194 <HAL_DMA_IRQHandler+0x698>)
 8103f8c:	4293      	cmp	r3, r2
 8103f8e:	d040      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	4a80      	ldr	r2, [pc, #512]	; (8104198 <HAL_DMA_IRQHandler+0x69c>)
 8103f96:	4293      	cmp	r3, r2
 8103f98:	d03b      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	4a7f      	ldr	r2, [pc, #508]	; (810419c <HAL_DMA_IRQHandler+0x6a0>)
 8103fa0:	4293      	cmp	r3, r2
 8103fa2:	d036      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	4a7d      	ldr	r2, [pc, #500]	; (81041a0 <HAL_DMA_IRQHandler+0x6a4>)
 8103faa:	4293      	cmp	r3, r2
 8103fac:	d031      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	4a7c      	ldr	r2, [pc, #496]	; (81041a4 <HAL_DMA_IRQHandler+0x6a8>)
 8103fb4:	4293      	cmp	r3, r2
 8103fb6:	d02c      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	4a7a      	ldr	r2, [pc, #488]	; (81041a8 <HAL_DMA_IRQHandler+0x6ac>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d027      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	4a79      	ldr	r2, [pc, #484]	; (81041ac <HAL_DMA_IRQHandler+0x6b0>)
 8103fc8:	4293      	cmp	r3, r2
 8103fca:	d022      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	4a77      	ldr	r2, [pc, #476]	; (81041b0 <HAL_DMA_IRQHandler+0x6b4>)
 8103fd2:	4293      	cmp	r3, r2
 8103fd4:	d01d      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	4a76      	ldr	r2, [pc, #472]	; (81041b4 <HAL_DMA_IRQHandler+0x6b8>)
 8103fdc:	4293      	cmp	r3, r2
 8103fde:	d018      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	4a74      	ldr	r2, [pc, #464]	; (81041b8 <HAL_DMA_IRQHandler+0x6bc>)
 8103fe6:	4293      	cmp	r3, r2
 8103fe8:	d013      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	4a73      	ldr	r2, [pc, #460]	; (81041bc <HAL_DMA_IRQHandler+0x6c0>)
 8103ff0:	4293      	cmp	r3, r2
 8103ff2:	d00e      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	4a71      	ldr	r2, [pc, #452]	; (81041c0 <HAL_DMA_IRQHandler+0x6c4>)
 8103ffa:	4293      	cmp	r3, r2
 8103ffc:	d009      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8103ffe:	687b      	ldr	r3, [r7, #4]
 8104000:	681b      	ldr	r3, [r3, #0]
 8104002:	4a70      	ldr	r2, [pc, #448]	; (81041c4 <HAL_DMA_IRQHandler+0x6c8>)
 8104004:	4293      	cmp	r3, r2
 8104006:	d004      	beq.n	8104012 <HAL_DMA_IRQHandler+0x516>
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	4a6e      	ldr	r2, [pc, #440]	; (81041c8 <HAL_DMA_IRQHandler+0x6cc>)
 810400e:	4293      	cmp	r3, r2
 8104010:	d10a      	bne.n	8104028 <HAL_DMA_IRQHandler+0x52c>
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	681b      	ldr	r3, [r3, #0]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	f003 0308 	and.w	r3, r3, #8
 810401c:	2b00      	cmp	r3, #0
 810401e:	bf14      	ite	ne
 8104020:	2301      	movne	r3, #1
 8104022:	2300      	moveq	r3, #0
 8104024:	b2db      	uxtb	r3, r3
 8104026:	e009      	b.n	810403c <HAL_DMA_IRQHandler+0x540>
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	f003 0304 	and.w	r3, r3, #4
 8104032:	2b00      	cmp	r3, #0
 8104034:	bf14      	ite	ne
 8104036:	2301      	movne	r3, #1
 8104038:	2300      	moveq	r3, #0
 810403a:	b2db      	uxtb	r3, r3
 810403c:	2b00      	cmp	r3, #0
 810403e:	d03e      	beq.n	81040be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104044:	f003 031f 	and.w	r3, r3, #31
 8104048:	2210      	movs	r2, #16
 810404a:	409a      	lsls	r2, r3
 810404c:	6a3b      	ldr	r3, [r7, #32]
 810404e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810405a:	2b00      	cmp	r3, #0
 810405c:	d018      	beq.n	8104090 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	681b      	ldr	r3, [r3, #0]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104068:	2b00      	cmp	r3, #0
 810406a:	d108      	bne.n	810407e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104070:	2b00      	cmp	r3, #0
 8104072:	d024      	beq.n	81040be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104078:	6878      	ldr	r0, [r7, #4]
 810407a:	4798      	blx	r3
 810407c:	e01f      	b.n	81040be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104082:	2b00      	cmp	r3, #0
 8104084:	d01b      	beq.n	81040be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810408a:	6878      	ldr	r0, [r7, #4]
 810408c:	4798      	blx	r3
 810408e:	e016      	b.n	81040be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810409a:	2b00      	cmp	r3, #0
 810409c:	d107      	bne.n	81040ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	681a      	ldr	r2, [r3, #0]
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	f022 0208 	bic.w	r2, r2, #8
 81040ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	d003      	beq.n	81040be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81040ba:	6878      	ldr	r0, [r7, #4]
 81040bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040c2:	f003 031f 	and.w	r3, r3, #31
 81040c6:	2220      	movs	r2, #32
 81040c8:	409a      	lsls	r2, r3
 81040ca:	69bb      	ldr	r3, [r7, #24]
 81040cc:	4013      	ands	r3, r2
 81040ce:	2b00      	cmp	r3, #0
 81040d0:	f000 8110 	beq.w	81042f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	4a2c      	ldr	r2, [pc, #176]	; (810418c <HAL_DMA_IRQHandler+0x690>)
 81040da:	4293      	cmp	r3, r2
 81040dc:	d04a      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	4a2b      	ldr	r2, [pc, #172]	; (8104190 <HAL_DMA_IRQHandler+0x694>)
 81040e4:	4293      	cmp	r3, r2
 81040e6:	d045      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	4a29      	ldr	r2, [pc, #164]	; (8104194 <HAL_DMA_IRQHandler+0x698>)
 81040ee:	4293      	cmp	r3, r2
 81040f0:	d040      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	4a28      	ldr	r2, [pc, #160]	; (8104198 <HAL_DMA_IRQHandler+0x69c>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d03b      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	4a26      	ldr	r2, [pc, #152]	; (810419c <HAL_DMA_IRQHandler+0x6a0>)
 8104102:	4293      	cmp	r3, r2
 8104104:	d036      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	681b      	ldr	r3, [r3, #0]
 810410a:	4a25      	ldr	r2, [pc, #148]	; (81041a0 <HAL_DMA_IRQHandler+0x6a4>)
 810410c:	4293      	cmp	r3, r2
 810410e:	d031      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	4a23      	ldr	r2, [pc, #140]	; (81041a4 <HAL_DMA_IRQHandler+0x6a8>)
 8104116:	4293      	cmp	r3, r2
 8104118:	d02c      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	681b      	ldr	r3, [r3, #0]
 810411e:	4a22      	ldr	r2, [pc, #136]	; (81041a8 <HAL_DMA_IRQHandler+0x6ac>)
 8104120:	4293      	cmp	r3, r2
 8104122:	d027      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	4a20      	ldr	r2, [pc, #128]	; (81041ac <HAL_DMA_IRQHandler+0x6b0>)
 810412a:	4293      	cmp	r3, r2
 810412c:	d022      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	4a1f      	ldr	r2, [pc, #124]	; (81041b0 <HAL_DMA_IRQHandler+0x6b4>)
 8104134:	4293      	cmp	r3, r2
 8104136:	d01d      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	4a1d      	ldr	r2, [pc, #116]	; (81041b4 <HAL_DMA_IRQHandler+0x6b8>)
 810413e:	4293      	cmp	r3, r2
 8104140:	d018      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	4a1c      	ldr	r2, [pc, #112]	; (81041b8 <HAL_DMA_IRQHandler+0x6bc>)
 8104148:	4293      	cmp	r3, r2
 810414a:	d013      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	4a1a      	ldr	r2, [pc, #104]	; (81041bc <HAL_DMA_IRQHandler+0x6c0>)
 8104152:	4293      	cmp	r3, r2
 8104154:	d00e      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	4a19      	ldr	r2, [pc, #100]	; (81041c0 <HAL_DMA_IRQHandler+0x6c4>)
 810415c:	4293      	cmp	r3, r2
 810415e:	d009      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	4a17      	ldr	r2, [pc, #92]	; (81041c4 <HAL_DMA_IRQHandler+0x6c8>)
 8104166:	4293      	cmp	r3, r2
 8104168:	d004      	beq.n	8104174 <HAL_DMA_IRQHandler+0x678>
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	681b      	ldr	r3, [r3, #0]
 810416e:	4a16      	ldr	r2, [pc, #88]	; (81041c8 <HAL_DMA_IRQHandler+0x6cc>)
 8104170:	4293      	cmp	r3, r2
 8104172:	d12b      	bne.n	81041cc <HAL_DMA_IRQHandler+0x6d0>
 8104174:	687b      	ldr	r3, [r7, #4]
 8104176:	681b      	ldr	r3, [r3, #0]
 8104178:	681b      	ldr	r3, [r3, #0]
 810417a:	f003 0310 	and.w	r3, r3, #16
 810417e:	2b00      	cmp	r3, #0
 8104180:	bf14      	ite	ne
 8104182:	2301      	movne	r3, #1
 8104184:	2300      	moveq	r3, #0
 8104186:	b2db      	uxtb	r3, r3
 8104188:	e02a      	b.n	81041e0 <HAL_DMA_IRQHandler+0x6e4>
 810418a:	bf00      	nop
 810418c:	40020010 	.word	0x40020010
 8104190:	40020028 	.word	0x40020028
 8104194:	40020040 	.word	0x40020040
 8104198:	40020058 	.word	0x40020058
 810419c:	40020070 	.word	0x40020070
 81041a0:	40020088 	.word	0x40020088
 81041a4:	400200a0 	.word	0x400200a0
 81041a8:	400200b8 	.word	0x400200b8
 81041ac:	40020410 	.word	0x40020410
 81041b0:	40020428 	.word	0x40020428
 81041b4:	40020440 	.word	0x40020440
 81041b8:	40020458 	.word	0x40020458
 81041bc:	40020470 	.word	0x40020470
 81041c0:	40020488 	.word	0x40020488
 81041c4:	400204a0 	.word	0x400204a0
 81041c8:	400204b8 	.word	0x400204b8
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	f003 0302 	and.w	r3, r3, #2
 81041d6:	2b00      	cmp	r3, #0
 81041d8:	bf14      	ite	ne
 81041da:	2301      	movne	r3, #1
 81041dc:	2300      	moveq	r3, #0
 81041de:	b2db      	uxtb	r3, r3
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	f000 8087 	beq.w	81042f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041ea:	f003 031f 	and.w	r3, r3, #31
 81041ee:	2220      	movs	r2, #32
 81041f0:	409a      	lsls	r2, r3
 81041f2:	6a3b      	ldr	r3, [r7, #32]
 81041f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81041fc:	b2db      	uxtb	r3, r3
 81041fe:	2b04      	cmp	r3, #4
 8104200:	d139      	bne.n	8104276 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104202:	687b      	ldr	r3, [r7, #4]
 8104204:	681b      	ldr	r3, [r3, #0]
 8104206:	681a      	ldr	r2, [r3, #0]
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	f022 0216 	bic.w	r2, r2, #22
 8104210:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	695a      	ldr	r2, [r3, #20]
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104220:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104226:	2b00      	cmp	r3, #0
 8104228:	d103      	bne.n	8104232 <HAL_DMA_IRQHandler+0x736>
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810422e:	2b00      	cmp	r3, #0
 8104230:	d007      	beq.n	8104242 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104232:	687b      	ldr	r3, [r7, #4]
 8104234:	681b      	ldr	r3, [r3, #0]
 8104236:	681a      	ldr	r2, [r3, #0]
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	681b      	ldr	r3, [r3, #0]
 810423c:	f022 0208 	bic.w	r2, r2, #8
 8104240:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104246:	f003 031f 	and.w	r3, r3, #31
 810424a:	223f      	movs	r2, #63	; 0x3f
 810424c:	409a      	lsls	r2, r3
 810424e:	6a3b      	ldr	r3, [r7, #32]
 8104250:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	2200      	movs	r2, #0
 8104256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	2201      	movs	r2, #1
 810425e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8104262:	687b      	ldr	r3, [r7, #4]
 8104264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104266:	2b00      	cmp	r3, #0
 8104268:	f000 834a 	beq.w	8104900 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104270:	6878      	ldr	r0, [r7, #4]
 8104272:	4798      	blx	r3
          }
          return;
 8104274:	e344      	b.n	8104900 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	681b      	ldr	r3, [r3, #0]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104280:	2b00      	cmp	r3, #0
 8104282:	d018      	beq.n	81042b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810428e:	2b00      	cmp	r3, #0
 8104290:	d108      	bne.n	81042a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104296:	2b00      	cmp	r3, #0
 8104298:	d02c      	beq.n	81042f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810429e:	6878      	ldr	r0, [r7, #4]
 81042a0:	4798      	blx	r3
 81042a2:	e027      	b.n	81042f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81042a8:	2b00      	cmp	r3, #0
 81042aa:	d023      	beq.n	81042f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81042b0:	6878      	ldr	r0, [r7, #4]
 81042b2:	4798      	blx	r3
 81042b4:	e01e      	b.n	81042f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81042c0:	2b00      	cmp	r3, #0
 81042c2:	d10f      	bne.n	81042e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	681a      	ldr	r2, [r3, #0]
 81042ca:	687b      	ldr	r3, [r7, #4]
 81042cc:	681b      	ldr	r3, [r3, #0]
 81042ce:	f022 0210 	bic.w	r2, r2, #16
 81042d2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	2200      	movs	r2, #0
 81042d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	2201      	movs	r2, #1
 81042e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 81042e4:	687b      	ldr	r3, [r7, #4]
 81042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81042e8:	2b00      	cmp	r3, #0
 81042ea:	d003      	beq.n	81042f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81042f0:	6878      	ldr	r0, [r7, #4]
 81042f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042f8:	2b00      	cmp	r3, #0
 81042fa:	f000 8306 	beq.w	810490a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104302:	f003 0301 	and.w	r3, r3, #1
 8104306:	2b00      	cmp	r3, #0
 8104308:	f000 8088 	beq.w	810441c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	2204      	movs	r2, #4
 8104310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	4a7a      	ldr	r2, [pc, #488]	; (8104504 <HAL_DMA_IRQHandler+0xa08>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d04a      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	4a79      	ldr	r2, [pc, #484]	; (8104508 <HAL_DMA_IRQHandler+0xa0c>)
 8104324:	4293      	cmp	r3, r2
 8104326:	d045      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	4a77      	ldr	r2, [pc, #476]	; (810450c <HAL_DMA_IRQHandler+0xa10>)
 810432e:	4293      	cmp	r3, r2
 8104330:	d040      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	4a76      	ldr	r2, [pc, #472]	; (8104510 <HAL_DMA_IRQHandler+0xa14>)
 8104338:	4293      	cmp	r3, r2
 810433a:	d03b      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	4a74      	ldr	r2, [pc, #464]	; (8104514 <HAL_DMA_IRQHandler+0xa18>)
 8104342:	4293      	cmp	r3, r2
 8104344:	d036      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	4a73      	ldr	r2, [pc, #460]	; (8104518 <HAL_DMA_IRQHandler+0xa1c>)
 810434c:	4293      	cmp	r3, r2
 810434e:	d031      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	4a71      	ldr	r2, [pc, #452]	; (810451c <HAL_DMA_IRQHandler+0xa20>)
 8104356:	4293      	cmp	r3, r2
 8104358:	d02c      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	4a70      	ldr	r2, [pc, #448]	; (8104520 <HAL_DMA_IRQHandler+0xa24>)
 8104360:	4293      	cmp	r3, r2
 8104362:	d027      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	4a6e      	ldr	r2, [pc, #440]	; (8104524 <HAL_DMA_IRQHandler+0xa28>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d022      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	4a6d      	ldr	r2, [pc, #436]	; (8104528 <HAL_DMA_IRQHandler+0xa2c>)
 8104374:	4293      	cmp	r3, r2
 8104376:	d01d      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	4a6b      	ldr	r2, [pc, #428]	; (810452c <HAL_DMA_IRQHandler+0xa30>)
 810437e:	4293      	cmp	r3, r2
 8104380:	d018      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	4a6a      	ldr	r2, [pc, #424]	; (8104530 <HAL_DMA_IRQHandler+0xa34>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d013      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	4a68      	ldr	r2, [pc, #416]	; (8104534 <HAL_DMA_IRQHandler+0xa38>)
 8104392:	4293      	cmp	r3, r2
 8104394:	d00e      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	4a67      	ldr	r2, [pc, #412]	; (8104538 <HAL_DMA_IRQHandler+0xa3c>)
 810439c:	4293      	cmp	r3, r2
 810439e:	d009      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	4a65      	ldr	r2, [pc, #404]	; (810453c <HAL_DMA_IRQHandler+0xa40>)
 81043a6:	4293      	cmp	r3, r2
 81043a8:	d004      	beq.n	81043b4 <HAL_DMA_IRQHandler+0x8b8>
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	4a64      	ldr	r2, [pc, #400]	; (8104540 <HAL_DMA_IRQHandler+0xa44>)
 81043b0:	4293      	cmp	r3, r2
 81043b2:	d108      	bne.n	81043c6 <HAL_DMA_IRQHandler+0x8ca>
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	681a      	ldr	r2, [r3, #0]
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	f022 0201 	bic.w	r2, r2, #1
 81043c2:	601a      	str	r2, [r3, #0]
 81043c4:	e007      	b.n	81043d6 <HAL_DMA_IRQHandler+0x8da>
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	681b      	ldr	r3, [r3, #0]
 81043ca:	681a      	ldr	r2, [r3, #0]
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	f022 0201 	bic.w	r2, r2, #1
 81043d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	3301      	adds	r3, #1
 81043da:	60fb      	str	r3, [r7, #12]
 81043dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81043de:	429a      	cmp	r2, r3
 81043e0:	d307      	bcc.n	81043f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	f003 0301 	and.w	r3, r3, #1
 81043ec:	2b00      	cmp	r3, #0
 81043ee:	d1f2      	bne.n	81043d6 <HAL_DMA_IRQHandler+0x8da>
 81043f0:	e000      	b.n	81043f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 81043f2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	2200      	movs	r2, #0
 81043f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	f003 0301 	and.w	r3, r3, #1
 8104406:	2b00      	cmp	r3, #0
 8104408:	d004      	beq.n	8104414 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	2203      	movs	r2, #3
 810440e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8104412:	e003      	b.n	810441c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	2201      	movs	r2, #1
 8104418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104420:	2b00      	cmp	r3, #0
 8104422:	f000 8272 	beq.w	810490a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810442a:	6878      	ldr	r0, [r7, #4]
 810442c:	4798      	blx	r3
 810442e:	e26c      	b.n	810490a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a43      	ldr	r2, [pc, #268]	; (8104544 <HAL_DMA_IRQHandler+0xa48>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d022      	beq.n	8104480 <HAL_DMA_IRQHandler+0x984>
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	4a42      	ldr	r2, [pc, #264]	; (8104548 <HAL_DMA_IRQHandler+0xa4c>)
 8104440:	4293      	cmp	r3, r2
 8104442:	d01d      	beq.n	8104480 <HAL_DMA_IRQHandler+0x984>
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	4a40      	ldr	r2, [pc, #256]	; (810454c <HAL_DMA_IRQHandler+0xa50>)
 810444a:	4293      	cmp	r3, r2
 810444c:	d018      	beq.n	8104480 <HAL_DMA_IRQHandler+0x984>
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	4a3f      	ldr	r2, [pc, #252]	; (8104550 <HAL_DMA_IRQHandler+0xa54>)
 8104454:	4293      	cmp	r3, r2
 8104456:	d013      	beq.n	8104480 <HAL_DMA_IRQHandler+0x984>
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	4a3d      	ldr	r2, [pc, #244]	; (8104554 <HAL_DMA_IRQHandler+0xa58>)
 810445e:	4293      	cmp	r3, r2
 8104460:	d00e      	beq.n	8104480 <HAL_DMA_IRQHandler+0x984>
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	4a3c      	ldr	r2, [pc, #240]	; (8104558 <HAL_DMA_IRQHandler+0xa5c>)
 8104468:	4293      	cmp	r3, r2
 810446a:	d009      	beq.n	8104480 <HAL_DMA_IRQHandler+0x984>
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	4a3a      	ldr	r2, [pc, #232]	; (810455c <HAL_DMA_IRQHandler+0xa60>)
 8104472:	4293      	cmp	r3, r2
 8104474:	d004      	beq.n	8104480 <HAL_DMA_IRQHandler+0x984>
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	4a39      	ldr	r2, [pc, #228]	; (8104560 <HAL_DMA_IRQHandler+0xa64>)
 810447c:	4293      	cmp	r3, r2
 810447e:	d101      	bne.n	8104484 <HAL_DMA_IRQHandler+0x988>
 8104480:	2301      	movs	r3, #1
 8104482:	e000      	b.n	8104486 <HAL_DMA_IRQHandler+0x98a>
 8104484:	2300      	movs	r3, #0
 8104486:	2b00      	cmp	r3, #0
 8104488:	f000 823f 	beq.w	810490a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104498:	f003 031f 	and.w	r3, r3, #31
 810449c:	2204      	movs	r2, #4
 810449e:	409a      	lsls	r2, r3
 81044a0:	697b      	ldr	r3, [r7, #20]
 81044a2:	4013      	ands	r3, r2
 81044a4:	2b00      	cmp	r3, #0
 81044a6:	f000 80cd 	beq.w	8104644 <HAL_DMA_IRQHandler+0xb48>
 81044aa:	693b      	ldr	r3, [r7, #16]
 81044ac:	f003 0304 	and.w	r3, r3, #4
 81044b0:	2b00      	cmp	r3, #0
 81044b2:	f000 80c7 	beq.w	8104644 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044ba:	f003 031f 	and.w	r3, r3, #31
 81044be:	2204      	movs	r2, #4
 81044c0:	409a      	lsls	r2, r3
 81044c2:	69fb      	ldr	r3, [r7, #28]
 81044c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81044c6:	693b      	ldr	r3, [r7, #16]
 81044c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81044cc:	2b00      	cmp	r3, #0
 81044ce:	d049      	beq.n	8104564 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81044d0:	693b      	ldr	r3, [r7, #16]
 81044d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81044d6:	2b00      	cmp	r3, #0
 81044d8:	d109      	bne.n	81044ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81044de:	2b00      	cmp	r3, #0
 81044e0:	f000 8210 	beq.w	8104904 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81044e8:	6878      	ldr	r0, [r7, #4]
 81044ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81044ec:	e20a      	b.n	8104904 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	f000 8206 	beq.w	8104904 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81044fc:	6878      	ldr	r0, [r7, #4]
 81044fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104500:	e200      	b.n	8104904 <HAL_DMA_IRQHandler+0xe08>
 8104502:	bf00      	nop
 8104504:	40020010 	.word	0x40020010
 8104508:	40020028 	.word	0x40020028
 810450c:	40020040 	.word	0x40020040
 8104510:	40020058 	.word	0x40020058
 8104514:	40020070 	.word	0x40020070
 8104518:	40020088 	.word	0x40020088
 810451c:	400200a0 	.word	0x400200a0
 8104520:	400200b8 	.word	0x400200b8
 8104524:	40020410 	.word	0x40020410
 8104528:	40020428 	.word	0x40020428
 810452c:	40020440 	.word	0x40020440
 8104530:	40020458 	.word	0x40020458
 8104534:	40020470 	.word	0x40020470
 8104538:	40020488 	.word	0x40020488
 810453c:	400204a0 	.word	0x400204a0
 8104540:	400204b8 	.word	0x400204b8
 8104544:	58025408 	.word	0x58025408
 8104548:	5802541c 	.word	0x5802541c
 810454c:	58025430 	.word	0x58025430
 8104550:	58025444 	.word	0x58025444
 8104554:	58025458 	.word	0x58025458
 8104558:	5802546c 	.word	0x5802546c
 810455c:	58025480 	.word	0x58025480
 8104560:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104564:	693b      	ldr	r3, [r7, #16]
 8104566:	f003 0320 	and.w	r3, r3, #32
 810456a:	2b00      	cmp	r3, #0
 810456c:	d160      	bne.n	8104630 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a8c      	ldr	r2, [pc, #560]	; (81047a4 <HAL_DMA_IRQHandler+0xca8>)
 8104574:	4293      	cmp	r3, r2
 8104576:	d04a      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	4a8a      	ldr	r2, [pc, #552]	; (81047a8 <HAL_DMA_IRQHandler+0xcac>)
 810457e:	4293      	cmp	r3, r2
 8104580:	d045      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	4a89      	ldr	r2, [pc, #548]	; (81047ac <HAL_DMA_IRQHandler+0xcb0>)
 8104588:	4293      	cmp	r3, r2
 810458a:	d040      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	4a87      	ldr	r2, [pc, #540]	; (81047b0 <HAL_DMA_IRQHandler+0xcb4>)
 8104592:	4293      	cmp	r3, r2
 8104594:	d03b      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	4a86      	ldr	r2, [pc, #536]	; (81047b4 <HAL_DMA_IRQHandler+0xcb8>)
 810459c:	4293      	cmp	r3, r2
 810459e:	d036      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	4a84      	ldr	r2, [pc, #528]	; (81047b8 <HAL_DMA_IRQHandler+0xcbc>)
 81045a6:	4293      	cmp	r3, r2
 81045a8:	d031      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	4a83      	ldr	r2, [pc, #524]	; (81047bc <HAL_DMA_IRQHandler+0xcc0>)
 81045b0:	4293      	cmp	r3, r2
 81045b2:	d02c      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	4a81      	ldr	r2, [pc, #516]	; (81047c0 <HAL_DMA_IRQHandler+0xcc4>)
 81045ba:	4293      	cmp	r3, r2
 81045bc:	d027      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	4a80      	ldr	r2, [pc, #512]	; (81047c4 <HAL_DMA_IRQHandler+0xcc8>)
 81045c4:	4293      	cmp	r3, r2
 81045c6:	d022      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	4a7e      	ldr	r2, [pc, #504]	; (81047c8 <HAL_DMA_IRQHandler+0xccc>)
 81045ce:	4293      	cmp	r3, r2
 81045d0:	d01d      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	4a7d      	ldr	r2, [pc, #500]	; (81047cc <HAL_DMA_IRQHandler+0xcd0>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d018      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a7b      	ldr	r2, [pc, #492]	; (81047d0 <HAL_DMA_IRQHandler+0xcd4>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d013      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	4a7a      	ldr	r2, [pc, #488]	; (81047d4 <HAL_DMA_IRQHandler+0xcd8>)
 81045ec:	4293      	cmp	r3, r2
 81045ee:	d00e      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	4a78      	ldr	r2, [pc, #480]	; (81047d8 <HAL_DMA_IRQHandler+0xcdc>)
 81045f6:	4293      	cmp	r3, r2
 81045f8:	d009      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	4a77      	ldr	r2, [pc, #476]	; (81047dc <HAL_DMA_IRQHandler+0xce0>)
 8104600:	4293      	cmp	r3, r2
 8104602:	d004      	beq.n	810460e <HAL_DMA_IRQHandler+0xb12>
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	4a75      	ldr	r2, [pc, #468]	; (81047e0 <HAL_DMA_IRQHandler+0xce4>)
 810460a:	4293      	cmp	r3, r2
 810460c:	d108      	bne.n	8104620 <HAL_DMA_IRQHandler+0xb24>
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	681a      	ldr	r2, [r3, #0]
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	f022 0208 	bic.w	r2, r2, #8
 810461c:	601a      	str	r2, [r3, #0]
 810461e:	e007      	b.n	8104630 <HAL_DMA_IRQHandler+0xb34>
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	681a      	ldr	r2, [r3, #0]
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	f022 0204 	bic.w	r2, r2, #4
 810462e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104634:	2b00      	cmp	r3, #0
 8104636:	f000 8165 	beq.w	8104904 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810463e:	6878      	ldr	r0, [r7, #4]
 8104640:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104642:	e15f      	b.n	8104904 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104648:	f003 031f 	and.w	r3, r3, #31
 810464c:	2202      	movs	r2, #2
 810464e:	409a      	lsls	r2, r3
 8104650:	697b      	ldr	r3, [r7, #20]
 8104652:	4013      	ands	r3, r2
 8104654:	2b00      	cmp	r3, #0
 8104656:	f000 80c5 	beq.w	81047e4 <HAL_DMA_IRQHandler+0xce8>
 810465a:	693b      	ldr	r3, [r7, #16]
 810465c:	f003 0302 	and.w	r3, r3, #2
 8104660:	2b00      	cmp	r3, #0
 8104662:	f000 80bf 	beq.w	81047e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810466a:	f003 031f 	and.w	r3, r3, #31
 810466e:	2202      	movs	r2, #2
 8104670:	409a      	lsls	r2, r3
 8104672:	69fb      	ldr	r3, [r7, #28]
 8104674:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104676:	693b      	ldr	r3, [r7, #16]
 8104678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810467c:	2b00      	cmp	r3, #0
 810467e:	d018      	beq.n	81046b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104680:	693b      	ldr	r3, [r7, #16]
 8104682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104686:	2b00      	cmp	r3, #0
 8104688:	d109      	bne.n	810469e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810468e:	2b00      	cmp	r3, #0
 8104690:	f000 813a 	beq.w	8104908 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104698:	6878      	ldr	r0, [r7, #4]
 810469a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810469c:	e134      	b.n	8104908 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81046a2:	2b00      	cmp	r3, #0
 81046a4:	f000 8130 	beq.w	8104908 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81046a8:	687b      	ldr	r3, [r7, #4]
 81046aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81046ac:	6878      	ldr	r0, [r7, #4]
 81046ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81046b0:	e12a      	b.n	8104908 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81046b2:	693b      	ldr	r3, [r7, #16]
 81046b4:	f003 0320 	and.w	r3, r3, #32
 81046b8:	2b00      	cmp	r3, #0
 81046ba:	d168      	bne.n	810478e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	681b      	ldr	r3, [r3, #0]
 81046c0:	4a38      	ldr	r2, [pc, #224]	; (81047a4 <HAL_DMA_IRQHandler+0xca8>)
 81046c2:	4293      	cmp	r3, r2
 81046c4:	d04a      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 81046c6:	687b      	ldr	r3, [r7, #4]
 81046c8:	681b      	ldr	r3, [r3, #0]
 81046ca:	4a37      	ldr	r2, [pc, #220]	; (81047a8 <HAL_DMA_IRQHandler+0xcac>)
 81046cc:	4293      	cmp	r3, r2
 81046ce:	d045      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	4a35      	ldr	r2, [pc, #212]	; (81047ac <HAL_DMA_IRQHandler+0xcb0>)
 81046d6:	4293      	cmp	r3, r2
 81046d8:	d040      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	681b      	ldr	r3, [r3, #0]
 81046de:	4a34      	ldr	r2, [pc, #208]	; (81047b0 <HAL_DMA_IRQHandler+0xcb4>)
 81046e0:	4293      	cmp	r3, r2
 81046e2:	d03b      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	681b      	ldr	r3, [r3, #0]
 81046e8:	4a32      	ldr	r2, [pc, #200]	; (81047b4 <HAL_DMA_IRQHandler+0xcb8>)
 81046ea:	4293      	cmp	r3, r2
 81046ec:	d036      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	681b      	ldr	r3, [r3, #0]
 81046f2:	4a31      	ldr	r2, [pc, #196]	; (81047b8 <HAL_DMA_IRQHandler+0xcbc>)
 81046f4:	4293      	cmp	r3, r2
 81046f6:	d031      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	681b      	ldr	r3, [r3, #0]
 81046fc:	4a2f      	ldr	r2, [pc, #188]	; (81047bc <HAL_DMA_IRQHandler+0xcc0>)
 81046fe:	4293      	cmp	r3, r2
 8104700:	d02c      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	681b      	ldr	r3, [r3, #0]
 8104706:	4a2e      	ldr	r2, [pc, #184]	; (81047c0 <HAL_DMA_IRQHandler+0xcc4>)
 8104708:	4293      	cmp	r3, r2
 810470a:	d027      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 810470c:	687b      	ldr	r3, [r7, #4]
 810470e:	681b      	ldr	r3, [r3, #0]
 8104710:	4a2c      	ldr	r2, [pc, #176]	; (81047c4 <HAL_DMA_IRQHandler+0xcc8>)
 8104712:	4293      	cmp	r3, r2
 8104714:	d022      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	4a2b      	ldr	r2, [pc, #172]	; (81047c8 <HAL_DMA_IRQHandler+0xccc>)
 810471c:	4293      	cmp	r3, r2
 810471e:	d01d      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	681b      	ldr	r3, [r3, #0]
 8104724:	4a29      	ldr	r2, [pc, #164]	; (81047cc <HAL_DMA_IRQHandler+0xcd0>)
 8104726:	4293      	cmp	r3, r2
 8104728:	d018      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	681b      	ldr	r3, [r3, #0]
 810472e:	4a28      	ldr	r2, [pc, #160]	; (81047d0 <HAL_DMA_IRQHandler+0xcd4>)
 8104730:	4293      	cmp	r3, r2
 8104732:	d013      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	681b      	ldr	r3, [r3, #0]
 8104738:	4a26      	ldr	r2, [pc, #152]	; (81047d4 <HAL_DMA_IRQHandler+0xcd8>)
 810473a:	4293      	cmp	r3, r2
 810473c:	d00e      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	4a25      	ldr	r2, [pc, #148]	; (81047d8 <HAL_DMA_IRQHandler+0xcdc>)
 8104744:	4293      	cmp	r3, r2
 8104746:	d009      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	4a23      	ldr	r2, [pc, #140]	; (81047dc <HAL_DMA_IRQHandler+0xce0>)
 810474e:	4293      	cmp	r3, r2
 8104750:	d004      	beq.n	810475c <HAL_DMA_IRQHandler+0xc60>
 8104752:	687b      	ldr	r3, [r7, #4]
 8104754:	681b      	ldr	r3, [r3, #0]
 8104756:	4a22      	ldr	r2, [pc, #136]	; (81047e0 <HAL_DMA_IRQHandler+0xce4>)
 8104758:	4293      	cmp	r3, r2
 810475a:	d108      	bne.n	810476e <HAL_DMA_IRQHandler+0xc72>
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	681a      	ldr	r2, [r3, #0]
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f022 0214 	bic.w	r2, r2, #20
 810476a:	601a      	str	r2, [r3, #0]
 810476c:	e007      	b.n	810477e <HAL_DMA_IRQHandler+0xc82>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	681a      	ldr	r2, [r3, #0]
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	681b      	ldr	r3, [r3, #0]
 8104778:	f022 020a 	bic.w	r2, r2, #10
 810477c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	2200      	movs	r2, #0
 8104782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104786:	687b      	ldr	r3, [r7, #4]
 8104788:	2201      	movs	r2, #1
 810478a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104792:	2b00      	cmp	r3, #0
 8104794:	f000 80b8 	beq.w	8104908 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810479c:	6878      	ldr	r0, [r7, #4]
 810479e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81047a0:	e0b2      	b.n	8104908 <HAL_DMA_IRQHandler+0xe0c>
 81047a2:	bf00      	nop
 81047a4:	40020010 	.word	0x40020010
 81047a8:	40020028 	.word	0x40020028
 81047ac:	40020040 	.word	0x40020040
 81047b0:	40020058 	.word	0x40020058
 81047b4:	40020070 	.word	0x40020070
 81047b8:	40020088 	.word	0x40020088
 81047bc:	400200a0 	.word	0x400200a0
 81047c0:	400200b8 	.word	0x400200b8
 81047c4:	40020410 	.word	0x40020410
 81047c8:	40020428 	.word	0x40020428
 81047cc:	40020440 	.word	0x40020440
 81047d0:	40020458 	.word	0x40020458
 81047d4:	40020470 	.word	0x40020470
 81047d8:	40020488 	.word	0x40020488
 81047dc:	400204a0 	.word	0x400204a0
 81047e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047e8:	f003 031f 	and.w	r3, r3, #31
 81047ec:	2208      	movs	r2, #8
 81047ee:	409a      	lsls	r2, r3
 81047f0:	697b      	ldr	r3, [r7, #20]
 81047f2:	4013      	ands	r3, r2
 81047f4:	2b00      	cmp	r3, #0
 81047f6:	f000 8088 	beq.w	810490a <HAL_DMA_IRQHandler+0xe0e>
 81047fa:	693b      	ldr	r3, [r7, #16]
 81047fc:	f003 0308 	and.w	r3, r3, #8
 8104800:	2b00      	cmp	r3, #0
 8104802:	f000 8082 	beq.w	810490a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	4a41      	ldr	r2, [pc, #260]	; (8104910 <HAL_DMA_IRQHandler+0xe14>)
 810480c:	4293      	cmp	r3, r2
 810480e:	d04a      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	4a3f      	ldr	r2, [pc, #252]	; (8104914 <HAL_DMA_IRQHandler+0xe18>)
 8104816:	4293      	cmp	r3, r2
 8104818:	d045      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4a3e      	ldr	r2, [pc, #248]	; (8104918 <HAL_DMA_IRQHandler+0xe1c>)
 8104820:	4293      	cmp	r3, r2
 8104822:	d040      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	4a3c      	ldr	r2, [pc, #240]	; (810491c <HAL_DMA_IRQHandler+0xe20>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d03b      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	4a3b      	ldr	r2, [pc, #236]	; (8104920 <HAL_DMA_IRQHandler+0xe24>)
 8104834:	4293      	cmp	r3, r2
 8104836:	d036      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	4a39      	ldr	r2, [pc, #228]	; (8104924 <HAL_DMA_IRQHandler+0xe28>)
 810483e:	4293      	cmp	r3, r2
 8104840:	d031      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	4a38      	ldr	r2, [pc, #224]	; (8104928 <HAL_DMA_IRQHandler+0xe2c>)
 8104848:	4293      	cmp	r3, r2
 810484a:	d02c      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	4a36      	ldr	r2, [pc, #216]	; (810492c <HAL_DMA_IRQHandler+0xe30>)
 8104852:	4293      	cmp	r3, r2
 8104854:	d027      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	4a35      	ldr	r2, [pc, #212]	; (8104930 <HAL_DMA_IRQHandler+0xe34>)
 810485c:	4293      	cmp	r3, r2
 810485e:	d022      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	4a33      	ldr	r2, [pc, #204]	; (8104934 <HAL_DMA_IRQHandler+0xe38>)
 8104866:	4293      	cmp	r3, r2
 8104868:	d01d      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	4a32      	ldr	r2, [pc, #200]	; (8104938 <HAL_DMA_IRQHandler+0xe3c>)
 8104870:	4293      	cmp	r3, r2
 8104872:	d018      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	4a30      	ldr	r2, [pc, #192]	; (810493c <HAL_DMA_IRQHandler+0xe40>)
 810487a:	4293      	cmp	r3, r2
 810487c:	d013      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	4a2f      	ldr	r2, [pc, #188]	; (8104940 <HAL_DMA_IRQHandler+0xe44>)
 8104884:	4293      	cmp	r3, r2
 8104886:	d00e      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	4a2d      	ldr	r2, [pc, #180]	; (8104944 <HAL_DMA_IRQHandler+0xe48>)
 810488e:	4293      	cmp	r3, r2
 8104890:	d009      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	4a2c      	ldr	r2, [pc, #176]	; (8104948 <HAL_DMA_IRQHandler+0xe4c>)
 8104898:	4293      	cmp	r3, r2
 810489a:	d004      	beq.n	81048a6 <HAL_DMA_IRQHandler+0xdaa>
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	4a2a      	ldr	r2, [pc, #168]	; (810494c <HAL_DMA_IRQHandler+0xe50>)
 81048a2:	4293      	cmp	r3, r2
 81048a4:	d108      	bne.n	81048b8 <HAL_DMA_IRQHandler+0xdbc>
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	681b      	ldr	r3, [r3, #0]
 81048aa:	681a      	ldr	r2, [r3, #0]
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	681b      	ldr	r3, [r3, #0]
 81048b0:	f022 021c 	bic.w	r2, r2, #28
 81048b4:	601a      	str	r2, [r3, #0]
 81048b6:	e007      	b.n	81048c8 <HAL_DMA_IRQHandler+0xdcc>
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	681a      	ldr	r2, [r3, #0]
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	f022 020e 	bic.w	r2, r2, #14
 81048c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048cc:	f003 031f 	and.w	r3, r3, #31
 81048d0:	2201      	movs	r2, #1
 81048d2:	409a      	lsls	r2, r3
 81048d4:	69fb      	ldr	r3, [r7, #28]
 81048d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	2201      	movs	r2, #1
 81048dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	2200      	movs	r2, #0
 81048e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	2201      	movs	r2, #1
 81048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81048f2:	2b00      	cmp	r3, #0
 81048f4:	d009      	beq.n	810490a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81048fa:	6878      	ldr	r0, [r7, #4]
 81048fc:	4798      	blx	r3
 81048fe:	e004      	b.n	810490a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8104900:	bf00      	nop
 8104902:	e002      	b.n	810490a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104904:	bf00      	nop
 8104906:	e000      	b.n	810490a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104908:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810490a:	3728      	adds	r7, #40	; 0x28
 810490c:	46bd      	mov	sp, r7
 810490e:	bd80      	pop	{r7, pc}
 8104910:	40020010 	.word	0x40020010
 8104914:	40020028 	.word	0x40020028
 8104918:	40020040 	.word	0x40020040
 810491c:	40020058 	.word	0x40020058
 8104920:	40020070 	.word	0x40020070
 8104924:	40020088 	.word	0x40020088
 8104928:	400200a0 	.word	0x400200a0
 810492c:	400200b8 	.word	0x400200b8
 8104930:	40020410 	.word	0x40020410
 8104934:	40020428 	.word	0x40020428
 8104938:	40020440 	.word	0x40020440
 810493c:	40020458 	.word	0x40020458
 8104940:	40020470 	.word	0x40020470
 8104944:	40020488 	.word	0x40020488
 8104948:	400204a0 	.word	0x400204a0
 810494c:	400204b8 	.word	0x400204b8

08104950 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8104950:	b480      	push	{r7}
 8104952:	b083      	sub	sp, #12
 8104954:	af00      	add	r7, sp, #0
 8104956:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 810495c:	4618      	mov	r0, r3
 810495e:	370c      	adds	r7, #12
 8104960:	46bd      	mov	sp, r7
 8104962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104966:	4770      	bx	lr

08104968 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104968:	b480      	push	{r7}
 810496a:	b087      	sub	sp, #28
 810496c:	af00      	add	r7, sp, #0
 810496e:	60f8      	str	r0, [r7, #12]
 8104970:	60b9      	str	r1, [r7, #8]
 8104972:	607a      	str	r2, [r7, #4]
 8104974:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810497a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104980:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104982:	68fb      	ldr	r3, [r7, #12]
 8104984:	681b      	ldr	r3, [r3, #0]
 8104986:	4a84      	ldr	r2, [pc, #528]	; (8104b98 <DMA_SetConfig+0x230>)
 8104988:	4293      	cmp	r3, r2
 810498a:	d072      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 810498c:	68fb      	ldr	r3, [r7, #12]
 810498e:	681b      	ldr	r3, [r3, #0]
 8104990:	4a82      	ldr	r2, [pc, #520]	; (8104b9c <DMA_SetConfig+0x234>)
 8104992:	4293      	cmp	r3, r2
 8104994:	d06d      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104996:	68fb      	ldr	r3, [r7, #12]
 8104998:	681b      	ldr	r3, [r3, #0]
 810499a:	4a81      	ldr	r2, [pc, #516]	; (8104ba0 <DMA_SetConfig+0x238>)
 810499c:	4293      	cmp	r3, r2
 810499e:	d068      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049a0:	68fb      	ldr	r3, [r7, #12]
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	4a7f      	ldr	r2, [pc, #508]	; (8104ba4 <DMA_SetConfig+0x23c>)
 81049a6:	4293      	cmp	r3, r2
 81049a8:	d063      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049aa:	68fb      	ldr	r3, [r7, #12]
 81049ac:	681b      	ldr	r3, [r3, #0]
 81049ae:	4a7e      	ldr	r2, [pc, #504]	; (8104ba8 <DMA_SetConfig+0x240>)
 81049b0:	4293      	cmp	r3, r2
 81049b2:	d05e      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049b4:	68fb      	ldr	r3, [r7, #12]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	4a7c      	ldr	r2, [pc, #496]	; (8104bac <DMA_SetConfig+0x244>)
 81049ba:	4293      	cmp	r3, r2
 81049bc:	d059      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049be:	68fb      	ldr	r3, [r7, #12]
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	4a7b      	ldr	r2, [pc, #492]	; (8104bb0 <DMA_SetConfig+0x248>)
 81049c4:	4293      	cmp	r3, r2
 81049c6:	d054      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049c8:	68fb      	ldr	r3, [r7, #12]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	4a79      	ldr	r2, [pc, #484]	; (8104bb4 <DMA_SetConfig+0x24c>)
 81049ce:	4293      	cmp	r3, r2
 81049d0:	d04f      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049d2:	68fb      	ldr	r3, [r7, #12]
 81049d4:	681b      	ldr	r3, [r3, #0]
 81049d6:	4a78      	ldr	r2, [pc, #480]	; (8104bb8 <DMA_SetConfig+0x250>)
 81049d8:	4293      	cmp	r3, r2
 81049da:	d04a      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049dc:	68fb      	ldr	r3, [r7, #12]
 81049de:	681b      	ldr	r3, [r3, #0]
 81049e0:	4a76      	ldr	r2, [pc, #472]	; (8104bbc <DMA_SetConfig+0x254>)
 81049e2:	4293      	cmp	r3, r2
 81049e4:	d045      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	4a75      	ldr	r2, [pc, #468]	; (8104bc0 <DMA_SetConfig+0x258>)
 81049ec:	4293      	cmp	r3, r2
 81049ee:	d040      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049f0:	68fb      	ldr	r3, [r7, #12]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	4a73      	ldr	r2, [pc, #460]	; (8104bc4 <DMA_SetConfig+0x25c>)
 81049f6:	4293      	cmp	r3, r2
 81049f8:	d03b      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 81049fa:	68fb      	ldr	r3, [r7, #12]
 81049fc:	681b      	ldr	r3, [r3, #0]
 81049fe:	4a72      	ldr	r2, [pc, #456]	; (8104bc8 <DMA_SetConfig+0x260>)
 8104a00:	4293      	cmp	r3, r2
 8104a02:	d036      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	4a70      	ldr	r2, [pc, #448]	; (8104bcc <DMA_SetConfig+0x264>)
 8104a0a:	4293      	cmp	r3, r2
 8104a0c:	d031      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a0e:	68fb      	ldr	r3, [r7, #12]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	4a6f      	ldr	r2, [pc, #444]	; (8104bd0 <DMA_SetConfig+0x268>)
 8104a14:	4293      	cmp	r3, r2
 8104a16:	d02c      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	4a6d      	ldr	r2, [pc, #436]	; (8104bd4 <DMA_SetConfig+0x26c>)
 8104a1e:	4293      	cmp	r3, r2
 8104a20:	d027      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a22:	68fb      	ldr	r3, [r7, #12]
 8104a24:	681b      	ldr	r3, [r3, #0]
 8104a26:	4a6c      	ldr	r2, [pc, #432]	; (8104bd8 <DMA_SetConfig+0x270>)
 8104a28:	4293      	cmp	r3, r2
 8104a2a:	d022      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a2c:	68fb      	ldr	r3, [r7, #12]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	4a6a      	ldr	r2, [pc, #424]	; (8104bdc <DMA_SetConfig+0x274>)
 8104a32:	4293      	cmp	r3, r2
 8104a34:	d01d      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a36:	68fb      	ldr	r3, [r7, #12]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	4a69      	ldr	r2, [pc, #420]	; (8104be0 <DMA_SetConfig+0x278>)
 8104a3c:	4293      	cmp	r3, r2
 8104a3e:	d018      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a40:	68fb      	ldr	r3, [r7, #12]
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	4a67      	ldr	r2, [pc, #412]	; (8104be4 <DMA_SetConfig+0x27c>)
 8104a46:	4293      	cmp	r3, r2
 8104a48:	d013      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	681b      	ldr	r3, [r3, #0]
 8104a4e:	4a66      	ldr	r2, [pc, #408]	; (8104be8 <DMA_SetConfig+0x280>)
 8104a50:	4293      	cmp	r3, r2
 8104a52:	d00e      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	4a64      	ldr	r2, [pc, #400]	; (8104bec <DMA_SetConfig+0x284>)
 8104a5a:	4293      	cmp	r3, r2
 8104a5c:	d009      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a5e:	68fb      	ldr	r3, [r7, #12]
 8104a60:	681b      	ldr	r3, [r3, #0]
 8104a62:	4a63      	ldr	r2, [pc, #396]	; (8104bf0 <DMA_SetConfig+0x288>)
 8104a64:	4293      	cmp	r3, r2
 8104a66:	d004      	beq.n	8104a72 <DMA_SetConfig+0x10a>
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	4a61      	ldr	r2, [pc, #388]	; (8104bf4 <DMA_SetConfig+0x28c>)
 8104a6e:	4293      	cmp	r3, r2
 8104a70:	d101      	bne.n	8104a76 <DMA_SetConfig+0x10e>
 8104a72:	2301      	movs	r3, #1
 8104a74:	e000      	b.n	8104a78 <DMA_SetConfig+0x110>
 8104a76:	2300      	movs	r3, #0
 8104a78:	2b00      	cmp	r3, #0
 8104a7a:	d00d      	beq.n	8104a98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104a7c:	68fb      	ldr	r3, [r7, #12]
 8104a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a80:	68fa      	ldr	r2, [r7, #12]
 8104a82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104a84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8104a86:	68fb      	ldr	r3, [r7, #12]
 8104a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d004      	beq.n	8104a98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104a8e:	68fb      	ldr	r3, [r7, #12]
 8104a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a92:	68fa      	ldr	r2, [r7, #12]
 8104a94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104a96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	4a3e      	ldr	r2, [pc, #248]	; (8104b98 <DMA_SetConfig+0x230>)
 8104a9e:	4293      	cmp	r3, r2
 8104aa0:	d04a      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104aa2:	68fb      	ldr	r3, [r7, #12]
 8104aa4:	681b      	ldr	r3, [r3, #0]
 8104aa6:	4a3d      	ldr	r2, [pc, #244]	; (8104b9c <DMA_SetConfig+0x234>)
 8104aa8:	4293      	cmp	r3, r2
 8104aaa:	d045      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104aac:	68fb      	ldr	r3, [r7, #12]
 8104aae:	681b      	ldr	r3, [r3, #0]
 8104ab0:	4a3b      	ldr	r2, [pc, #236]	; (8104ba0 <DMA_SetConfig+0x238>)
 8104ab2:	4293      	cmp	r3, r2
 8104ab4:	d040      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104ab6:	68fb      	ldr	r3, [r7, #12]
 8104ab8:	681b      	ldr	r3, [r3, #0]
 8104aba:	4a3a      	ldr	r2, [pc, #232]	; (8104ba4 <DMA_SetConfig+0x23c>)
 8104abc:	4293      	cmp	r3, r2
 8104abe:	d03b      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	4a38      	ldr	r2, [pc, #224]	; (8104ba8 <DMA_SetConfig+0x240>)
 8104ac6:	4293      	cmp	r3, r2
 8104ac8:	d036      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104aca:	68fb      	ldr	r3, [r7, #12]
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	4a37      	ldr	r2, [pc, #220]	; (8104bac <DMA_SetConfig+0x244>)
 8104ad0:	4293      	cmp	r3, r2
 8104ad2:	d031      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104ad4:	68fb      	ldr	r3, [r7, #12]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	4a35      	ldr	r2, [pc, #212]	; (8104bb0 <DMA_SetConfig+0x248>)
 8104ada:	4293      	cmp	r3, r2
 8104adc:	d02c      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104ade:	68fb      	ldr	r3, [r7, #12]
 8104ae0:	681b      	ldr	r3, [r3, #0]
 8104ae2:	4a34      	ldr	r2, [pc, #208]	; (8104bb4 <DMA_SetConfig+0x24c>)
 8104ae4:	4293      	cmp	r3, r2
 8104ae6:	d027      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104ae8:	68fb      	ldr	r3, [r7, #12]
 8104aea:	681b      	ldr	r3, [r3, #0]
 8104aec:	4a32      	ldr	r2, [pc, #200]	; (8104bb8 <DMA_SetConfig+0x250>)
 8104aee:	4293      	cmp	r3, r2
 8104af0:	d022      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104af2:	68fb      	ldr	r3, [r7, #12]
 8104af4:	681b      	ldr	r3, [r3, #0]
 8104af6:	4a31      	ldr	r2, [pc, #196]	; (8104bbc <DMA_SetConfig+0x254>)
 8104af8:	4293      	cmp	r3, r2
 8104afa:	d01d      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104afc:	68fb      	ldr	r3, [r7, #12]
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	4a2f      	ldr	r2, [pc, #188]	; (8104bc0 <DMA_SetConfig+0x258>)
 8104b02:	4293      	cmp	r3, r2
 8104b04:	d018      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104b06:	68fb      	ldr	r3, [r7, #12]
 8104b08:	681b      	ldr	r3, [r3, #0]
 8104b0a:	4a2e      	ldr	r2, [pc, #184]	; (8104bc4 <DMA_SetConfig+0x25c>)
 8104b0c:	4293      	cmp	r3, r2
 8104b0e:	d013      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	681b      	ldr	r3, [r3, #0]
 8104b14:	4a2c      	ldr	r2, [pc, #176]	; (8104bc8 <DMA_SetConfig+0x260>)
 8104b16:	4293      	cmp	r3, r2
 8104b18:	d00e      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104b1a:	68fb      	ldr	r3, [r7, #12]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	4a2b      	ldr	r2, [pc, #172]	; (8104bcc <DMA_SetConfig+0x264>)
 8104b20:	4293      	cmp	r3, r2
 8104b22:	d009      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	681b      	ldr	r3, [r3, #0]
 8104b28:	4a29      	ldr	r2, [pc, #164]	; (8104bd0 <DMA_SetConfig+0x268>)
 8104b2a:	4293      	cmp	r3, r2
 8104b2c:	d004      	beq.n	8104b38 <DMA_SetConfig+0x1d0>
 8104b2e:	68fb      	ldr	r3, [r7, #12]
 8104b30:	681b      	ldr	r3, [r3, #0]
 8104b32:	4a28      	ldr	r2, [pc, #160]	; (8104bd4 <DMA_SetConfig+0x26c>)
 8104b34:	4293      	cmp	r3, r2
 8104b36:	d101      	bne.n	8104b3c <DMA_SetConfig+0x1d4>
 8104b38:	2301      	movs	r3, #1
 8104b3a:	e000      	b.n	8104b3e <DMA_SetConfig+0x1d6>
 8104b3c:	2300      	movs	r3, #0
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	d05a      	beq.n	8104bf8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104b42:	68fb      	ldr	r3, [r7, #12]
 8104b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b46:	f003 031f 	and.w	r3, r3, #31
 8104b4a:	223f      	movs	r2, #63	; 0x3f
 8104b4c:	409a      	lsls	r2, r3
 8104b4e:	697b      	ldr	r3, [r7, #20]
 8104b50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104b52:	68fb      	ldr	r3, [r7, #12]
 8104b54:	681b      	ldr	r3, [r3, #0]
 8104b56:	681a      	ldr	r2, [r3, #0]
 8104b58:	68fb      	ldr	r3, [r7, #12]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104b60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8104b62:	68fb      	ldr	r3, [r7, #12]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	683a      	ldr	r2, [r7, #0]
 8104b68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104b6a:	68fb      	ldr	r3, [r7, #12]
 8104b6c:	689b      	ldr	r3, [r3, #8]
 8104b6e:	2b40      	cmp	r3, #64	; 0x40
 8104b70:	d108      	bne.n	8104b84 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8104b72:	68fb      	ldr	r3, [r7, #12]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	687a      	ldr	r2, [r7, #4]
 8104b78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8104b7a:	68fb      	ldr	r3, [r7, #12]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	68ba      	ldr	r2, [r7, #8]
 8104b80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104b82:	e087      	b.n	8104c94 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8104b84:	68fb      	ldr	r3, [r7, #12]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	68ba      	ldr	r2, [r7, #8]
 8104b8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104b8c:	68fb      	ldr	r3, [r7, #12]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	687a      	ldr	r2, [r7, #4]
 8104b92:	60da      	str	r2, [r3, #12]
}
 8104b94:	e07e      	b.n	8104c94 <DMA_SetConfig+0x32c>
 8104b96:	bf00      	nop
 8104b98:	40020010 	.word	0x40020010
 8104b9c:	40020028 	.word	0x40020028
 8104ba0:	40020040 	.word	0x40020040
 8104ba4:	40020058 	.word	0x40020058
 8104ba8:	40020070 	.word	0x40020070
 8104bac:	40020088 	.word	0x40020088
 8104bb0:	400200a0 	.word	0x400200a0
 8104bb4:	400200b8 	.word	0x400200b8
 8104bb8:	40020410 	.word	0x40020410
 8104bbc:	40020428 	.word	0x40020428
 8104bc0:	40020440 	.word	0x40020440
 8104bc4:	40020458 	.word	0x40020458
 8104bc8:	40020470 	.word	0x40020470
 8104bcc:	40020488 	.word	0x40020488
 8104bd0:	400204a0 	.word	0x400204a0
 8104bd4:	400204b8 	.word	0x400204b8
 8104bd8:	58025408 	.word	0x58025408
 8104bdc:	5802541c 	.word	0x5802541c
 8104be0:	58025430 	.word	0x58025430
 8104be4:	58025444 	.word	0x58025444
 8104be8:	58025458 	.word	0x58025458
 8104bec:	5802546c 	.word	0x5802546c
 8104bf0:	58025480 	.word	0x58025480
 8104bf4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	4a28      	ldr	r2, [pc, #160]	; (8104ca0 <DMA_SetConfig+0x338>)
 8104bfe:	4293      	cmp	r3, r2
 8104c00:	d022      	beq.n	8104c48 <DMA_SetConfig+0x2e0>
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	4a27      	ldr	r2, [pc, #156]	; (8104ca4 <DMA_SetConfig+0x33c>)
 8104c08:	4293      	cmp	r3, r2
 8104c0a:	d01d      	beq.n	8104c48 <DMA_SetConfig+0x2e0>
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	4a25      	ldr	r2, [pc, #148]	; (8104ca8 <DMA_SetConfig+0x340>)
 8104c12:	4293      	cmp	r3, r2
 8104c14:	d018      	beq.n	8104c48 <DMA_SetConfig+0x2e0>
 8104c16:	68fb      	ldr	r3, [r7, #12]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	4a24      	ldr	r2, [pc, #144]	; (8104cac <DMA_SetConfig+0x344>)
 8104c1c:	4293      	cmp	r3, r2
 8104c1e:	d013      	beq.n	8104c48 <DMA_SetConfig+0x2e0>
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	4a22      	ldr	r2, [pc, #136]	; (8104cb0 <DMA_SetConfig+0x348>)
 8104c26:	4293      	cmp	r3, r2
 8104c28:	d00e      	beq.n	8104c48 <DMA_SetConfig+0x2e0>
 8104c2a:	68fb      	ldr	r3, [r7, #12]
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	4a21      	ldr	r2, [pc, #132]	; (8104cb4 <DMA_SetConfig+0x34c>)
 8104c30:	4293      	cmp	r3, r2
 8104c32:	d009      	beq.n	8104c48 <DMA_SetConfig+0x2e0>
 8104c34:	68fb      	ldr	r3, [r7, #12]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	4a1f      	ldr	r2, [pc, #124]	; (8104cb8 <DMA_SetConfig+0x350>)
 8104c3a:	4293      	cmp	r3, r2
 8104c3c:	d004      	beq.n	8104c48 <DMA_SetConfig+0x2e0>
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	4a1e      	ldr	r2, [pc, #120]	; (8104cbc <DMA_SetConfig+0x354>)
 8104c44:	4293      	cmp	r3, r2
 8104c46:	d101      	bne.n	8104c4c <DMA_SetConfig+0x2e4>
 8104c48:	2301      	movs	r3, #1
 8104c4a:	e000      	b.n	8104c4e <DMA_SetConfig+0x2e6>
 8104c4c:	2300      	movs	r3, #0
 8104c4e:	2b00      	cmp	r3, #0
 8104c50:	d020      	beq.n	8104c94 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104c52:	68fb      	ldr	r3, [r7, #12]
 8104c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104c56:	f003 031f 	and.w	r3, r3, #31
 8104c5a:	2201      	movs	r2, #1
 8104c5c:	409a      	lsls	r2, r3
 8104c5e:	693b      	ldr	r3, [r7, #16]
 8104c60:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8104c62:	68fb      	ldr	r3, [r7, #12]
 8104c64:	681b      	ldr	r3, [r3, #0]
 8104c66:	683a      	ldr	r2, [r7, #0]
 8104c68:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104c6a:	68fb      	ldr	r3, [r7, #12]
 8104c6c:	689b      	ldr	r3, [r3, #8]
 8104c6e:	2b40      	cmp	r3, #64	; 0x40
 8104c70:	d108      	bne.n	8104c84 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8104c72:	68fb      	ldr	r3, [r7, #12]
 8104c74:	681b      	ldr	r3, [r3, #0]
 8104c76:	687a      	ldr	r2, [r7, #4]
 8104c78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104c7a:	68fb      	ldr	r3, [r7, #12]
 8104c7c:	681b      	ldr	r3, [r3, #0]
 8104c7e:	68ba      	ldr	r2, [r7, #8]
 8104c80:	60da      	str	r2, [r3, #12]
}
 8104c82:	e007      	b.n	8104c94 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	68ba      	ldr	r2, [r7, #8]
 8104c8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104c8c:	68fb      	ldr	r3, [r7, #12]
 8104c8e:	681b      	ldr	r3, [r3, #0]
 8104c90:	687a      	ldr	r2, [r7, #4]
 8104c92:	60da      	str	r2, [r3, #12]
}
 8104c94:	bf00      	nop
 8104c96:	371c      	adds	r7, #28
 8104c98:	46bd      	mov	sp, r7
 8104c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c9e:	4770      	bx	lr
 8104ca0:	58025408 	.word	0x58025408
 8104ca4:	5802541c 	.word	0x5802541c
 8104ca8:	58025430 	.word	0x58025430
 8104cac:	58025444 	.word	0x58025444
 8104cb0:	58025458 	.word	0x58025458
 8104cb4:	5802546c 	.word	0x5802546c
 8104cb8:	58025480 	.word	0x58025480
 8104cbc:	58025494 	.word	0x58025494

08104cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104cc0:	b480      	push	{r7}
 8104cc2:	b085      	sub	sp, #20
 8104cc4:	af00      	add	r7, sp, #0
 8104cc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	4a43      	ldr	r2, [pc, #268]	; (8104ddc <DMA_CalcBaseAndBitshift+0x11c>)
 8104cce:	4293      	cmp	r3, r2
 8104cd0:	d04a      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	4a42      	ldr	r2, [pc, #264]	; (8104de0 <DMA_CalcBaseAndBitshift+0x120>)
 8104cd8:	4293      	cmp	r3, r2
 8104cda:	d045      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	681b      	ldr	r3, [r3, #0]
 8104ce0:	4a40      	ldr	r2, [pc, #256]	; (8104de4 <DMA_CalcBaseAndBitshift+0x124>)
 8104ce2:	4293      	cmp	r3, r2
 8104ce4:	d040      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	4a3f      	ldr	r2, [pc, #252]	; (8104de8 <DMA_CalcBaseAndBitshift+0x128>)
 8104cec:	4293      	cmp	r3, r2
 8104cee:	d03b      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	4a3d      	ldr	r2, [pc, #244]	; (8104dec <DMA_CalcBaseAndBitshift+0x12c>)
 8104cf6:	4293      	cmp	r3, r2
 8104cf8:	d036      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	4a3c      	ldr	r2, [pc, #240]	; (8104df0 <DMA_CalcBaseAndBitshift+0x130>)
 8104d00:	4293      	cmp	r3, r2
 8104d02:	d031      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	4a3a      	ldr	r2, [pc, #232]	; (8104df4 <DMA_CalcBaseAndBitshift+0x134>)
 8104d0a:	4293      	cmp	r3, r2
 8104d0c:	d02c      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	4a39      	ldr	r2, [pc, #228]	; (8104df8 <DMA_CalcBaseAndBitshift+0x138>)
 8104d14:	4293      	cmp	r3, r2
 8104d16:	d027      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	4a37      	ldr	r2, [pc, #220]	; (8104dfc <DMA_CalcBaseAndBitshift+0x13c>)
 8104d1e:	4293      	cmp	r3, r2
 8104d20:	d022      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	4a36      	ldr	r2, [pc, #216]	; (8104e00 <DMA_CalcBaseAndBitshift+0x140>)
 8104d28:	4293      	cmp	r3, r2
 8104d2a:	d01d      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	4a34      	ldr	r2, [pc, #208]	; (8104e04 <DMA_CalcBaseAndBitshift+0x144>)
 8104d32:	4293      	cmp	r3, r2
 8104d34:	d018      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	681b      	ldr	r3, [r3, #0]
 8104d3a:	4a33      	ldr	r2, [pc, #204]	; (8104e08 <DMA_CalcBaseAndBitshift+0x148>)
 8104d3c:	4293      	cmp	r3, r2
 8104d3e:	d013      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	4a31      	ldr	r2, [pc, #196]	; (8104e0c <DMA_CalcBaseAndBitshift+0x14c>)
 8104d46:	4293      	cmp	r3, r2
 8104d48:	d00e      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	4a30      	ldr	r2, [pc, #192]	; (8104e10 <DMA_CalcBaseAndBitshift+0x150>)
 8104d50:	4293      	cmp	r3, r2
 8104d52:	d009      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	4a2e      	ldr	r2, [pc, #184]	; (8104e14 <DMA_CalcBaseAndBitshift+0x154>)
 8104d5a:	4293      	cmp	r3, r2
 8104d5c:	d004      	beq.n	8104d68 <DMA_CalcBaseAndBitshift+0xa8>
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	4a2d      	ldr	r2, [pc, #180]	; (8104e18 <DMA_CalcBaseAndBitshift+0x158>)
 8104d64:	4293      	cmp	r3, r2
 8104d66:	d101      	bne.n	8104d6c <DMA_CalcBaseAndBitshift+0xac>
 8104d68:	2301      	movs	r3, #1
 8104d6a:	e000      	b.n	8104d6e <DMA_CalcBaseAndBitshift+0xae>
 8104d6c:	2300      	movs	r3, #0
 8104d6e:	2b00      	cmp	r3, #0
 8104d70:	d026      	beq.n	8104dc0 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	b2db      	uxtb	r3, r3
 8104d78:	3b10      	subs	r3, #16
 8104d7a:	4a28      	ldr	r2, [pc, #160]	; (8104e1c <DMA_CalcBaseAndBitshift+0x15c>)
 8104d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8104d80:	091b      	lsrs	r3, r3, #4
 8104d82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104d84:	68fb      	ldr	r3, [r7, #12]
 8104d86:	f003 0307 	and.w	r3, r3, #7
 8104d8a:	4a25      	ldr	r2, [pc, #148]	; (8104e20 <DMA_CalcBaseAndBitshift+0x160>)
 8104d8c:	5cd3      	ldrb	r3, [r2, r3]
 8104d8e:	461a      	mov	r2, r3
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104d94:	68fb      	ldr	r3, [r7, #12]
 8104d96:	2b03      	cmp	r3, #3
 8104d98:	d909      	bls.n	8104dae <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104da2:	f023 0303 	bic.w	r3, r3, #3
 8104da6:	1d1a      	adds	r2, r3, #4
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	659a      	str	r2, [r3, #88]	; 0x58
 8104dac:	e00e      	b.n	8104dcc <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104db6:	f023 0303 	bic.w	r3, r3, #3
 8104dba:	687a      	ldr	r2, [r7, #4]
 8104dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8104dbe:	e005      	b.n	8104dcc <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104dd0:	4618      	mov	r0, r3
 8104dd2:	3714      	adds	r7, #20
 8104dd4:	46bd      	mov	sp, r7
 8104dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dda:	4770      	bx	lr
 8104ddc:	40020010 	.word	0x40020010
 8104de0:	40020028 	.word	0x40020028
 8104de4:	40020040 	.word	0x40020040
 8104de8:	40020058 	.word	0x40020058
 8104dec:	40020070 	.word	0x40020070
 8104df0:	40020088 	.word	0x40020088
 8104df4:	400200a0 	.word	0x400200a0
 8104df8:	400200b8 	.word	0x400200b8
 8104dfc:	40020410 	.word	0x40020410
 8104e00:	40020428 	.word	0x40020428
 8104e04:	40020440 	.word	0x40020440
 8104e08:	40020458 	.word	0x40020458
 8104e0c:	40020470 	.word	0x40020470
 8104e10:	40020488 	.word	0x40020488
 8104e14:	400204a0 	.word	0x400204a0
 8104e18:	400204b8 	.word	0x400204b8
 8104e1c:	aaaaaaab 	.word	0xaaaaaaab
 8104e20:	0810b6a0 	.word	0x0810b6a0

08104e24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8104e24:	b480      	push	{r7}
 8104e26:	b085      	sub	sp, #20
 8104e28:	af00      	add	r7, sp, #0
 8104e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104e2c:	2300      	movs	r3, #0
 8104e2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	699b      	ldr	r3, [r3, #24]
 8104e34:	2b00      	cmp	r3, #0
 8104e36:	d120      	bne.n	8104e7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e3c:	2b03      	cmp	r3, #3
 8104e3e:	d858      	bhi.n	8104ef2 <DMA_CheckFifoParam+0xce>
 8104e40:	a201      	add	r2, pc, #4	; (adr r2, 8104e48 <DMA_CheckFifoParam+0x24>)
 8104e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e46:	bf00      	nop
 8104e48:	08104e59 	.word	0x08104e59
 8104e4c:	08104e6b 	.word	0x08104e6b
 8104e50:	08104e59 	.word	0x08104e59
 8104e54:	08104ef3 	.word	0x08104ef3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104e60:	2b00      	cmp	r3, #0
 8104e62:	d048      	beq.n	8104ef6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104e64:	2301      	movs	r3, #1
 8104e66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104e68:	e045      	b.n	8104ef6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104e72:	d142      	bne.n	8104efa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104e74:	2301      	movs	r3, #1
 8104e76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104e78:	e03f      	b.n	8104efa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	699b      	ldr	r3, [r3, #24]
 8104e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104e82:	d123      	bne.n	8104ecc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e88:	2b03      	cmp	r3, #3
 8104e8a:	d838      	bhi.n	8104efe <DMA_CheckFifoParam+0xda>
 8104e8c:	a201      	add	r2, pc, #4	; (adr r2, 8104e94 <DMA_CheckFifoParam+0x70>)
 8104e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e92:	bf00      	nop
 8104e94:	08104ea5 	.word	0x08104ea5
 8104e98:	08104eab 	.word	0x08104eab
 8104e9c:	08104ea5 	.word	0x08104ea5
 8104ea0:	08104ebd 	.word	0x08104ebd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104ea4:	2301      	movs	r3, #1
 8104ea6:	73fb      	strb	r3, [r7, #15]
        break;
 8104ea8:	e030      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104eb2:	2b00      	cmp	r3, #0
 8104eb4:	d025      	beq.n	8104f02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8104eb6:	2301      	movs	r3, #1
 8104eb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104eba:	e022      	b.n	8104f02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104ec4:	d11f      	bne.n	8104f06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8104ec6:	2301      	movs	r3, #1
 8104ec8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104eca:	e01c      	b.n	8104f06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ed0:	2b02      	cmp	r3, #2
 8104ed2:	d902      	bls.n	8104eda <DMA_CheckFifoParam+0xb6>
 8104ed4:	2b03      	cmp	r3, #3
 8104ed6:	d003      	beq.n	8104ee0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104ed8:	e018      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104eda:	2301      	movs	r3, #1
 8104edc:	73fb      	strb	r3, [r7, #15]
        break;
 8104ede:	e015      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104ee8:	2b00      	cmp	r3, #0
 8104eea:	d00e      	beq.n	8104f0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104eec:	2301      	movs	r3, #1
 8104eee:	73fb      	strb	r3, [r7, #15]
    break;
 8104ef0:	e00b      	b.n	8104f0a <DMA_CheckFifoParam+0xe6>
        break;
 8104ef2:	bf00      	nop
 8104ef4:	e00a      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
        break;
 8104ef6:	bf00      	nop
 8104ef8:	e008      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
        break;
 8104efa:	bf00      	nop
 8104efc:	e006      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
        break;
 8104efe:	bf00      	nop
 8104f00:	e004      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
        break;
 8104f02:	bf00      	nop
 8104f04:	e002      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
        break;
 8104f06:	bf00      	nop
 8104f08:	e000      	b.n	8104f0c <DMA_CheckFifoParam+0xe8>
    break;
 8104f0a:	bf00      	nop
    }
  }

  return status;
 8104f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8104f0e:	4618      	mov	r0, r3
 8104f10:	3714      	adds	r7, #20
 8104f12:	46bd      	mov	sp, r7
 8104f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f18:	4770      	bx	lr
 8104f1a:	bf00      	nop

08104f1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104f1c:	b480      	push	{r7}
 8104f1e:	b085      	sub	sp, #20
 8104f20:	af00      	add	r7, sp, #0
 8104f22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	681b      	ldr	r3, [r3, #0]
 8104f28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	4a3a      	ldr	r2, [pc, #232]	; (8105018 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104f30:	4293      	cmp	r3, r2
 8104f32:	d022      	beq.n	8104f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	4a38      	ldr	r2, [pc, #224]	; (810501c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104f3a:	4293      	cmp	r3, r2
 8104f3c:	d01d      	beq.n	8104f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	4a37      	ldr	r2, [pc, #220]	; (8105020 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104f44:	4293      	cmp	r3, r2
 8104f46:	d018      	beq.n	8104f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	4a35      	ldr	r2, [pc, #212]	; (8105024 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104f4e:	4293      	cmp	r3, r2
 8104f50:	d013      	beq.n	8104f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	4a34      	ldr	r2, [pc, #208]	; (8105028 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104f58:	4293      	cmp	r3, r2
 8104f5a:	d00e      	beq.n	8104f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	4a32      	ldr	r2, [pc, #200]	; (810502c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104f62:	4293      	cmp	r3, r2
 8104f64:	d009      	beq.n	8104f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	681b      	ldr	r3, [r3, #0]
 8104f6a:	4a31      	ldr	r2, [pc, #196]	; (8105030 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104f6c:	4293      	cmp	r3, r2
 8104f6e:	d004      	beq.n	8104f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	4a2f      	ldr	r2, [pc, #188]	; (8105034 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104f76:	4293      	cmp	r3, r2
 8104f78:	d101      	bne.n	8104f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104f7a:	2301      	movs	r3, #1
 8104f7c:	e000      	b.n	8104f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104f7e:	2300      	movs	r3, #0
 8104f80:	2b00      	cmp	r3, #0
 8104f82:	d01c      	beq.n	8104fbe <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	b2db      	uxtb	r3, r3
 8104f8a:	3b08      	subs	r3, #8
 8104f8c:	4a2a      	ldr	r2, [pc, #168]	; (8105038 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8104f92:	091b      	lsrs	r3, r3, #4
 8104f94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104f96:	68fb      	ldr	r3, [r7, #12]
 8104f98:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104f9c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104fa0:	009b      	lsls	r3, r3, #2
 8104fa2:	461a      	mov	r2, r3
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	4a24      	ldr	r2, [pc, #144]	; (810503c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104fac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104fae:	68fb      	ldr	r3, [r7, #12]
 8104fb0:	f003 031f 	and.w	r3, r3, #31
 8104fb4:	2201      	movs	r2, #1
 8104fb6:	409a      	lsls	r2, r3
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104fbc:	e026      	b.n	810500c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	b2db      	uxtb	r3, r3
 8104fc4:	3b10      	subs	r3, #16
 8104fc6:	4a1e      	ldr	r2, [pc, #120]	; (8105040 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8104fcc:	091b      	lsrs	r3, r3, #4
 8104fce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104fd0:	68bb      	ldr	r3, [r7, #8]
 8104fd2:	4a1c      	ldr	r2, [pc, #112]	; (8105044 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104fd4:	4293      	cmp	r3, r2
 8104fd6:	d806      	bhi.n	8104fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104fd8:	68bb      	ldr	r3, [r7, #8]
 8104fda:	4a1b      	ldr	r2, [pc, #108]	; (8105048 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104fdc:	4293      	cmp	r3, r2
 8104fde:	d902      	bls.n	8104fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104fe0:	68fb      	ldr	r3, [r7, #12]
 8104fe2:	3308      	adds	r3, #8
 8104fe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104fe6:	68fb      	ldr	r3, [r7, #12]
 8104fe8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104fec:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104ff0:	009b      	lsls	r3, r3, #2
 8104ff2:	461a      	mov	r2, r3
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	4a14      	ldr	r2, [pc, #80]	; (810504c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104ffc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104ffe:	68fb      	ldr	r3, [r7, #12]
 8105000:	f003 031f 	and.w	r3, r3, #31
 8105004:	2201      	movs	r2, #1
 8105006:	409a      	lsls	r2, r3
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	669a      	str	r2, [r3, #104]	; 0x68
}
 810500c:	bf00      	nop
 810500e:	3714      	adds	r7, #20
 8105010:	46bd      	mov	sp, r7
 8105012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105016:	4770      	bx	lr
 8105018:	58025408 	.word	0x58025408
 810501c:	5802541c 	.word	0x5802541c
 8105020:	58025430 	.word	0x58025430
 8105024:	58025444 	.word	0x58025444
 8105028:	58025458 	.word	0x58025458
 810502c:	5802546c 	.word	0x5802546c
 8105030:	58025480 	.word	0x58025480
 8105034:	58025494 	.word	0x58025494
 8105038:	cccccccd 	.word	0xcccccccd
 810503c:	58025880 	.word	0x58025880
 8105040:	aaaaaaab 	.word	0xaaaaaaab
 8105044:	400204b8 	.word	0x400204b8
 8105048:	4002040f 	.word	0x4002040f
 810504c:	40020880 	.word	0x40020880

08105050 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8105050:	b480      	push	{r7}
 8105052:	b085      	sub	sp, #20
 8105054:	af00      	add	r7, sp, #0
 8105056:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8105058:	687b      	ldr	r3, [r7, #4]
 810505a:	685b      	ldr	r3, [r3, #4]
 810505c:	b2db      	uxtb	r3, r3
 810505e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8105060:	68fb      	ldr	r3, [r7, #12]
 8105062:	2b00      	cmp	r3, #0
 8105064:	d04a      	beq.n	81050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8105066:	68fb      	ldr	r3, [r7, #12]
 8105068:	2b08      	cmp	r3, #8
 810506a:	d847      	bhi.n	81050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	4a25      	ldr	r2, [pc, #148]	; (8105108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8105072:	4293      	cmp	r3, r2
 8105074:	d022      	beq.n	81050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	681b      	ldr	r3, [r3, #0]
 810507a:	4a24      	ldr	r2, [pc, #144]	; (810510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 810507c:	4293      	cmp	r3, r2
 810507e:	d01d      	beq.n	81050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	4a22      	ldr	r2, [pc, #136]	; (8105110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8105086:	4293      	cmp	r3, r2
 8105088:	d018      	beq.n	81050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	681b      	ldr	r3, [r3, #0]
 810508e:	4a21      	ldr	r2, [pc, #132]	; (8105114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8105090:	4293      	cmp	r3, r2
 8105092:	d013      	beq.n	81050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	681b      	ldr	r3, [r3, #0]
 8105098:	4a1f      	ldr	r2, [pc, #124]	; (8105118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810509a:	4293      	cmp	r3, r2
 810509c:	d00e      	beq.n	81050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	681b      	ldr	r3, [r3, #0]
 81050a2:	4a1e      	ldr	r2, [pc, #120]	; (810511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81050a4:	4293      	cmp	r3, r2
 81050a6:	d009      	beq.n	81050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	681b      	ldr	r3, [r3, #0]
 81050ac:	4a1c      	ldr	r2, [pc, #112]	; (8105120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81050ae:	4293      	cmp	r3, r2
 81050b0:	d004      	beq.n	81050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	4a1b      	ldr	r2, [pc, #108]	; (8105124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81050b8:	4293      	cmp	r3, r2
 81050ba:	d101      	bne.n	81050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81050bc:	2301      	movs	r3, #1
 81050be:	e000      	b.n	81050c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81050c0:	2300      	movs	r3, #0
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d00a      	beq.n	81050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81050c6:	68fa      	ldr	r2, [r7, #12]
 81050c8:	4b17      	ldr	r3, [pc, #92]	; (8105128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81050ca:	4413      	add	r3, r2
 81050cc:	009b      	lsls	r3, r3, #2
 81050ce:	461a      	mov	r2, r3
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81050d4:	687b      	ldr	r3, [r7, #4]
 81050d6:	4a15      	ldr	r2, [pc, #84]	; (810512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81050d8:	671a      	str	r2, [r3, #112]	; 0x70
 81050da:	e009      	b.n	81050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81050dc:	68fa      	ldr	r2, [r7, #12]
 81050de:	4b14      	ldr	r3, [pc, #80]	; (8105130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81050e0:	4413      	add	r3, r2
 81050e2:	009b      	lsls	r3, r3, #2
 81050e4:	461a      	mov	r2, r3
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81050ea:	687b      	ldr	r3, [r7, #4]
 81050ec:	4a11      	ldr	r2, [pc, #68]	; (8105134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81050ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81050f0:	68fb      	ldr	r3, [r7, #12]
 81050f2:	3b01      	subs	r3, #1
 81050f4:	2201      	movs	r2, #1
 81050f6:	409a      	lsls	r2, r3
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81050fc:	bf00      	nop
 81050fe:	3714      	adds	r7, #20
 8105100:	46bd      	mov	sp, r7
 8105102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105106:	4770      	bx	lr
 8105108:	58025408 	.word	0x58025408
 810510c:	5802541c 	.word	0x5802541c
 8105110:	58025430 	.word	0x58025430
 8105114:	58025444 	.word	0x58025444
 8105118:	58025458 	.word	0x58025458
 810511c:	5802546c 	.word	0x5802546c
 8105120:	58025480 	.word	0x58025480
 8105124:	58025494 	.word	0x58025494
 8105128:	1600963f 	.word	0x1600963f
 810512c:	58025940 	.word	0x58025940
 8105130:	1000823f 	.word	0x1000823f
 8105134:	40020940 	.word	0x40020940

08105138 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8105138:	b580      	push	{r7, lr}
 810513a:	b084      	sub	sp, #16
 810513c:	af00      	add	r7, sp, #0
 810513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	2b00      	cmp	r3, #0
 8105144:	d101      	bne.n	810514a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8105146:	2301      	movs	r3, #1
 8105148:	e0c8      	b.n	81052dc <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810514e:	2b00      	cmp	r3, #0
 8105150:	d102      	bne.n	8105158 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8105152:	6878      	ldr	r0, [r7, #4]
 8105154:	f7fc f96c 	bl	8101430 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	2223      	movs	r2, #35	; 0x23
 810515c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810515e:	4b61      	ldr	r3, [pc, #388]	; (81052e4 <HAL_ETH_Init+0x1ac>)
 8105160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105164:	4a5f      	ldr	r2, [pc, #380]	; (81052e4 <HAL_ETH_Init+0x1ac>)
 8105166:	f043 0302 	orr.w	r3, r3, #2
 810516a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810516e:	4b5d      	ldr	r3, [pc, #372]	; (81052e4 <HAL_ETH_Init+0x1ac>)
 8105170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105174:	f003 0302 	and.w	r3, r3, #2
 8105178:	60bb      	str	r3, [r7, #8]
 810517a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	7a1b      	ldrb	r3, [r3, #8]
 8105180:	2b00      	cmp	r3, #0
 8105182:	d103      	bne.n	810518c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8105184:	2000      	movs	r0, #0
 8105186:	f7fd f85b 	bl	8102240 <HAL_SYSCFG_ETHInterfaceSelect>
 810518a:	e003      	b.n	8105194 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 810518c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8105190:	f7fd f856 	bl	8102240 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810519c:	681a      	ldr	r2, [r3, #0]
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	681b      	ldr	r3, [r3, #0]
 81051a2:	f042 0201 	orr.w	r2, r2, #1
 81051a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81051aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81051ac:	f7fd f80e 	bl	81021cc <HAL_GetTick>
 81051b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81051b2:	e00f      	b.n	81051d4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 81051b4:	f7fd f80a 	bl	81021cc <HAL_GetTick>
 81051b8:	4602      	mov	r2, r0
 81051ba:	68fb      	ldr	r3, [r7, #12]
 81051bc:	1ad3      	subs	r3, r2, r3
 81051be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81051c2:	d907      	bls.n	81051d4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	2204      	movs	r2, #4
 81051c8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	22e0      	movs	r2, #224	; 0xe0
 81051ce:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 81051d0:	2301      	movs	r3, #1
 81051d2:	e083      	b.n	81052dc <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	f003 0301 	and.w	r3, r3, #1
 81051e2:	2b00      	cmp	r3, #0
 81051e4:	d1e6      	bne.n	81051b4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 81051e6:	6878      	ldr	r0, [r7, #4]
 81051e8:	f000 fac0 	bl	810576c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81051ec:	f002 fbea 	bl	81079c4 <HAL_RCC_GetHCLKFreq>
 81051f0:	4602      	mov	r2, r0
 81051f2:	4b3d      	ldr	r3, [pc, #244]	; (81052e8 <HAL_ETH_Init+0x1b0>)
 81051f4:	fba3 2302 	umull	r2, r3, r3, r2
 81051f8:	0c9a      	lsrs	r2, r3, #18
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	3a01      	subs	r2, #1
 8105200:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8105204:	6878      	ldr	r0, [r7, #4]
 8105206:	f000 fa13 	bl	8105630 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8105220:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8105224:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	695b      	ldr	r3, [r3, #20]
 810522a:	f003 0303 	and.w	r3, r3, #3
 810522e:	2b00      	cmp	r3, #0
 8105230:	d007      	beq.n	8105242 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	2201      	movs	r2, #1
 8105236:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	22e0      	movs	r2, #224	; 0xe0
 810523c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 810523e:	2301      	movs	r3, #1
 8105240:	e04c      	b.n	81052dc <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810524a:	3308      	adds	r3, #8
 810524c:	681b      	ldr	r3, [r3, #0]
 810524e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8105252:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8105256:	687a      	ldr	r2, [r7, #4]
 8105258:	6952      	ldr	r2, [r2, #20]
 810525a:	0052      	lsls	r2, r2, #1
 810525c:	6879      	ldr	r1, [r7, #4]
 810525e:	6809      	ldr	r1, [r1, #0]
 8105260:	431a      	orrs	r2, r3
 8105262:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8105266:	3308      	adds	r3, #8
 8105268:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810526a:	6878      	ldr	r0, [r7, #4]
 810526c:	f000 fad6 	bl	810581c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8105270:	6878      	ldr	r0, [r7, #4]
 8105272:	f000 fb1a 	bl	81058aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8105276:	687b      	ldr	r3, [r7, #4]
 8105278:	685b      	ldr	r3, [r3, #4]
 810527a:	3305      	adds	r3, #5
 810527c:	781b      	ldrb	r3, [r3, #0]
 810527e:	021a      	lsls	r2, r3, #8
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	685b      	ldr	r3, [r3, #4]
 8105284:	3304      	adds	r3, #4
 8105286:	781b      	ldrb	r3, [r3, #0]
 8105288:	4619      	mov	r1, r3
 810528a:	687b      	ldr	r3, [r7, #4]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	430a      	orrs	r2, r1
 8105290:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	685b      	ldr	r3, [r3, #4]
 8105298:	3303      	adds	r3, #3
 810529a:	781b      	ldrb	r3, [r3, #0]
 810529c:	061a      	lsls	r2, r3, #24
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	685b      	ldr	r3, [r3, #4]
 81052a2:	3302      	adds	r3, #2
 81052a4:	781b      	ldrb	r3, [r3, #0]
 81052a6:	041b      	lsls	r3, r3, #16
 81052a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	685b      	ldr	r3, [r3, #4]
 81052ae:	3301      	adds	r3, #1
 81052b0:	781b      	ldrb	r3, [r3, #0]
 81052b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81052b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	685b      	ldr	r3, [r3, #4]
 81052ba:	781b      	ldrb	r3, [r3, #0]
 81052bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81052c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81052c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	2200      	movs	r2, #0
 81052cc:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	2210      	movs	r2, #16
 81052d2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	2210      	movs	r2, #16
 81052d8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 81052da:	2300      	movs	r3, #0
}
 81052dc:	4618      	mov	r0, r3
 81052de:	3710      	adds	r7, #16
 81052e0:	46bd      	mov	sp, r7
 81052e2:	bd80      	pop	{r7, pc}
 81052e4:	58024400 	.word	0x58024400
 81052e8:	431bde83 	.word	0x431bde83

081052ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81052ec:	b480      	push	{r7}
 81052ee:	b085      	sub	sp, #20
 81052f0:	af00      	add	r7, sp, #0
 81052f2:	6078      	str	r0, [r7, #4]
 81052f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 81052f6:	683b      	ldr	r3, [r7, #0]
 81052f8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 81052fa:	683b      	ldr	r3, [r7, #0]
 81052fc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 81052fe:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8105300:	683b      	ldr	r3, [r7, #0]
 8105302:	791b      	ldrb	r3, [r3, #4]
 8105304:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8105306:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105308:	683b      	ldr	r3, [r7, #0]
 810530a:	7b1b      	ldrb	r3, [r3, #12]
 810530c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 810530e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8105310:	683b      	ldr	r3, [r7, #0]
 8105312:	7b5b      	ldrb	r3, [r3, #13]
 8105314:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105316:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105318:	683b      	ldr	r3, [r7, #0]
 810531a:	7b9b      	ldrb	r3, [r3, #14]
 810531c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 810531e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105320:	683b      	ldr	r3, [r7, #0]
 8105322:	7bdb      	ldrb	r3, [r3, #15]
 8105324:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105326:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8105328:	683a      	ldr	r2, [r7, #0]
 810532a:	7c12      	ldrb	r2, [r2, #16]
 810532c:	2a00      	cmp	r2, #0
 810532e:	d102      	bne.n	8105336 <ETH_SetMACConfig+0x4a>
 8105330:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8105334:	e000      	b.n	8105338 <ETH_SetMACConfig+0x4c>
 8105336:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105338:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810533a:	683a      	ldr	r2, [r7, #0]
 810533c:	7c52      	ldrb	r2, [r2, #17]
 810533e:	2a00      	cmp	r2, #0
 8105340:	d102      	bne.n	8105348 <ETH_SetMACConfig+0x5c>
 8105342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8105346:	e000      	b.n	810534a <ETH_SetMACConfig+0x5e>
 8105348:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810534a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 810534c:	683b      	ldr	r3, [r7, #0]
 810534e:	7c9b      	ldrb	r3, [r3, #18]
 8105350:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8105352:	431a      	orrs	r2, r3
                                macconf->Speed |
 8105354:	683b      	ldr	r3, [r7, #0]
 8105356:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8105358:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 810535a:	683b      	ldr	r3, [r7, #0]
 810535c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 810535e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8105360:	683b      	ldr	r3, [r7, #0]
 8105362:	7f1b      	ldrb	r3, [r3, #28]
 8105364:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8105366:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8105368:	683b      	ldr	r3, [r7, #0]
 810536a:	7f5b      	ldrb	r3, [r3, #29]
 810536c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 810536e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8105370:	683a      	ldr	r2, [r7, #0]
 8105372:	7f92      	ldrb	r2, [r2, #30]
 8105374:	2a00      	cmp	r2, #0
 8105376:	d102      	bne.n	810537e <ETH_SetMACConfig+0x92>
 8105378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810537c:	e000      	b.n	8105380 <ETH_SetMACConfig+0x94>
 810537e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8105380:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8105382:	683b      	ldr	r3, [r7, #0]
 8105384:	7fdb      	ldrb	r3, [r3, #31]
 8105386:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8105388:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 810538a:	683a      	ldr	r2, [r7, #0]
 810538c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8105390:	2a00      	cmp	r2, #0
 8105392:	d102      	bne.n	810539a <ETH_SetMACConfig+0xae>
 8105394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105398:	e000      	b.n	810539c <ETH_SetMACConfig+0xb0>
 810539a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 810539c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 810539e:	683b      	ldr	r3, [r7, #0]
 81053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 81053a2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 81053a4:	683b      	ldr	r3, [r7, #0]
 81053a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81053aa:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 81053ac:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 81053ae:	683b      	ldr	r3, [r7, #0]
 81053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 81053b2:	4313      	orrs	r3, r2
 81053b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	681a      	ldr	r2, [r3, #0]
 81053bc:	4b57      	ldr	r3, [pc, #348]	; (810551c <ETH_SetMACConfig+0x230>)
 81053be:	4013      	ands	r3, r2
 81053c0:	687a      	ldr	r2, [r7, #4]
 81053c2:	6812      	ldr	r2, [r2, #0]
 81053c4:	68f9      	ldr	r1, [r7, #12]
 81053c6:	430b      	orrs	r3, r1
 81053c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 81053ca:	683b      	ldr	r3, [r7, #0]
 81053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81053ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 81053d0:	683b      	ldr	r3, [r7, #0]
 81053d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81053d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 81053d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 81053da:	683b      	ldr	r3, [r7, #0]
 81053dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81053e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 81053e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 81053e4:	683b      	ldr	r3, [r7, #0]
 81053e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 81053ea:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 81053ec:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 81053ee:	683a      	ldr	r2, [r7, #0]
 81053f0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 81053f4:	2a00      	cmp	r2, #0
 81053f6:	d102      	bne.n	81053fe <ETH_SetMACConfig+0x112>
 81053f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81053fc:	e000      	b.n	8105400 <ETH_SetMACConfig+0x114>
 81053fe:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8105400:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8105402:	683b      	ldr	r3, [r7, #0]
 8105404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8105406:	4313      	orrs	r3, r2
 8105408:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	681b      	ldr	r3, [r3, #0]
 810540e:	685a      	ldr	r2, [r3, #4]
 8105410:	4b43      	ldr	r3, [pc, #268]	; (8105520 <ETH_SetMACConfig+0x234>)
 8105412:	4013      	ands	r3, r2
 8105414:	687a      	ldr	r2, [r7, #4]
 8105416:	6812      	ldr	r2, [r2, #0]
 8105418:	68f9      	ldr	r1, [r7, #12]
 810541a:	430b      	orrs	r3, r1
 810541c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810541e:	683b      	ldr	r3, [r7, #0]
 8105420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105424:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8105426:	683b      	ldr	r3, [r7, #0]
 8105428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810542a:	4313      	orrs	r3, r2
 810542c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	681b      	ldr	r3, [r3, #0]
 8105432:	68db      	ldr	r3, [r3, #12]
 8105434:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8105438:	f023 0301 	bic.w	r3, r3, #1
 810543c:	687a      	ldr	r2, [r7, #4]
 810543e:	6812      	ldr	r2, [r2, #0]
 8105440:	68f9      	ldr	r1, [r7, #12]
 8105442:	430b      	orrs	r3, r1
 8105444:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105446:	683b      	ldr	r3, [r7, #0]
 8105448:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 810544c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810544e:	683b      	ldr	r3, [r7, #0]
 8105450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105452:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8105454:	683a      	ldr	r2, [r7, #0]
 8105456:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 810545a:	2a00      	cmp	r2, #0
 810545c:	d101      	bne.n	8105462 <ETH_SetMACConfig+0x176>
 810545e:	2280      	movs	r2, #128	; 0x80
 8105460:	e000      	b.n	8105464 <ETH_SetMACConfig+0x178>
 8105462:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8105464:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8105466:	683b      	ldr	r3, [r7, #0]
 8105468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810546a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810546c:	4313      	orrs	r3, r2
 810546e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	681b      	ldr	r3, [r3, #0]
 8105474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105476:	f64f 730d 	movw	r3, #65293	; 0xff0d
 810547a:	4013      	ands	r3, r2
 810547c:	687a      	ldr	r2, [r7, #4]
 810547e:	6812      	ldr	r2, [r2, #0]
 8105480:	68f9      	ldr	r1, [r7, #12]
 8105482:	430b      	orrs	r3, r1
 8105484:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8105486:	683b      	ldr	r3, [r7, #0]
 8105488:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 810548c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810548e:	683b      	ldr	r3, [r7, #0]
 8105490:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8105494:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8105496:	4313      	orrs	r3, r2
 8105498:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	681b      	ldr	r3, [r3, #0]
 810549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81054a2:	f023 0103 	bic.w	r1, r3, #3
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	681b      	ldr	r3, [r3, #0]
 81054aa:	68fa      	ldr	r2, [r7, #12]
 81054ac:	430a      	orrs	r2, r1
 81054ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 81054ba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 81054be:	683b      	ldr	r3, [r7, #0]
 81054c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	681b      	ldr	r3, [r3, #0]
 81054c6:	430a      	orrs	r2, r1
 81054c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81054cc:	683b      	ldr	r3, [r7, #0]
 81054ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81054d0:	683a      	ldr	r2, [r7, #0]
 81054d2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 81054d6:	2a00      	cmp	r2, #0
 81054d8:	d101      	bne.n	81054de <ETH_SetMACConfig+0x1f2>
 81054da:	2240      	movs	r2, #64	; 0x40
 81054dc:	e000      	b.n	81054e0 <ETH_SetMACConfig+0x1f4>
 81054de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81054e0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81054e2:	683b      	ldr	r3, [r7, #0]
 81054e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 81054e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81054ea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81054ec:	683b      	ldr	r3, [r7, #0]
 81054ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 81054f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81054f4:	4313      	orrs	r3, r2
 81054f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	681b      	ldr	r3, [r3, #0]
 81054fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8105500:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	681b      	ldr	r3, [r3, #0]
 8105508:	68fa      	ldr	r2, [r7, #12]
 810550a:	430a      	orrs	r2, r1
 810550c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8105510:	bf00      	nop
 8105512:	3714      	adds	r7, #20
 8105514:	46bd      	mov	sp, r7
 8105516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810551a:	4770      	bx	lr
 810551c:	00048083 	.word	0x00048083
 8105520:	c0f88000 	.word	0xc0f88000

08105524 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8105524:	b480      	push	{r7}
 8105526:	b085      	sub	sp, #20
 8105528:	af00      	add	r7, sp, #0
 810552a:	6078      	str	r0, [r7, #4]
 810552c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	681b      	ldr	r3, [r3, #0]
 8105532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 810553c:	f023 0302 	bic.w	r3, r3, #2
 8105540:	683a      	ldr	r2, [r7, #0]
 8105542:	6812      	ldr	r2, [r2, #0]
 8105544:	6879      	ldr	r1, [r7, #4]
 8105546:	6809      	ldr	r1, [r1, #0]
 8105548:	431a      	orrs	r2, r3
 810554a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 810554e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105550:	683b      	ldr	r3, [r7, #0]
 8105552:	791b      	ldrb	r3, [r3, #4]
 8105554:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8105556:	683b      	ldr	r3, [r7, #0]
 8105558:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810555a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810555c:	683b      	ldr	r3, [r7, #0]
 810555e:	7b1b      	ldrb	r3, [r3, #12]
 8105560:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105562:	4313      	orrs	r3, r2
 8105564:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810556e:	3304      	adds	r3, #4
 8105570:	681b      	ldr	r3, [r3, #0]
 8105572:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8105576:	f023 0301 	bic.w	r3, r3, #1
 810557a:	687a      	ldr	r2, [r7, #4]
 810557c:	6811      	ldr	r1, [r2, #0]
 810557e:	68fa      	ldr	r2, [r7, #12]
 8105580:	431a      	orrs	r2, r3
 8105582:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8105586:	3304      	adds	r3, #4
 8105588:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810558a:	683b      	ldr	r3, [r7, #0]
 810558c:	7b5b      	ldrb	r3, [r3, #13]
 810558e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8105590:	683b      	ldr	r3, [r7, #0]
 8105592:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105594:	4313      	orrs	r3, r2
 8105596:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81055a0:	681a      	ldr	r2, [r3, #0]
 81055a2:	4b21      	ldr	r3, [pc, #132]	; (8105628 <ETH_SetDMAConfig+0x104>)
 81055a4:	4013      	ands	r3, r2
 81055a6:	687a      	ldr	r2, [r7, #4]
 81055a8:	6811      	ldr	r1, [r2, #0]
 81055aa:	68fa      	ldr	r2, [r7, #12]
 81055ac:	431a      	orrs	r2, r3
 81055ae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81055b2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81055b4:	683b      	ldr	r3, [r7, #0]
 81055b6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 81055b8:	683b      	ldr	r3, [r7, #0]
 81055ba:	7d1b      	ldrb	r3, [r3, #20]
 81055bc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81055be:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 81055c0:	683b      	ldr	r3, [r7, #0]
 81055c2:	7f5b      	ldrb	r3, [r3, #29]
 81055c4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81055c6:	4313      	orrs	r3, r2
 81055c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81055d2:	3304      	adds	r3, #4
 81055d4:	681a      	ldr	r2, [r3, #0]
 81055d6:	4b15      	ldr	r3, [pc, #84]	; (810562c <ETH_SetDMAConfig+0x108>)
 81055d8:	4013      	ands	r3, r2
 81055da:	687a      	ldr	r2, [r7, #4]
 81055dc:	6811      	ldr	r1, [r2, #0]
 81055de:	68fa      	ldr	r2, [r7, #12]
 81055e0:	431a      	orrs	r2, r3
 81055e2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81055e6:	3304      	adds	r3, #4
 81055e8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81055ea:	683b      	ldr	r3, [r7, #0]
 81055ec:	7f1b      	ldrb	r3, [r3, #28]
 81055ee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81055f0:	683b      	ldr	r3, [r7, #0]
 81055f2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81055f4:	4313      	orrs	r3, r2
 81055f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	681b      	ldr	r3, [r3, #0]
 81055fc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8105600:	3308      	adds	r3, #8
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8105608:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 810560c:	687a      	ldr	r2, [r7, #4]
 810560e:	6811      	ldr	r1, [r2, #0]
 8105610:	68fa      	ldr	r2, [r7, #12]
 8105612:	431a      	orrs	r2, r3
 8105614:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8105618:	3308      	adds	r3, #8
 810561a:	601a      	str	r2, [r3, #0]
}
 810561c:	bf00      	nop
 810561e:	3714      	adds	r7, #20
 8105620:	46bd      	mov	sp, r7
 8105622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105626:	4770      	bx	lr
 8105628:	fffec000 	.word	0xfffec000
 810562c:	ffc0efef 	.word	0xffc0efef

08105630 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8105630:	b580      	push	{r7, lr}
 8105632:	b0a4      	sub	sp, #144	; 0x90
 8105634:	af00      	add	r7, sp, #0
 8105636:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8105638:	2301      	movs	r3, #1
 810563a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810563e:	2300      	movs	r3, #0
 8105640:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8105642:	2300      	movs	r3, #0
 8105644:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8105648:	2300      	movs	r3, #0
 810564a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810564e:	2301      	movs	r3, #1
 8105650:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8105654:	2301      	movs	r3, #1
 8105656:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810565a:	2301      	movs	r3, #1
 810565c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8105660:	2300      	movs	r3, #0
 8105662:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8105666:	2301      	movs	r3, #1
 8105668:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810566c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8105670:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8105672:	2300      	movs	r3, #0
 8105674:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8105678:	2300      	movs	r3, #0
 810567a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810567c:	2300      	movs	r3, #0
 810567e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8105682:	2300      	movs	r3, #0
 8105684:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8105688:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 810568c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810568e:	2300      	movs	r3, #0
 8105690:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8105694:	2300      	movs	r3, #0
 8105696:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8105698:	2301      	movs	r3, #1
 810569a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810569e:	2300      	movs	r3, #0
 81056a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81056a4:	2300      	movs	r3, #0
 81056a6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81056aa:	2300      	movs	r3, #0
 81056ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 81056ae:	2300      	movs	r3, #0
 81056b0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81056b2:	2300      	movs	r3, #0
 81056b4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81056b6:	2300      	movs	r3, #0
 81056b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81056bc:	2300      	movs	r3, #0
 81056be:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81056c2:	2301      	movs	r3, #1
 81056c4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81056c8:	2320      	movs	r3, #32
 81056ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81056ce:	2301      	movs	r3, #1
 81056d0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81056d4:	2300      	movs	r3, #0
 81056d6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81056da:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 81056de:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81056e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81056e4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81056e6:	2300      	movs	r3, #0
 81056e8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81056ec:	2302      	movs	r3, #2
 81056ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81056f2:	2300      	movs	r3, #0
 81056f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81056f8:	2300      	movs	r3, #0
 81056fa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81056fe:	2300      	movs	r3, #0
 8105700:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8105704:	2301      	movs	r3, #1
 8105706:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810570a:	2300      	movs	r3, #0
 810570c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810570e:	2301      	movs	r3, #1
 8105710:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8105714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8105718:	4619      	mov	r1, r3
 810571a:	6878      	ldr	r0, [r7, #4]
 810571c:	f7ff fde6 	bl	81052ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8105720:	2301      	movs	r3, #1
 8105722:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8105724:	2301      	movs	r3, #1
 8105726:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8105728:	2300      	movs	r3, #0
 810572a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810572c:	2300      	movs	r3, #0
 810572e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8105732:	2300      	movs	r3, #0
 8105734:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8105736:	2300      	movs	r3, #0
 8105738:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810573a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810573e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8105740:	2300      	movs	r3, #0
 8105742:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8105744:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8105748:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810574a:	2300      	movs	r3, #0
 810574c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8105750:	f44f 7306 	mov.w	r3, #536	; 0x218
 8105754:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8105756:	f107 0308 	add.w	r3, r7, #8
 810575a:	4619      	mov	r1, r3
 810575c:	6878      	ldr	r0, [r7, #4]
 810575e:	f7ff fee1 	bl	8105524 <ETH_SetDMAConfig>
}
 8105762:	bf00      	nop
 8105764:	3790      	adds	r7, #144	; 0x90
 8105766:	46bd      	mov	sp, r7
 8105768:	bd80      	pop	{r7, pc}
	...

0810576c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 810576c:	b580      	push	{r7, lr}
 810576e:	b084      	sub	sp, #16
 8105770:	af00      	add	r7, sp, #0
 8105772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	681b      	ldr	r3, [r3, #0]
 8105778:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 810577c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105784:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8105786:	f002 f91d 	bl	81079c4 <HAL_RCC_GetHCLKFreq>
 810578a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 810578c:	68bb      	ldr	r3, [r7, #8]
 810578e:	4a1e      	ldr	r2, [pc, #120]	; (8105808 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8105790:	4293      	cmp	r3, r2
 8105792:	d908      	bls.n	81057a6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8105794:	68bb      	ldr	r3, [r7, #8]
 8105796:	4a1d      	ldr	r2, [pc, #116]	; (810580c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8105798:	4293      	cmp	r3, r2
 810579a:	d804      	bhi.n	81057a6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810579c:	68fb      	ldr	r3, [r7, #12]
 810579e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81057a2:	60fb      	str	r3, [r7, #12]
 81057a4:	e027      	b.n	81057f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 81057a6:	68bb      	ldr	r3, [r7, #8]
 81057a8:	4a18      	ldr	r2, [pc, #96]	; (810580c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 81057aa:	4293      	cmp	r3, r2
 81057ac:	d908      	bls.n	81057c0 <ETH_MAC_MDIO_ClkConfig+0x54>
 81057ae:	68bb      	ldr	r3, [r7, #8]
 81057b0:	4a17      	ldr	r2, [pc, #92]	; (8105810 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 81057b2:	4293      	cmp	r3, r2
 81057b4:	d804      	bhi.n	81057c0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 81057b6:	68fb      	ldr	r3, [r7, #12]
 81057b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 81057bc:	60fb      	str	r3, [r7, #12]
 81057be:	e01a      	b.n	81057f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 81057c0:	68bb      	ldr	r3, [r7, #8]
 81057c2:	4a13      	ldr	r2, [pc, #76]	; (8105810 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 81057c4:	4293      	cmp	r3, r2
 81057c6:	d903      	bls.n	81057d0 <ETH_MAC_MDIO_ClkConfig+0x64>
 81057c8:	68bb      	ldr	r3, [r7, #8]
 81057ca:	4a12      	ldr	r2, [pc, #72]	; (8105814 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 81057cc:	4293      	cmp	r3, r2
 81057ce:	d911      	bls.n	81057f4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 81057d0:	68bb      	ldr	r3, [r7, #8]
 81057d2:	4a10      	ldr	r2, [pc, #64]	; (8105814 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 81057d4:	4293      	cmp	r3, r2
 81057d6:	d908      	bls.n	81057ea <ETH_MAC_MDIO_ClkConfig+0x7e>
 81057d8:	68bb      	ldr	r3, [r7, #8]
 81057da:	4a0f      	ldr	r2, [pc, #60]	; (8105818 <ETH_MAC_MDIO_ClkConfig+0xac>)
 81057dc:	4293      	cmp	r3, r2
 81057de:	d804      	bhi.n	81057ea <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 81057e0:	68fb      	ldr	r3, [r7, #12]
 81057e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81057e6:	60fb      	str	r3, [r7, #12]
 81057e8:	e005      	b.n	81057f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 81057ea:	68fb      	ldr	r3, [r7, #12]
 81057ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81057f0:	60fb      	str	r3, [r7, #12]
 81057f2:	e000      	b.n	81057f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 81057f4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	681b      	ldr	r3, [r3, #0]
 81057fa:	68fa      	ldr	r2, [r7, #12]
 81057fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8105800:	bf00      	nop
 8105802:	3710      	adds	r7, #16
 8105804:	46bd      	mov	sp, r7
 8105806:	bd80      	pop	{r7, pc}
 8105808:	01312cff 	.word	0x01312cff
 810580c:	02160ebf 	.word	0x02160ebf
 8105810:	039386ff 	.word	0x039386ff
 8105814:	05f5e0ff 	.word	0x05f5e0ff
 8105818:	08f0d17f 	.word	0x08f0d17f

0810581c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810581c:	b480      	push	{r7}
 810581e:	b085      	sub	sp, #20
 8105820:	af00      	add	r7, sp, #0
 8105822:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105824:	2300      	movs	r3, #0
 8105826:	60fb      	str	r3, [r7, #12]
 8105828:	e01d      	b.n	8105866 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	68d9      	ldr	r1, [r3, #12]
 810582e:	68fa      	ldr	r2, [r7, #12]
 8105830:	4613      	mov	r3, r2
 8105832:	005b      	lsls	r3, r3, #1
 8105834:	4413      	add	r3, r2
 8105836:	00db      	lsls	r3, r3, #3
 8105838:	440b      	add	r3, r1
 810583a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 810583c:	68bb      	ldr	r3, [r7, #8]
 810583e:	2200      	movs	r2, #0
 8105840:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8105842:	68bb      	ldr	r3, [r7, #8]
 8105844:	2200      	movs	r2, #0
 8105846:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8105848:	68bb      	ldr	r3, [r7, #8]
 810584a:	2200      	movs	r2, #0
 810584c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 810584e:	68bb      	ldr	r3, [r7, #8]
 8105850:	2200      	movs	r2, #0
 8105852:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8105854:	68b9      	ldr	r1, [r7, #8]
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	68fa      	ldr	r2, [r7, #12]
 810585a:	3206      	adds	r2, #6
 810585c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105860:	68fb      	ldr	r3, [r7, #12]
 8105862:	3301      	adds	r3, #1
 8105864:	60fb      	str	r3, [r7, #12]
 8105866:	68fb      	ldr	r3, [r7, #12]
 8105868:	2b03      	cmp	r3, #3
 810586a:	d9de      	bls.n	810582a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	2200      	movs	r2, #0
 8105870:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8105872:	687b      	ldr	r3, [r7, #4]
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810587a:	330c      	adds	r3, #12
 810587c:	2203      	movs	r2, #3
 810587e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	68da      	ldr	r2, [r3, #12]
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810588c:	3314      	adds	r3, #20
 810588e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8105890:	687b      	ldr	r3, [r7, #4]
 8105892:	68da      	ldr	r2, [r3, #12]
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810589c:	601a      	str	r2, [r3, #0]
}
 810589e:	bf00      	nop
 81058a0:	3714      	adds	r7, #20
 81058a2:	46bd      	mov	sp, r7
 81058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058a8:	4770      	bx	lr

081058aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81058aa:	b480      	push	{r7}
 81058ac:	b085      	sub	sp, #20
 81058ae:	af00      	add	r7, sp, #0
 81058b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81058b2:	2300      	movs	r3, #0
 81058b4:	60fb      	str	r3, [r7, #12]
 81058b6:	e024      	b.n	8105902 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	6919      	ldr	r1, [r3, #16]
 81058bc:	68fa      	ldr	r2, [r7, #12]
 81058be:	4613      	mov	r3, r2
 81058c0:	005b      	lsls	r3, r3, #1
 81058c2:	4413      	add	r3, r2
 81058c4:	00db      	lsls	r3, r3, #3
 81058c6:	440b      	add	r3, r1
 81058c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 81058ca:	68bb      	ldr	r3, [r7, #8]
 81058cc:	2200      	movs	r2, #0
 81058ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 81058d0:	68bb      	ldr	r3, [r7, #8]
 81058d2:	2200      	movs	r2, #0
 81058d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 81058d6:	68bb      	ldr	r3, [r7, #8]
 81058d8:	2200      	movs	r2, #0
 81058da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 81058dc:	68bb      	ldr	r3, [r7, #8]
 81058de:	2200      	movs	r2, #0
 81058e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 81058e2:	68bb      	ldr	r3, [r7, #8]
 81058e4:	2200      	movs	r2, #0
 81058e6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 81058e8:	68bb      	ldr	r3, [r7, #8]
 81058ea:	2200      	movs	r2, #0
 81058ec:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81058ee:	68ba      	ldr	r2, [r7, #8]
 81058f0:	6879      	ldr	r1, [r7, #4]
 81058f2:	68fb      	ldr	r3, [r7, #12]
 81058f4:	330a      	adds	r3, #10
 81058f6:	009b      	lsls	r3, r3, #2
 81058f8:	440b      	add	r3, r1
 81058fa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81058fc:	68fb      	ldr	r3, [r7, #12]
 81058fe:	3301      	adds	r3, #1
 8105900:	60fb      	str	r3, [r7, #12]
 8105902:	68fb      	ldr	r3, [r7, #12]
 8105904:	2b03      	cmp	r3, #3
 8105906:	d9d7      	bls.n	81058b8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	2200      	movs	r2, #0
 810590c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 810590e:	687b      	ldr	r3, [r7, #4]
 8105910:	2200      	movs	r2, #0
 8105912:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	2200      	movs	r2, #0
 8105918:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	2200      	movs	r2, #0
 810591e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	2200      	movs	r2, #0
 8105924:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810592e:	3310      	adds	r3, #16
 8105930:	2203      	movs	r2, #3
 8105932:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	691a      	ldr	r2, [r3, #16]
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8105940:	331c      	adds	r3, #28
 8105942:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	691b      	ldr	r3, [r3, #16]
 8105948:	f103 0248 	add.w	r2, r3, #72	; 0x48
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	681b      	ldr	r3, [r3, #0]
 8105950:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105954:	3308      	adds	r3, #8
 8105956:	601a      	str	r2, [r3, #0]
}
 8105958:	bf00      	nop
 810595a:	3714      	adds	r7, #20
 810595c:	46bd      	mov	sp, r7
 810595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105962:	4770      	bx	lr

08105964 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8105964:	b580      	push	{r7, lr}
 8105966:	b098      	sub	sp, #96	; 0x60
 8105968:	af00      	add	r7, sp, #0
 810596a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 810596c:	4a84      	ldr	r2, [pc, #528]	; (8105b80 <HAL_FDCAN_Init+0x21c>)
 810596e:	f107 030c 	add.w	r3, r7, #12
 8105972:	4611      	mov	r1, r2
 8105974:	224c      	movs	r2, #76	; 0x4c
 8105976:	4618      	mov	r0, r3
 8105978:	f005 fe3c 	bl	810b5f4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	2b00      	cmp	r3, #0
 8105980:	d101      	bne.n	8105986 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8105982:	2301      	movs	r3, #1
 8105984:	e1ca      	b.n	8105d1c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	4a7e      	ldr	r2, [pc, #504]	; (8105b84 <HAL_FDCAN_Init+0x220>)
 810598c:	4293      	cmp	r3, r2
 810598e:	d106      	bne.n	810599e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	681b      	ldr	r3, [r3, #0]
 8105994:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8105998:	461a      	mov	r2, r3
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 81059a4:	b2db      	uxtb	r3, r3
 81059a6:	2b00      	cmp	r3, #0
 81059a8:	d106      	bne.n	81059b8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	2200      	movs	r2, #0
 81059ae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 81059b2:	6878      	ldr	r0, [r7, #4]
 81059b4:	f7fb fe6c 	bl	8101690 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	681b      	ldr	r3, [r3, #0]
 81059bc:	699a      	ldr	r2, [r3, #24]
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	f022 0210 	bic.w	r2, r2, #16
 81059c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81059c8:	f7fc fc00 	bl	81021cc <HAL_GetTick>
 81059cc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81059ce:	e014      	b.n	81059fa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 81059d0:	f7fc fbfc 	bl	81021cc <HAL_GetTick>
 81059d4:	4602      	mov	r2, r0
 81059d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81059d8:	1ad3      	subs	r3, r2, r3
 81059da:	2b0a      	cmp	r3, #10
 81059dc:	d90d      	bls.n	81059fa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81059e4:	f043 0201 	orr.w	r2, r3, #1
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	2203      	movs	r2, #3
 81059f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 81059f6:	2301      	movs	r3, #1
 81059f8:	e190      	b.n	8105d1c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	699b      	ldr	r3, [r3, #24]
 8105a00:	f003 0308 	and.w	r3, r3, #8
 8105a04:	2b08      	cmp	r3, #8
 8105a06:	d0e3      	beq.n	81059d0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	681b      	ldr	r3, [r3, #0]
 8105a0c:	699a      	ldr	r2, [r3, #24]
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	f042 0201 	orr.w	r2, r2, #1
 8105a16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8105a18:	f7fc fbd8 	bl	81021cc <HAL_GetTick>
 8105a1c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8105a1e:	e014      	b.n	8105a4a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8105a20:	f7fc fbd4 	bl	81021cc <HAL_GetTick>
 8105a24:	4602      	mov	r2, r0
 8105a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8105a28:	1ad3      	subs	r3, r2, r3
 8105a2a:	2b0a      	cmp	r3, #10
 8105a2c:	d90d      	bls.n	8105a4a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105a34:	f043 0201 	orr.w	r2, r3, #1
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	2203      	movs	r2, #3
 8105a42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8105a46:	2301      	movs	r3, #1
 8105a48:	e168      	b.n	8105d1c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	699b      	ldr	r3, [r3, #24]
 8105a50:	f003 0301 	and.w	r3, r3, #1
 8105a54:	2b00      	cmp	r3, #0
 8105a56:	d0e3      	beq.n	8105a20 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	681b      	ldr	r3, [r3, #0]
 8105a5c:	699a      	ldr	r2, [r3, #24]
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	f042 0202 	orr.w	r2, r2, #2
 8105a66:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	7c1b      	ldrb	r3, [r3, #16]
 8105a6c:	2b01      	cmp	r3, #1
 8105a6e:	d108      	bne.n	8105a82 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	699a      	ldr	r2, [r3, #24]
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8105a7e:	619a      	str	r2, [r3, #24]
 8105a80:	e007      	b.n	8105a92 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	699a      	ldr	r2, [r3, #24]
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105a90:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	7c5b      	ldrb	r3, [r3, #17]
 8105a96:	2b01      	cmp	r3, #1
 8105a98:	d108      	bne.n	8105aac <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	699a      	ldr	r2, [r3, #24]
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	681b      	ldr	r3, [r3, #0]
 8105aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105aa8:	619a      	str	r2, [r3, #24]
 8105aaa:	e007      	b.n	8105abc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	681b      	ldr	r3, [r3, #0]
 8105ab0:	699a      	ldr	r2, [r3, #24]
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105aba:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	7c9b      	ldrb	r3, [r3, #18]
 8105ac0:	2b01      	cmp	r3, #1
 8105ac2:	d108      	bne.n	8105ad6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	699a      	ldr	r2, [r3, #24]
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8105ad2:	619a      	str	r2, [r3, #24]
 8105ad4:	e007      	b.n	8105ae6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	699a      	ldr	r2, [r3, #24]
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8105ae4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	699b      	ldr	r3, [r3, #24]
 8105aec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	689a      	ldr	r2, [r3, #8]
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	681b      	ldr	r3, [r3, #0]
 8105af8:	430a      	orrs	r2, r1
 8105afa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	699a      	ldr	r2, [r3, #24]
 8105b02:	687b      	ldr	r3, [r7, #4]
 8105b04:	681b      	ldr	r3, [r3, #0]
 8105b06:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8105b0a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	691a      	ldr	r2, [r3, #16]
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	f022 0210 	bic.w	r2, r2, #16
 8105b1a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	68db      	ldr	r3, [r3, #12]
 8105b20:	2b01      	cmp	r3, #1
 8105b22:	d108      	bne.n	8105b36 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	699a      	ldr	r2, [r3, #24]
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	f042 0204 	orr.w	r2, r2, #4
 8105b32:	619a      	str	r2, [r3, #24]
 8105b34:	e030      	b.n	8105b98 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	68db      	ldr	r3, [r3, #12]
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d02c      	beq.n	8105b98 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	68db      	ldr	r3, [r3, #12]
 8105b42:	2b02      	cmp	r3, #2
 8105b44:	d020      	beq.n	8105b88 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	699a      	ldr	r2, [r3, #24]
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8105b54:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	691a      	ldr	r2, [r3, #16]
 8105b5c:	687b      	ldr	r3, [r7, #4]
 8105b5e:	681b      	ldr	r3, [r3, #0]
 8105b60:	f042 0210 	orr.w	r2, r2, #16
 8105b64:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	68db      	ldr	r3, [r3, #12]
 8105b6a:	2b03      	cmp	r3, #3
 8105b6c:	d114      	bne.n	8105b98 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	699a      	ldr	r2, [r3, #24]
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	f042 0220 	orr.w	r2, r2, #32
 8105b7c:	619a      	str	r2, [r3, #24]
 8105b7e:	e00b      	b.n	8105b98 <HAL_FDCAN_Init+0x234>
 8105b80:	0810b634 	.word	0x0810b634
 8105b84:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	699a      	ldr	r2, [r3, #24]
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	681b      	ldr	r3, [r3, #0]
 8105b92:	f042 0220 	orr.w	r2, r2, #32
 8105b96:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	699b      	ldr	r3, [r3, #24]
 8105b9c:	3b01      	subs	r3, #1
 8105b9e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	69db      	ldr	r3, [r3, #28]
 8105ba4:	3b01      	subs	r3, #1
 8105ba6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8105ba8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	6a1b      	ldr	r3, [r3, #32]
 8105bae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8105bb0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	695b      	ldr	r3, [r3, #20]
 8105bb8:	3b01      	subs	r3, #1
 8105bba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8105bc0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8105bc2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	689b      	ldr	r3, [r3, #8]
 8105bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105bcc:	d115      	bne.n	8105bfa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bd2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bd8:	3b01      	subs	r3, #1
 8105bda:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8105bdc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8105bde:	687b      	ldr	r3, [r7, #4]
 8105be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105be2:	3b01      	subs	r3, #1
 8105be4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8105be6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105bee:	3b01      	subs	r3, #1
 8105bf0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8105bf6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8105bf8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105bfe:	2b00      	cmp	r3, #0
 8105c00:	d00a      	beq.n	8105c18 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8105c02:	687b      	ldr	r3, [r7, #4]
 8105c04:	681b      	ldr	r3, [r3, #0]
 8105c06:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	430a      	orrs	r2, r1
 8105c14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105c20:	4413      	add	r3, r2
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d012      	beq.n	8105c4c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8105c26:	687b      	ldr	r3, [r7, #4]
 8105c28:	681b      	ldr	r3, [r3, #0]
 8105c2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8105c2e:	f023 0107 	bic.w	r1, r3, #7
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105c36:	009b      	lsls	r3, r3, #2
 8105c38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8105c3c:	4413      	add	r3, r2
 8105c3e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	681b      	ldr	r3, [r3, #0]
 8105c46:	430a      	orrs	r2, r1
 8105c48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c50:	2b00      	cmp	r3, #0
 8105c52:	d012      	beq.n	8105c7a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105c5c:	f023 0107 	bic.w	r1, r3, #7
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c64:	009b      	lsls	r3, r3, #2
 8105c66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8105c6a:	4413      	add	r3, r2
 8105c6c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	430a      	orrs	r2, r1
 8105c76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105c7e:	2b00      	cmp	r3, #0
 8105c80:	d013      	beq.n	8105caa <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105c8a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105c92:	009b      	lsls	r3, r3, #2
 8105c94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8105c98:	4413      	add	r3, r2
 8105c9a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8105c9e:	011a      	lsls	r2, r3, #4
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	681b      	ldr	r3, [r3, #0]
 8105ca4:	430a      	orrs	r2, r1
 8105ca6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105cae:	2b00      	cmp	r3, #0
 8105cb0:	d013      	beq.n	8105cda <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105cba:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105cc2:	009b      	lsls	r3, r3, #2
 8105cc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8105cc8:	4413      	add	r3, r2
 8105cca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8105cce:	021a      	lsls	r2, r3, #8
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	430a      	orrs	r2, r1
 8105cd6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	681b      	ldr	r3, [r3, #0]
 8105cde:	4a11      	ldr	r2, [pc, #68]	; (8105d24 <HAL_FDCAN_Init+0x3c0>)
 8105ce0:	4293      	cmp	r3, r2
 8105ce2:	d107      	bne.n	8105cf4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	685b      	ldr	r3, [r3, #4]
 8105ce8:	689a      	ldr	r2, [r3, #8]
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	685b      	ldr	r3, [r3, #4]
 8105cee:	f022 0203 	bic.w	r2, r2, #3
 8105cf2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	2200      	movs	r2, #0
 8105cf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	2200      	movs	r2, #0
 8105d00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	2201      	movs	r2, #1
 8105d08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8105d0c:	6878      	ldr	r0, [r7, #4]
 8105d0e:	f000 f80b 	bl	8105d28 <FDCAN_CalcultateRamBlockAddresses>
 8105d12:	4603      	mov	r3, r0
 8105d14:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8105d18:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8105d1c:	4618      	mov	r0, r3
 8105d1e:	3760      	adds	r7, #96	; 0x60
 8105d20:	46bd      	mov	sp, r7
 8105d22:	bd80      	pop	{r7, pc}
 8105d24:	4000a000 	.word	0x4000a000

08105d28 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8105d28:	b480      	push	{r7}
 8105d2a:	b085      	sub	sp, #20
 8105d2c:	af00      	add	r7, sp, #0
 8105d2e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105d34:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	681b      	ldr	r3, [r3, #0]
 8105d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105d42:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105d46:	68ba      	ldr	r2, [r7, #8]
 8105d48:	0091      	lsls	r1, r2, #2
 8105d4a:	687a      	ldr	r2, [r7, #4]
 8105d4c:	6812      	ldr	r2, [r2, #0]
 8105d4e:	430b      	orrs	r3, r1
 8105d50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d5c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8105d60:	687b      	ldr	r3, [r7, #4]
 8105d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d64:	041a      	lsls	r2, r3, #16
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	430a      	orrs	r2, r1
 8105d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d74:	68ba      	ldr	r2, [r7, #8]
 8105d76:	4413      	add	r3, r2
 8105d78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	681b      	ldr	r3, [r3, #0]
 8105d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105d86:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105d8a:	68ba      	ldr	r2, [r7, #8]
 8105d8c:	0091      	lsls	r1, r2, #2
 8105d8e:	687a      	ldr	r2, [r7, #4]
 8105d90:	6812      	ldr	r2, [r2, #0]
 8105d92:	430b      	orrs	r3, r1
 8105d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8105d98:	687b      	ldr	r3, [r7, #4]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105da0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105da8:	041a      	lsls	r2, r3, #16
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	430a      	orrs	r2, r1
 8105db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105db8:	005b      	lsls	r3, r3, #1
 8105dba:	68ba      	ldr	r2, [r7, #8]
 8105dbc:	4413      	add	r3, r2
 8105dbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	681b      	ldr	r3, [r3, #0]
 8105dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105dcc:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105dd0:	68ba      	ldr	r2, [r7, #8]
 8105dd2:	0091      	lsls	r1, r2, #2
 8105dd4:	687a      	ldr	r2, [r7, #4]
 8105dd6:	6812      	ldr	r2, [r2, #0]
 8105dd8:	430b      	orrs	r3, r1
 8105dda:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105de6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dee:	041a      	lsls	r2, r3, #16
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	430a      	orrs	r2, r1
 8105df6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dfe:	687a      	ldr	r2, [r7, #4]
 8105e00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8105e02:	fb02 f303 	mul.w	r3, r2, r3
 8105e06:	68ba      	ldr	r2, [r7, #8]
 8105e08:	4413      	add	r3, r2
 8105e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	681b      	ldr	r3, [r3, #0]
 8105e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105e14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105e18:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105e1c:	68ba      	ldr	r2, [r7, #8]
 8105e1e:	0091      	lsls	r1, r2, #2
 8105e20:	687a      	ldr	r2, [r7, #4]
 8105e22:	6812      	ldr	r2, [r2, #0]
 8105e24:	430b      	orrs	r3, r1
 8105e26:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105e32:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105e3a:	041a      	lsls	r2, r3, #16
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	681b      	ldr	r3, [r3, #0]
 8105e40:	430a      	orrs	r2, r1
 8105e42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105e4a:	687a      	ldr	r2, [r7, #4]
 8105e4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8105e4e:	fb02 f303 	mul.w	r3, r2, r3
 8105e52:	68ba      	ldr	r2, [r7, #8]
 8105e54:	4413      	add	r3, r2
 8105e56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	681b      	ldr	r3, [r3, #0]
 8105e5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105e64:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105e68:	68ba      	ldr	r2, [r7, #8]
 8105e6a:	0091      	lsls	r1, r2, #2
 8105e6c:	687a      	ldr	r2, [r7, #4]
 8105e6e:	6812      	ldr	r2, [r2, #0]
 8105e70:	430b      	orrs	r3, r1
 8105e72:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e7a:	687a      	ldr	r2, [r7, #4]
 8105e7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8105e7e:	fb02 f303 	mul.w	r3, r2, r3
 8105e82:	68ba      	ldr	r2, [r7, #8]
 8105e84:	4413      	add	r3, r2
 8105e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	681b      	ldr	r3, [r3, #0]
 8105e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8105e90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105e94:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105e98:	68ba      	ldr	r2, [r7, #8]
 8105e9a:	0091      	lsls	r1, r2, #2
 8105e9c:	687a      	ldr	r2, [r7, #4]
 8105e9e:	6812      	ldr	r2, [r2, #0]
 8105ea0:	430b      	orrs	r3, r1
 8105ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8105eae:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105eb6:	041a      	lsls	r2, r3, #16
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	430a      	orrs	r2, r1
 8105ebe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ec6:	005b      	lsls	r3, r3, #1
 8105ec8:	68ba      	ldr	r2, [r7, #8]
 8105eca:	4413      	add	r3, r2
 8105ecc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8105ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105eda:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105ede:	68ba      	ldr	r2, [r7, #8]
 8105ee0:	0091      	lsls	r1, r2, #2
 8105ee2:	687a      	ldr	r2, [r7, #4]
 8105ee4:	6812      	ldr	r2, [r2, #0]
 8105ee6:	430b      	orrs	r3, r1
 8105ee8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	681b      	ldr	r3, [r3, #0]
 8105ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8105ef4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8105ef8:	687b      	ldr	r3, [r7, #4]
 8105efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105efc:	041a      	lsls	r2, r3, #16
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	430a      	orrs	r2, r1
 8105f04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8105f10:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f18:	061a      	lsls	r2, r3, #24
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	430a      	orrs	r2, r1
 8105f20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105f28:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8105f2c:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8105f30:	009a      	lsls	r2, r3, #2
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8105f36:	687b      	ldr	r3, [r7, #4]
 8105f38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105f3e:	009b      	lsls	r3, r3, #2
 8105f40:	441a      	add	r2, r3
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105f4e:	00db      	lsls	r3, r3, #3
 8105f50:	441a      	add	r2, r3
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f5e:	6879      	ldr	r1, [r7, #4]
 8105f60:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8105f62:	fb01 f303 	mul.w	r3, r1, r3
 8105f66:	009b      	lsls	r3, r3, #2
 8105f68:	441a      	add	r2, r3
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105f76:	6879      	ldr	r1, [r7, #4]
 8105f78:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8105f7a:	fb01 f303 	mul.w	r3, r1, r3
 8105f7e:	009b      	lsls	r3, r3, #2
 8105f80:	441a      	add	r2, r3
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f8e:	6879      	ldr	r1, [r7, #4]
 8105f90:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8105f92:	fb01 f303 	mul.w	r3, r1, r3
 8105f96:	009b      	lsls	r3, r3, #2
 8105f98:	441a      	add	r2, r3
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105faa:	00db      	lsls	r3, r3, #3
 8105fac:	441a      	add	r2, r3
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105fbe:	6879      	ldr	r1, [r7, #4]
 8105fc0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8105fc2:	fb01 f303 	mul.w	r3, r1, r3
 8105fc6:	009b      	lsls	r3, r3, #2
 8105fc8:	441a      	add	r2, r3
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105fda:	6879      	ldr	r1, [r7, #4]
 8105fdc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8105fde:	fb01 f303 	mul.w	r3, r1, r3
 8105fe2:	009b      	lsls	r3, r3, #2
 8105fe4:	441a      	add	r2, r3
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105ff2:	4a14      	ldr	r2, [pc, #80]	; (8106044 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8105ff4:	4293      	cmp	r3, r2
 8105ff6:	d90d      	bls.n	8106014 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8105ff8:	687b      	ldr	r3, [r7, #4]
 8105ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105ffe:	f043 0220 	orr.w	r2, r3, #32
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	2203      	movs	r2, #3
 810600c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8106010:	2301      	movs	r3, #1
 8106012:	e010      	b.n	8106036 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106018:	60fb      	str	r3, [r7, #12]
 810601a:	e005      	b.n	8106028 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 810601c:	68fb      	ldr	r3, [r7, #12]
 810601e:	2200      	movs	r2, #0
 8106020:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8106022:	68fb      	ldr	r3, [r7, #12]
 8106024:	3304      	adds	r3, #4
 8106026:	60fb      	str	r3, [r7, #12]
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810602e:	68fa      	ldr	r2, [r7, #12]
 8106030:	429a      	cmp	r2, r3
 8106032:	d3f3      	bcc.n	810601c <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8106034:	2300      	movs	r3, #0
}
 8106036:	4618      	mov	r0, r3
 8106038:	3714      	adds	r7, #20
 810603a:	46bd      	mov	sp, r7
 810603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106040:	4770      	bx	lr
 8106042:	bf00      	nop
 8106044:	4000d3fc 	.word	0x4000d3fc

08106048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106048:	b480      	push	{r7}
 810604a:	b089      	sub	sp, #36	; 0x24
 810604c:	af00      	add	r7, sp, #0
 810604e:	6078      	str	r0, [r7, #4]
 8106050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106052:	2300      	movs	r3, #0
 8106054:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106056:	4b89      	ldr	r3, [pc, #548]	; (810627c <HAL_GPIO_Init+0x234>)
 8106058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810605a:	e194      	b.n	8106386 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810605c:	683b      	ldr	r3, [r7, #0]
 810605e:	681a      	ldr	r2, [r3, #0]
 8106060:	2101      	movs	r1, #1
 8106062:	69fb      	ldr	r3, [r7, #28]
 8106064:	fa01 f303 	lsl.w	r3, r1, r3
 8106068:	4013      	ands	r3, r2
 810606a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810606c:	693b      	ldr	r3, [r7, #16]
 810606e:	2b00      	cmp	r3, #0
 8106070:	f000 8186 	beq.w	8106380 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106074:	683b      	ldr	r3, [r7, #0]
 8106076:	685b      	ldr	r3, [r3, #4]
 8106078:	2b01      	cmp	r3, #1
 810607a:	d00b      	beq.n	8106094 <HAL_GPIO_Init+0x4c>
 810607c:	683b      	ldr	r3, [r7, #0]
 810607e:	685b      	ldr	r3, [r3, #4]
 8106080:	2b02      	cmp	r3, #2
 8106082:	d007      	beq.n	8106094 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106084:	683b      	ldr	r3, [r7, #0]
 8106086:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106088:	2b11      	cmp	r3, #17
 810608a:	d003      	beq.n	8106094 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810608c:	683b      	ldr	r3, [r7, #0]
 810608e:	685b      	ldr	r3, [r3, #4]
 8106090:	2b12      	cmp	r3, #18
 8106092:	d130      	bne.n	81060f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	689b      	ldr	r3, [r3, #8]
 8106098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810609a:	69fb      	ldr	r3, [r7, #28]
 810609c:	005b      	lsls	r3, r3, #1
 810609e:	2203      	movs	r2, #3
 81060a0:	fa02 f303 	lsl.w	r3, r2, r3
 81060a4:	43db      	mvns	r3, r3
 81060a6:	69ba      	ldr	r2, [r7, #24]
 81060a8:	4013      	ands	r3, r2
 81060aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81060ac:	683b      	ldr	r3, [r7, #0]
 81060ae:	68da      	ldr	r2, [r3, #12]
 81060b0:	69fb      	ldr	r3, [r7, #28]
 81060b2:	005b      	lsls	r3, r3, #1
 81060b4:	fa02 f303 	lsl.w	r3, r2, r3
 81060b8:	69ba      	ldr	r2, [r7, #24]
 81060ba:	4313      	orrs	r3, r2
 81060bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	69ba      	ldr	r2, [r7, #24]
 81060c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	685b      	ldr	r3, [r3, #4]
 81060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81060ca:	2201      	movs	r2, #1
 81060cc:	69fb      	ldr	r3, [r7, #28]
 81060ce:	fa02 f303 	lsl.w	r3, r2, r3
 81060d2:	43db      	mvns	r3, r3
 81060d4:	69ba      	ldr	r2, [r7, #24]
 81060d6:	4013      	ands	r3, r2
 81060d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81060da:	683b      	ldr	r3, [r7, #0]
 81060dc:	685b      	ldr	r3, [r3, #4]
 81060de:	091b      	lsrs	r3, r3, #4
 81060e0:	f003 0201 	and.w	r2, r3, #1
 81060e4:	69fb      	ldr	r3, [r7, #28]
 81060e6:	fa02 f303 	lsl.w	r3, r2, r3
 81060ea:	69ba      	ldr	r2, [r7, #24]
 81060ec:	4313      	orrs	r3, r2
 81060ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	69ba      	ldr	r2, [r7, #24]
 81060f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	68db      	ldr	r3, [r3, #12]
 81060fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81060fc:	69fb      	ldr	r3, [r7, #28]
 81060fe:	005b      	lsls	r3, r3, #1
 8106100:	2203      	movs	r2, #3
 8106102:	fa02 f303 	lsl.w	r3, r2, r3
 8106106:	43db      	mvns	r3, r3
 8106108:	69ba      	ldr	r2, [r7, #24]
 810610a:	4013      	ands	r3, r2
 810610c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810610e:	683b      	ldr	r3, [r7, #0]
 8106110:	689a      	ldr	r2, [r3, #8]
 8106112:	69fb      	ldr	r3, [r7, #28]
 8106114:	005b      	lsls	r3, r3, #1
 8106116:	fa02 f303 	lsl.w	r3, r2, r3
 810611a:	69ba      	ldr	r2, [r7, #24]
 810611c:	4313      	orrs	r3, r2
 810611e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106120:	687b      	ldr	r3, [r7, #4]
 8106122:	69ba      	ldr	r2, [r7, #24]
 8106124:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106126:	683b      	ldr	r3, [r7, #0]
 8106128:	685b      	ldr	r3, [r3, #4]
 810612a:	2b02      	cmp	r3, #2
 810612c:	d003      	beq.n	8106136 <HAL_GPIO_Init+0xee>
 810612e:	683b      	ldr	r3, [r7, #0]
 8106130:	685b      	ldr	r3, [r3, #4]
 8106132:	2b12      	cmp	r3, #18
 8106134:	d123      	bne.n	810617e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106136:	69fb      	ldr	r3, [r7, #28]
 8106138:	08da      	lsrs	r2, r3, #3
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	3208      	adds	r2, #8
 810613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106144:	69fb      	ldr	r3, [r7, #28]
 8106146:	f003 0307 	and.w	r3, r3, #7
 810614a:	009b      	lsls	r3, r3, #2
 810614c:	220f      	movs	r2, #15
 810614e:	fa02 f303 	lsl.w	r3, r2, r3
 8106152:	43db      	mvns	r3, r3
 8106154:	69ba      	ldr	r2, [r7, #24]
 8106156:	4013      	ands	r3, r2
 8106158:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810615a:	683b      	ldr	r3, [r7, #0]
 810615c:	691a      	ldr	r2, [r3, #16]
 810615e:	69fb      	ldr	r3, [r7, #28]
 8106160:	f003 0307 	and.w	r3, r3, #7
 8106164:	009b      	lsls	r3, r3, #2
 8106166:	fa02 f303 	lsl.w	r3, r2, r3
 810616a:	69ba      	ldr	r2, [r7, #24]
 810616c:	4313      	orrs	r3, r2
 810616e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106170:	69fb      	ldr	r3, [r7, #28]
 8106172:	08da      	lsrs	r2, r3, #3
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	3208      	adds	r2, #8
 8106178:	69b9      	ldr	r1, [r7, #24]
 810617a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106184:	69fb      	ldr	r3, [r7, #28]
 8106186:	005b      	lsls	r3, r3, #1
 8106188:	2203      	movs	r2, #3
 810618a:	fa02 f303 	lsl.w	r3, r2, r3
 810618e:	43db      	mvns	r3, r3
 8106190:	69ba      	ldr	r2, [r7, #24]
 8106192:	4013      	ands	r3, r2
 8106194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106196:	683b      	ldr	r3, [r7, #0]
 8106198:	685b      	ldr	r3, [r3, #4]
 810619a:	f003 0203 	and.w	r2, r3, #3
 810619e:	69fb      	ldr	r3, [r7, #28]
 81061a0:	005b      	lsls	r3, r3, #1
 81061a2:	fa02 f303 	lsl.w	r3, r2, r3
 81061a6:	69ba      	ldr	r2, [r7, #24]
 81061a8:	4313      	orrs	r3, r2
 81061aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	69ba      	ldr	r2, [r7, #24]
 81061b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81061b2:	683b      	ldr	r3, [r7, #0]
 81061b4:	685b      	ldr	r3, [r3, #4]
 81061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81061ba:	2b00      	cmp	r3, #0
 81061bc:	f000 80e0 	beq.w	8106380 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81061c0:	4b2f      	ldr	r3, [pc, #188]	; (8106280 <HAL_GPIO_Init+0x238>)
 81061c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81061c6:	4a2e      	ldr	r2, [pc, #184]	; (8106280 <HAL_GPIO_Init+0x238>)
 81061c8:	f043 0302 	orr.w	r3, r3, #2
 81061cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81061d0:	4b2b      	ldr	r3, [pc, #172]	; (8106280 <HAL_GPIO_Init+0x238>)
 81061d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81061d6:	f003 0302 	and.w	r3, r3, #2
 81061da:	60fb      	str	r3, [r7, #12]
 81061dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81061de:	4a29      	ldr	r2, [pc, #164]	; (8106284 <HAL_GPIO_Init+0x23c>)
 81061e0:	69fb      	ldr	r3, [r7, #28]
 81061e2:	089b      	lsrs	r3, r3, #2
 81061e4:	3302      	adds	r3, #2
 81061e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81061ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81061ec:	69fb      	ldr	r3, [r7, #28]
 81061ee:	f003 0303 	and.w	r3, r3, #3
 81061f2:	009b      	lsls	r3, r3, #2
 81061f4:	220f      	movs	r2, #15
 81061f6:	fa02 f303 	lsl.w	r3, r2, r3
 81061fa:	43db      	mvns	r3, r3
 81061fc:	69ba      	ldr	r2, [r7, #24]
 81061fe:	4013      	ands	r3, r2
 8106200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106202:	687b      	ldr	r3, [r7, #4]
 8106204:	4a20      	ldr	r2, [pc, #128]	; (8106288 <HAL_GPIO_Init+0x240>)
 8106206:	4293      	cmp	r3, r2
 8106208:	d052      	beq.n	81062b0 <HAL_GPIO_Init+0x268>
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	4a1f      	ldr	r2, [pc, #124]	; (810628c <HAL_GPIO_Init+0x244>)
 810620e:	4293      	cmp	r3, r2
 8106210:	d031      	beq.n	8106276 <HAL_GPIO_Init+0x22e>
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	4a1e      	ldr	r2, [pc, #120]	; (8106290 <HAL_GPIO_Init+0x248>)
 8106216:	4293      	cmp	r3, r2
 8106218:	d02b      	beq.n	8106272 <HAL_GPIO_Init+0x22a>
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	4a1d      	ldr	r2, [pc, #116]	; (8106294 <HAL_GPIO_Init+0x24c>)
 810621e:	4293      	cmp	r3, r2
 8106220:	d025      	beq.n	810626e <HAL_GPIO_Init+0x226>
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	4a1c      	ldr	r2, [pc, #112]	; (8106298 <HAL_GPIO_Init+0x250>)
 8106226:	4293      	cmp	r3, r2
 8106228:	d01f      	beq.n	810626a <HAL_GPIO_Init+0x222>
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	4a1b      	ldr	r2, [pc, #108]	; (810629c <HAL_GPIO_Init+0x254>)
 810622e:	4293      	cmp	r3, r2
 8106230:	d019      	beq.n	8106266 <HAL_GPIO_Init+0x21e>
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	4a1a      	ldr	r2, [pc, #104]	; (81062a0 <HAL_GPIO_Init+0x258>)
 8106236:	4293      	cmp	r3, r2
 8106238:	d013      	beq.n	8106262 <HAL_GPIO_Init+0x21a>
 810623a:	687b      	ldr	r3, [r7, #4]
 810623c:	4a19      	ldr	r2, [pc, #100]	; (81062a4 <HAL_GPIO_Init+0x25c>)
 810623e:	4293      	cmp	r3, r2
 8106240:	d00d      	beq.n	810625e <HAL_GPIO_Init+0x216>
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	4a18      	ldr	r2, [pc, #96]	; (81062a8 <HAL_GPIO_Init+0x260>)
 8106246:	4293      	cmp	r3, r2
 8106248:	d007      	beq.n	810625a <HAL_GPIO_Init+0x212>
 810624a:	687b      	ldr	r3, [r7, #4]
 810624c:	4a17      	ldr	r2, [pc, #92]	; (81062ac <HAL_GPIO_Init+0x264>)
 810624e:	4293      	cmp	r3, r2
 8106250:	d101      	bne.n	8106256 <HAL_GPIO_Init+0x20e>
 8106252:	2309      	movs	r3, #9
 8106254:	e02d      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 8106256:	230a      	movs	r3, #10
 8106258:	e02b      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 810625a:	2308      	movs	r3, #8
 810625c:	e029      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 810625e:	2307      	movs	r3, #7
 8106260:	e027      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 8106262:	2306      	movs	r3, #6
 8106264:	e025      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 8106266:	2305      	movs	r3, #5
 8106268:	e023      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 810626a:	2304      	movs	r3, #4
 810626c:	e021      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 810626e:	2303      	movs	r3, #3
 8106270:	e01f      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 8106272:	2302      	movs	r3, #2
 8106274:	e01d      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 8106276:	2301      	movs	r3, #1
 8106278:	e01b      	b.n	81062b2 <HAL_GPIO_Init+0x26a>
 810627a:	bf00      	nop
 810627c:	580000c0 	.word	0x580000c0
 8106280:	58024400 	.word	0x58024400
 8106284:	58000400 	.word	0x58000400
 8106288:	58020000 	.word	0x58020000
 810628c:	58020400 	.word	0x58020400
 8106290:	58020800 	.word	0x58020800
 8106294:	58020c00 	.word	0x58020c00
 8106298:	58021000 	.word	0x58021000
 810629c:	58021400 	.word	0x58021400
 81062a0:	58021800 	.word	0x58021800
 81062a4:	58021c00 	.word	0x58021c00
 81062a8:	58022000 	.word	0x58022000
 81062ac:	58022400 	.word	0x58022400
 81062b0:	2300      	movs	r3, #0
 81062b2:	69fa      	ldr	r2, [r7, #28]
 81062b4:	f002 0203 	and.w	r2, r2, #3
 81062b8:	0092      	lsls	r2, r2, #2
 81062ba:	4093      	lsls	r3, r2
 81062bc:	69ba      	ldr	r2, [r7, #24]
 81062be:	4313      	orrs	r3, r2
 81062c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81062c2:	4938      	ldr	r1, [pc, #224]	; (81063a4 <HAL_GPIO_Init+0x35c>)
 81062c4:	69fb      	ldr	r3, [r7, #28]
 81062c6:	089b      	lsrs	r3, r3, #2
 81062c8:	3302      	adds	r3, #2
 81062ca:	69ba      	ldr	r2, [r7, #24]
 81062cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81062d0:	697b      	ldr	r3, [r7, #20]
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81062d6:	693b      	ldr	r3, [r7, #16]
 81062d8:	43db      	mvns	r3, r3
 81062da:	69ba      	ldr	r2, [r7, #24]
 81062dc:	4013      	ands	r3, r2
 81062de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81062e0:	683b      	ldr	r3, [r7, #0]
 81062e2:	685b      	ldr	r3, [r3, #4]
 81062e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81062e8:	2b00      	cmp	r3, #0
 81062ea:	d003      	beq.n	81062f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81062ec:	69ba      	ldr	r2, [r7, #24]
 81062ee:	693b      	ldr	r3, [r7, #16]
 81062f0:	4313      	orrs	r3, r2
 81062f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81062f4:	697b      	ldr	r3, [r7, #20]
 81062f6:	69ba      	ldr	r2, [r7, #24]
 81062f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81062fa:	697b      	ldr	r3, [r7, #20]
 81062fc:	685b      	ldr	r3, [r3, #4]
 81062fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106300:	693b      	ldr	r3, [r7, #16]
 8106302:	43db      	mvns	r3, r3
 8106304:	69ba      	ldr	r2, [r7, #24]
 8106306:	4013      	ands	r3, r2
 8106308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810630a:	683b      	ldr	r3, [r7, #0]
 810630c:	685b      	ldr	r3, [r3, #4]
 810630e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106312:	2b00      	cmp	r3, #0
 8106314:	d003      	beq.n	810631e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8106316:	69ba      	ldr	r2, [r7, #24]
 8106318:	693b      	ldr	r3, [r7, #16]
 810631a:	4313      	orrs	r3, r2
 810631c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810631e:	697b      	ldr	r3, [r7, #20]
 8106320:	69ba      	ldr	r2, [r7, #24]
 8106322:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810632c:	693b      	ldr	r3, [r7, #16]
 810632e:	43db      	mvns	r3, r3
 8106330:	69ba      	ldr	r2, [r7, #24]
 8106332:	4013      	ands	r3, r2
 8106334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8106336:	683b      	ldr	r3, [r7, #0]
 8106338:	685b      	ldr	r3, [r3, #4]
 810633a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810633e:	2b00      	cmp	r3, #0
 8106340:	d003      	beq.n	810634a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8106342:	69ba      	ldr	r2, [r7, #24]
 8106344:	693b      	ldr	r3, [r7, #16]
 8106346:	4313      	orrs	r3, r2
 8106348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810634a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810634e:	69bb      	ldr	r3, [r7, #24]
 8106350:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106356:	685b      	ldr	r3, [r3, #4]
 8106358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810635a:	693b      	ldr	r3, [r7, #16]
 810635c:	43db      	mvns	r3, r3
 810635e:	69ba      	ldr	r2, [r7, #24]
 8106360:	4013      	ands	r3, r2
 8106362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106364:	683b      	ldr	r3, [r7, #0]
 8106366:	685b      	ldr	r3, [r3, #4]
 8106368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810636c:	2b00      	cmp	r3, #0
 810636e:	d003      	beq.n	8106378 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8106370:	69ba      	ldr	r2, [r7, #24]
 8106372:	693b      	ldr	r3, [r7, #16]
 8106374:	4313      	orrs	r3, r2
 8106376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810637c:	69bb      	ldr	r3, [r7, #24]
 810637e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8106380:	69fb      	ldr	r3, [r7, #28]
 8106382:	3301      	adds	r3, #1
 8106384:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106386:	683b      	ldr	r3, [r7, #0]
 8106388:	681a      	ldr	r2, [r3, #0]
 810638a:	69fb      	ldr	r3, [r7, #28]
 810638c:	fa22 f303 	lsr.w	r3, r2, r3
 8106390:	2b00      	cmp	r3, #0
 8106392:	f47f ae63 	bne.w	810605c <HAL_GPIO_Init+0x14>
  }
}
 8106396:	bf00      	nop
 8106398:	3724      	adds	r7, #36	; 0x24
 810639a:	46bd      	mov	sp, r7
 810639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063a0:	4770      	bx	lr
 81063a2:	bf00      	nop
 81063a4:	58000400 	.word	0x58000400

081063a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81063a8:	b480      	push	{r7}
 81063aa:	b083      	sub	sp, #12
 81063ac:	af00      	add	r7, sp, #0
 81063ae:	6078      	str	r0, [r7, #4]
 81063b0:	460b      	mov	r3, r1
 81063b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	695a      	ldr	r2, [r3, #20]
 81063b8:	887b      	ldrh	r3, [r7, #2]
 81063ba:	401a      	ands	r2, r3
 81063bc:	887b      	ldrh	r3, [r7, #2]
 81063be:	429a      	cmp	r2, r3
 81063c0:	d104      	bne.n	81063cc <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81063c2:	887b      	ldrh	r3, [r7, #2]
 81063c4:	041a      	lsls	r2, r3, #16
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 81063ca:	e002      	b.n	81063d2 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 81063cc:	887a      	ldrh	r2, [r7, #2]
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	619a      	str	r2, [r3, #24]
}
 81063d2:	bf00      	nop
 81063d4:	370c      	adds	r7, #12
 81063d6:	46bd      	mov	sp, r7
 81063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063dc:	4770      	bx	lr
	...

081063e0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81063e0:	b480      	push	{r7}
 81063e2:	b083      	sub	sp, #12
 81063e4:	af00      	add	r7, sp, #0
 81063e6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81063e8:	4b05      	ldr	r3, [pc, #20]	; (8106400 <HAL_HSEM_ActivateNotification+0x20>)
 81063ea:	681a      	ldr	r2, [r3, #0]
 81063ec:	4904      	ldr	r1, [pc, #16]	; (8106400 <HAL_HSEM_ActivateNotification+0x20>)
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	4313      	orrs	r3, r2
 81063f2:	600b      	str	r3, [r1, #0]
#endif
}
 81063f4:	bf00      	nop
 81063f6:	370c      	adds	r7, #12
 81063f8:	46bd      	mov	sp, r7
 81063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063fe:	4770      	bx	lr
 8106400:	58026510 	.word	0x58026510

08106404 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8106404:	b580      	push	{r7, lr}
 8106406:	b084      	sub	sp, #16
 8106408:	af00      	add	r7, sp, #0
 810640a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	2b00      	cmp	r3, #0
 8106410:	d101      	bne.n	8106416 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8106412:	2301      	movs	r3, #1
 8106414:	e0bf      	b.n	8106596 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 810641c:	b2db      	uxtb	r3, r3
 810641e:	2b00      	cmp	r3, #0
 8106420:	d106      	bne.n	8106430 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	2200      	movs	r2, #0
 8106426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 810642a:	6878      	ldr	r0, [r7, #4]
 810642c:	f7fb f9c8 	bl	81017c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	2202      	movs	r2, #2
 8106434:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	699a      	ldr	r2, [r3, #24]
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8106446:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	6999      	ldr	r1, [r3, #24]
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	685a      	ldr	r2, [r3, #4]
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	689b      	ldr	r3, [r3, #8]
 8106456:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8106458:	687b      	ldr	r3, [r7, #4]
 810645a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 810645c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	691b      	ldr	r3, [r3, #16]
 8106462:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	430a      	orrs	r2, r1
 810646a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	6899      	ldr	r1, [r3, #8]
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	681a      	ldr	r2, [r3, #0]
 8106476:	4b4a      	ldr	r3, [pc, #296]	; (81065a0 <HAL_LTDC_Init+0x19c>)
 8106478:	400b      	ands	r3, r1
 810647a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	695b      	ldr	r3, [r3, #20]
 8106480:	041b      	lsls	r3, r3, #16
 8106482:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	681b      	ldr	r3, [r3, #0]
 8106488:	6899      	ldr	r1, [r3, #8]
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	699a      	ldr	r2, [r3, #24]
 810648e:	68fb      	ldr	r3, [r7, #12]
 8106490:	431a      	orrs	r2, r3
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	430a      	orrs	r2, r1
 8106498:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	68d9      	ldr	r1, [r3, #12]
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	681a      	ldr	r2, [r3, #0]
 81064a4:	4b3e      	ldr	r3, [pc, #248]	; (81065a0 <HAL_LTDC_Init+0x19c>)
 81064a6:	400b      	ands	r3, r1
 81064a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	69db      	ldr	r3, [r3, #28]
 81064ae:	041b      	lsls	r3, r3, #16
 81064b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	681b      	ldr	r3, [r3, #0]
 81064b6:	68d9      	ldr	r1, [r3, #12]
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	6a1a      	ldr	r2, [r3, #32]
 81064bc:	68fb      	ldr	r3, [r7, #12]
 81064be:	431a      	orrs	r2, r3
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	430a      	orrs	r2, r1
 81064c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	6919      	ldr	r1, [r3, #16]
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	681a      	ldr	r2, [r3, #0]
 81064d2:	4b33      	ldr	r3, [pc, #204]	; (81065a0 <HAL_LTDC_Init+0x19c>)
 81064d4:	400b      	ands	r3, r1
 81064d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81064dc:	041b      	lsls	r3, r3, #16
 81064de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	681b      	ldr	r3, [r3, #0]
 81064e4:	6919      	ldr	r1, [r3, #16]
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81064ea:	68fb      	ldr	r3, [r7, #12]
 81064ec:	431a      	orrs	r2, r3
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	681b      	ldr	r3, [r3, #0]
 81064f2:	430a      	orrs	r2, r1
 81064f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	681b      	ldr	r3, [r3, #0]
 81064fa:	6959      	ldr	r1, [r3, #20]
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	681a      	ldr	r2, [r3, #0]
 8106500:	4b27      	ldr	r3, [pc, #156]	; (81065a0 <HAL_LTDC_Init+0x19c>)
 8106502:	400b      	ands	r3, r1
 8106504:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810650a:	041b      	lsls	r3, r3, #16
 810650c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 810650e:	687b      	ldr	r3, [r7, #4]
 8106510:	681b      	ldr	r3, [r3, #0]
 8106512:	6959      	ldr	r1, [r3, #20]
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106518:	68fb      	ldr	r3, [r7, #12]
 810651a:	431a      	orrs	r2, r3
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	681b      	ldr	r3, [r3, #0]
 8106520:	430a      	orrs	r2, r1
 8106522:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810652a:	021b      	lsls	r3, r3, #8
 810652c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8106534:	041b      	lsls	r3, r3, #16
 8106536:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	681b      	ldr	r3, [r3, #0]
 810653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	681b      	ldr	r3, [r3, #0]
 8106542:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8106546:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	681b      	ldr	r3, [r3, #0]
 810654c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810654e:	68ba      	ldr	r2, [r7, #8]
 8106550:	68fb      	ldr	r3, [r7, #12]
 8106552:	4313      	orrs	r3, r2
 8106554:	687a      	ldr	r2, [r7, #4]
 8106556:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 810655a:	431a      	orrs	r2, r3
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	681b      	ldr	r3, [r3, #0]
 8106560:	430a      	orrs	r2, r1
 8106562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	681b      	ldr	r3, [r3, #0]
 810656e:	f042 0206 	orr.w	r2, r2, #6
 8106572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	681b      	ldr	r3, [r3, #0]
 8106578:	699a      	ldr	r2, [r3, #24]
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	681b      	ldr	r3, [r3, #0]
 810657e:	f042 0201 	orr.w	r2, r2, #1
 8106582:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8106584:	687b      	ldr	r3, [r7, #4]
 8106586:	2200      	movs	r2, #0
 8106588:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	2201      	movs	r2, #1
 8106590:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8106594:	2300      	movs	r3, #0
}
 8106596:	4618      	mov	r0, r3
 8106598:	3710      	adds	r7, #16
 810659a:	46bd      	mov	sp, r7
 810659c:	bd80      	pop	{r7, pc}
 810659e:	bf00      	nop
 81065a0:	f000f800 	.word	0xf000f800

081065a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 81065a4:	b5b0      	push	{r4, r5, r7, lr}
 81065a6:	b084      	sub	sp, #16
 81065a8:	af00      	add	r7, sp, #0
 81065aa:	60f8      	str	r0, [r7, #12]
 81065ac:	60b9      	str	r1, [r7, #8]
 81065ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 81065b0:	68fb      	ldr	r3, [r7, #12]
 81065b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 81065b6:	2b01      	cmp	r3, #1
 81065b8:	d101      	bne.n	81065be <HAL_LTDC_ConfigLayer+0x1a>
 81065ba:	2302      	movs	r3, #2
 81065bc:	e02c      	b.n	8106618 <HAL_LTDC_ConfigLayer+0x74>
 81065be:	68fb      	ldr	r3, [r7, #12]
 81065c0:	2201      	movs	r2, #1
 81065c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 81065c6:	68fb      	ldr	r3, [r7, #12]
 81065c8:	2202      	movs	r2, #2
 81065ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 81065ce:	68fa      	ldr	r2, [r7, #12]
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	2134      	movs	r1, #52	; 0x34
 81065d4:	fb01 f303 	mul.w	r3, r1, r3
 81065d8:	4413      	add	r3, r2
 81065da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 81065de:	68bb      	ldr	r3, [r7, #8]
 81065e0:	4614      	mov	r4, r2
 81065e2:	461d      	mov	r5, r3
 81065e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81065e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81065e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81065ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81065ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81065ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81065f0:	682b      	ldr	r3, [r5, #0]
 81065f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 81065f4:	687a      	ldr	r2, [r7, #4]
 81065f6:	68b9      	ldr	r1, [r7, #8]
 81065f8:	68f8      	ldr	r0, [r7, #12]
 81065fa:	f000 f811 	bl	8106620 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 81065fe:	68fb      	ldr	r3, [r7, #12]
 8106600:	681b      	ldr	r3, [r3, #0]
 8106602:	2201      	movs	r2, #1
 8106604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8106606:	68fb      	ldr	r3, [r7, #12]
 8106608:	2201      	movs	r2, #1
 810660a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 810660e:	68fb      	ldr	r3, [r7, #12]
 8106610:	2200      	movs	r2, #0
 8106612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8106616:	2300      	movs	r3, #0
}
 8106618:	4618      	mov	r0, r3
 810661a:	3710      	adds	r7, #16
 810661c:	46bd      	mov	sp, r7
 810661e:	bdb0      	pop	{r4, r5, r7, pc}

08106620 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8106620:	b480      	push	{r7}
 8106622:	b089      	sub	sp, #36	; 0x24
 8106624:	af00      	add	r7, sp, #0
 8106626:	60f8      	str	r0, [r7, #12]
 8106628:	60b9      	str	r1, [r7, #8]
 810662a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 810662c:	68bb      	ldr	r3, [r7, #8]
 810662e:	685a      	ldr	r2, [r3, #4]
 8106630:	68fb      	ldr	r3, [r7, #12]
 8106632:	681b      	ldr	r3, [r3, #0]
 8106634:	68db      	ldr	r3, [r3, #12]
 8106636:	0c1b      	lsrs	r3, r3, #16
 8106638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810663c:	4413      	add	r3, r2
 810663e:	041b      	lsls	r3, r3, #16
 8106640:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8106642:	68fb      	ldr	r3, [r7, #12]
 8106644:	681b      	ldr	r3, [r3, #0]
 8106646:	461a      	mov	r2, r3
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	01db      	lsls	r3, r3, #7
 810664c:	4413      	add	r3, r2
 810664e:	3384      	adds	r3, #132	; 0x84
 8106650:	685b      	ldr	r3, [r3, #4]
 8106652:	68fa      	ldr	r2, [r7, #12]
 8106654:	6812      	ldr	r2, [r2, #0]
 8106656:	4611      	mov	r1, r2
 8106658:	687a      	ldr	r2, [r7, #4]
 810665a:	01d2      	lsls	r2, r2, #7
 810665c:	440a      	add	r2, r1
 810665e:	3284      	adds	r2, #132	; 0x84
 8106660:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8106664:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8106666:	68bb      	ldr	r3, [r7, #8]
 8106668:	681a      	ldr	r2, [r3, #0]
 810666a:	68fb      	ldr	r3, [r7, #12]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	68db      	ldr	r3, [r3, #12]
 8106670:	0c1b      	lsrs	r3, r3, #16
 8106672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106676:	4413      	add	r3, r2
 8106678:	1c5a      	adds	r2, r3, #1
 810667a:	68fb      	ldr	r3, [r7, #12]
 810667c:	681b      	ldr	r3, [r3, #0]
 810667e:	4619      	mov	r1, r3
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	01db      	lsls	r3, r3, #7
 8106684:	440b      	add	r3, r1
 8106686:	3384      	adds	r3, #132	; 0x84
 8106688:	4619      	mov	r1, r3
 810668a:	69fb      	ldr	r3, [r7, #28]
 810668c:	4313      	orrs	r3, r2
 810668e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8106690:	68bb      	ldr	r3, [r7, #8]
 8106692:	68da      	ldr	r2, [r3, #12]
 8106694:	68fb      	ldr	r3, [r7, #12]
 8106696:	681b      	ldr	r3, [r3, #0]
 8106698:	68db      	ldr	r3, [r3, #12]
 810669a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810669e:	4413      	add	r3, r2
 81066a0:	041b      	lsls	r3, r3, #16
 81066a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 81066a4:	68fb      	ldr	r3, [r7, #12]
 81066a6:	681b      	ldr	r3, [r3, #0]
 81066a8:	461a      	mov	r2, r3
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	01db      	lsls	r3, r3, #7
 81066ae:	4413      	add	r3, r2
 81066b0:	3384      	adds	r3, #132	; 0x84
 81066b2:	689b      	ldr	r3, [r3, #8]
 81066b4:	68fa      	ldr	r2, [r7, #12]
 81066b6:	6812      	ldr	r2, [r2, #0]
 81066b8:	4611      	mov	r1, r2
 81066ba:	687a      	ldr	r2, [r7, #4]
 81066bc:	01d2      	lsls	r2, r2, #7
 81066be:	440a      	add	r2, r1
 81066c0:	3284      	adds	r2, #132	; 0x84
 81066c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 81066c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 81066c8:	68bb      	ldr	r3, [r7, #8]
 81066ca:	689a      	ldr	r2, [r3, #8]
 81066cc:	68fb      	ldr	r3, [r7, #12]
 81066ce:	681b      	ldr	r3, [r3, #0]
 81066d0:	68db      	ldr	r3, [r3, #12]
 81066d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81066d6:	4413      	add	r3, r2
 81066d8:	1c5a      	adds	r2, r3, #1
 81066da:	68fb      	ldr	r3, [r7, #12]
 81066dc:	681b      	ldr	r3, [r3, #0]
 81066de:	4619      	mov	r1, r3
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	01db      	lsls	r3, r3, #7
 81066e4:	440b      	add	r3, r1
 81066e6:	3384      	adds	r3, #132	; 0x84
 81066e8:	4619      	mov	r1, r3
 81066ea:	69fb      	ldr	r3, [r7, #28]
 81066ec:	4313      	orrs	r3, r2
 81066ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 81066f0:	68fb      	ldr	r3, [r7, #12]
 81066f2:	681b      	ldr	r3, [r3, #0]
 81066f4:	461a      	mov	r2, r3
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	01db      	lsls	r3, r3, #7
 81066fa:	4413      	add	r3, r2
 81066fc:	3384      	adds	r3, #132	; 0x84
 81066fe:	691b      	ldr	r3, [r3, #16]
 8106700:	68fa      	ldr	r2, [r7, #12]
 8106702:	6812      	ldr	r2, [r2, #0]
 8106704:	4611      	mov	r1, r2
 8106706:	687a      	ldr	r2, [r7, #4]
 8106708:	01d2      	lsls	r2, r2, #7
 810670a:	440a      	add	r2, r1
 810670c:	3284      	adds	r2, #132	; 0x84
 810670e:	f023 0307 	bic.w	r3, r3, #7
 8106712:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8106714:	68fb      	ldr	r3, [r7, #12]
 8106716:	681b      	ldr	r3, [r3, #0]
 8106718:	461a      	mov	r2, r3
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	01db      	lsls	r3, r3, #7
 810671e:	4413      	add	r3, r2
 8106720:	3384      	adds	r3, #132	; 0x84
 8106722:	461a      	mov	r2, r3
 8106724:	68bb      	ldr	r3, [r7, #8]
 8106726:	691b      	ldr	r3, [r3, #16]
 8106728:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 810672a:	68bb      	ldr	r3, [r7, #8]
 810672c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8106730:	021b      	lsls	r3, r3, #8
 8106732:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8106734:	68bb      	ldr	r3, [r7, #8]
 8106736:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810673a:	041b      	lsls	r3, r3, #16
 810673c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 810673e:	68bb      	ldr	r3, [r7, #8]
 8106740:	699b      	ldr	r3, [r3, #24]
 8106742:	061b      	lsls	r3, r3, #24
 8106744:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8106746:	68fb      	ldr	r3, [r7, #12]
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	461a      	mov	r2, r3
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	01db      	lsls	r3, r3, #7
 8106750:	4413      	add	r3, r2
 8106752:	3384      	adds	r3, #132	; 0x84
 8106754:	699b      	ldr	r3, [r3, #24]
 8106756:	68fb      	ldr	r3, [r7, #12]
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	461a      	mov	r2, r3
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	01db      	lsls	r3, r3, #7
 8106760:	4413      	add	r3, r2
 8106762:	3384      	adds	r3, #132	; 0x84
 8106764:	461a      	mov	r2, r3
 8106766:	2300      	movs	r3, #0
 8106768:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 810676a:	68bb      	ldr	r3, [r7, #8]
 810676c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8106770:	461a      	mov	r2, r3
 8106772:	69fb      	ldr	r3, [r7, #28]
 8106774:	431a      	orrs	r2, r3
 8106776:	69bb      	ldr	r3, [r7, #24]
 8106778:	431a      	orrs	r2, r3
 810677a:	68fb      	ldr	r3, [r7, #12]
 810677c:	681b      	ldr	r3, [r3, #0]
 810677e:	4619      	mov	r1, r3
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	01db      	lsls	r3, r3, #7
 8106784:	440b      	add	r3, r1
 8106786:	3384      	adds	r3, #132	; 0x84
 8106788:	4619      	mov	r1, r3
 810678a:	697b      	ldr	r3, [r7, #20]
 810678c:	4313      	orrs	r3, r2
 810678e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8106790:	68fb      	ldr	r3, [r7, #12]
 8106792:	681b      	ldr	r3, [r3, #0]
 8106794:	461a      	mov	r2, r3
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	01db      	lsls	r3, r3, #7
 810679a:	4413      	add	r3, r2
 810679c:	3384      	adds	r3, #132	; 0x84
 810679e:	695b      	ldr	r3, [r3, #20]
 81067a0:	68fa      	ldr	r2, [r7, #12]
 81067a2:	6812      	ldr	r2, [r2, #0]
 81067a4:	4611      	mov	r1, r2
 81067a6:	687a      	ldr	r2, [r7, #4]
 81067a8:	01d2      	lsls	r2, r2, #7
 81067aa:	440a      	add	r2, r1
 81067ac:	3284      	adds	r2, #132	; 0x84
 81067ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 81067b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 81067b4:	68fb      	ldr	r3, [r7, #12]
 81067b6:	681b      	ldr	r3, [r3, #0]
 81067b8:	461a      	mov	r2, r3
 81067ba:	687b      	ldr	r3, [r7, #4]
 81067bc:	01db      	lsls	r3, r3, #7
 81067be:	4413      	add	r3, r2
 81067c0:	3384      	adds	r3, #132	; 0x84
 81067c2:	461a      	mov	r2, r3
 81067c4:	68bb      	ldr	r3, [r7, #8]
 81067c6:	695b      	ldr	r3, [r3, #20]
 81067c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 81067ca:	68fb      	ldr	r3, [r7, #12]
 81067cc:	681b      	ldr	r3, [r3, #0]
 81067ce:	461a      	mov	r2, r3
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	01db      	lsls	r3, r3, #7
 81067d4:	4413      	add	r3, r2
 81067d6:	3384      	adds	r3, #132	; 0x84
 81067d8:	69db      	ldr	r3, [r3, #28]
 81067da:	68fa      	ldr	r2, [r7, #12]
 81067dc:	6812      	ldr	r2, [r2, #0]
 81067de:	4611      	mov	r1, r2
 81067e0:	687a      	ldr	r2, [r7, #4]
 81067e2:	01d2      	lsls	r2, r2, #7
 81067e4:	440a      	add	r2, r1
 81067e6:	3284      	adds	r2, #132	; 0x84
 81067e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 81067ec:	f023 0307 	bic.w	r3, r3, #7
 81067f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 81067f2:	68bb      	ldr	r3, [r7, #8]
 81067f4:	69da      	ldr	r2, [r3, #28]
 81067f6:	68bb      	ldr	r3, [r7, #8]
 81067f8:	6a1b      	ldr	r3, [r3, #32]
 81067fa:	68f9      	ldr	r1, [r7, #12]
 81067fc:	6809      	ldr	r1, [r1, #0]
 81067fe:	4608      	mov	r0, r1
 8106800:	6879      	ldr	r1, [r7, #4]
 8106802:	01c9      	lsls	r1, r1, #7
 8106804:	4401      	add	r1, r0
 8106806:	3184      	adds	r1, #132	; 0x84
 8106808:	4313      	orrs	r3, r2
 810680a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 810680c:	68fb      	ldr	r3, [r7, #12]
 810680e:	681b      	ldr	r3, [r3, #0]
 8106810:	461a      	mov	r2, r3
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	01db      	lsls	r3, r3, #7
 8106816:	4413      	add	r3, r2
 8106818:	3384      	adds	r3, #132	; 0x84
 810681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810681c:	68fb      	ldr	r3, [r7, #12]
 810681e:	681b      	ldr	r3, [r3, #0]
 8106820:	461a      	mov	r2, r3
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	01db      	lsls	r3, r3, #7
 8106826:	4413      	add	r3, r2
 8106828:	3384      	adds	r3, #132	; 0x84
 810682a:	461a      	mov	r2, r3
 810682c:	2300      	movs	r3, #0
 810682e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8106830:	68fb      	ldr	r3, [r7, #12]
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	461a      	mov	r2, r3
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	01db      	lsls	r3, r3, #7
 810683a:	4413      	add	r3, r2
 810683c:	3384      	adds	r3, #132	; 0x84
 810683e:	461a      	mov	r2, r3
 8106840:	68bb      	ldr	r3, [r7, #8]
 8106842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106844:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8106846:	68bb      	ldr	r3, [r7, #8]
 8106848:	691b      	ldr	r3, [r3, #16]
 810684a:	2b00      	cmp	r3, #0
 810684c:	d102      	bne.n	8106854 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 810684e:	2304      	movs	r3, #4
 8106850:	61fb      	str	r3, [r7, #28]
 8106852:	e01b      	b.n	810688c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8106854:	68bb      	ldr	r3, [r7, #8]
 8106856:	691b      	ldr	r3, [r3, #16]
 8106858:	2b01      	cmp	r3, #1
 810685a:	d102      	bne.n	8106862 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 810685c:	2303      	movs	r3, #3
 810685e:	61fb      	str	r3, [r7, #28]
 8106860:	e014      	b.n	810688c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8106862:	68bb      	ldr	r3, [r7, #8]
 8106864:	691b      	ldr	r3, [r3, #16]
 8106866:	2b04      	cmp	r3, #4
 8106868:	d00b      	beq.n	8106882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 810686a:	68bb      	ldr	r3, [r7, #8]
 810686c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 810686e:	2b02      	cmp	r3, #2
 8106870:	d007      	beq.n	8106882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8106872:	68bb      	ldr	r3, [r7, #8]
 8106874:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8106876:	2b03      	cmp	r3, #3
 8106878:	d003      	beq.n	8106882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 810687a:	68bb      	ldr	r3, [r7, #8]
 810687c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 810687e:	2b07      	cmp	r3, #7
 8106880:	d102      	bne.n	8106888 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8106882:	2302      	movs	r3, #2
 8106884:	61fb      	str	r3, [r7, #28]
 8106886:	e001      	b.n	810688c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8106888:	2301      	movs	r3, #1
 810688a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 810688c:	68fb      	ldr	r3, [r7, #12]
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	461a      	mov	r2, r3
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	01db      	lsls	r3, r3, #7
 8106896:	4413      	add	r3, r2
 8106898:	3384      	adds	r3, #132	; 0x84
 810689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810689c:	68fa      	ldr	r2, [r7, #12]
 810689e:	6812      	ldr	r2, [r2, #0]
 81068a0:	4611      	mov	r1, r2
 81068a2:	687a      	ldr	r2, [r7, #4]
 81068a4:	01d2      	lsls	r2, r2, #7
 81068a6:	440a      	add	r2, r1
 81068a8:	3284      	adds	r2, #132	; 0x84
 81068aa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 81068ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 81068b0:	68bb      	ldr	r3, [r7, #8]
 81068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068b4:	69fa      	ldr	r2, [r7, #28]
 81068b6:	fb02 f303 	mul.w	r3, r2, r3
 81068ba:	041a      	lsls	r2, r3, #16
 81068bc:	68bb      	ldr	r3, [r7, #8]
 81068be:	6859      	ldr	r1, [r3, #4]
 81068c0:	68bb      	ldr	r3, [r7, #8]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	1acb      	subs	r3, r1, r3
 81068c6:	69f9      	ldr	r1, [r7, #28]
 81068c8:	fb01 f303 	mul.w	r3, r1, r3
 81068cc:	3307      	adds	r3, #7
 81068ce:	68f9      	ldr	r1, [r7, #12]
 81068d0:	6809      	ldr	r1, [r1, #0]
 81068d2:	4608      	mov	r0, r1
 81068d4:	6879      	ldr	r1, [r7, #4]
 81068d6:	01c9      	lsls	r1, r1, #7
 81068d8:	4401      	add	r1, r0
 81068da:	3184      	adds	r1, #132	; 0x84
 81068dc:	4313      	orrs	r3, r2
 81068de:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 81068e0:	68fb      	ldr	r3, [r7, #12]
 81068e2:	681b      	ldr	r3, [r3, #0]
 81068e4:	461a      	mov	r2, r3
 81068e6:	687b      	ldr	r3, [r7, #4]
 81068e8:	01db      	lsls	r3, r3, #7
 81068ea:	4413      	add	r3, r2
 81068ec:	3384      	adds	r3, #132	; 0x84
 81068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81068f0:	68fa      	ldr	r2, [r7, #12]
 81068f2:	6812      	ldr	r2, [r2, #0]
 81068f4:	4611      	mov	r1, r2
 81068f6:	687a      	ldr	r2, [r7, #4]
 81068f8:	01d2      	lsls	r2, r2, #7
 81068fa:	440a      	add	r2, r1
 81068fc:	3284      	adds	r2, #132	; 0x84
 81068fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8106902:	f023 0307 	bic.w	r3, r3, #7
 8106906:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8106908:	68fb      	ldr	r3, [r7, #12]
 810690a:	681b      	ldr	r3, [r3, #0]
 810690c:	461a      	mov	r2, r3
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	01db      	lsls	r3, r3, #7
 8106912:	4413      	add	r3, r2
 8106914:	3384      	adds	r3, #132	; 0x84
 8106916:	461a      	mov	r2, r3
 8106918:	68bb      	ldr	r3, [r7, #8]
 810691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810691c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 810691e:	68fb      	ldr	r3, [r7, #12]
 8106920:	681b      	ldr	r3, [r3, #0]
 8106922:	461a      	mov	r2, r3
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	01db      	lsls	r3, r3, #7
 8106928:	4413      	add	r3, r2
 810692a:	3384      	adds	r3, #132	; 0x84
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	68fa      	ldr	r2, [r7, #12]
 8106930:	6812      	ldr	r2, [r2, #0]
 8106932:	4611      	mov	r1, r2
 8106934:	687a      	ldr	r2, [r7, #4]
 8106936:	01d2      	lsls	r2, r2, #7
 8106938:	440a      	add	r2, r1
 810693a:	3284      	adds	r2, #132	; 0x84
 810693c:	f043 0301 	orr.w	r3, r3, #1
 8106940:	6013      	str	r3, [r2, #0]
}
 8106942:	bf00      	nop
 8106944:	3724      	adds	r7, #36	; 0x24
 8106946:	46bd      	mov	sp, r7
 8106948:	f85d 7b04 	ldr.w	r7, [sp], #4
 810694c:	4770      	bx	lr

0810694e <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 810694e:	b580      	push	{r7, lr}
 8106950:	b082      	sub	sp, #8
 8106952:	af00      	add	r7, sp, #0
 8106954:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	2b00      	cmp	r3, #0
 810695a:	d101      	bne.n	8106960 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 810695c:	2301      	movs	r3, #1
 810695e:	e022      	b.n	81069a6 <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8106966:	b2db      	uxtb	r3, r3
 8106968:	2b00      	cmp	r3, #0
 810696a:	d105      	bne.n	8106978 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	2200      	movs	r2, #0
 8106970:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8106972:	6878      	ldr	r0, [r7, #4]
 8106974:	f7fb f872 	bl	8101a5c <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	2203      	movs	r2, #3
 810697c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8106980:	6878      	ldr	r0, [r7, #4]
 8106982:	f000 f815 	bl	81069b0 <HAL_MMC_InitCard>
 8106986:	4603      	mov	r3, r0
 8106988:	2b01      	cmp	r3, #1
 810698a:	d101      	bne.n	8106990 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 810698c:	2301      	movs	r3, #1
 810698e:	e00a      	b.n	81069a6 <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	2200      	movs	r2, #0
 8106994:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8106996:	687b      	ldr	r3, [r7, #4]
 8106998:	2200      	movs	r2, #0
 810699a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 810699c:	687b      	ldr	r3, [r7, #4]
 810699e:	2201      	movs	r2, #1
 81069a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 81069a4:	2300      	movs	r3, #0
}
 81069a6:	4618      	mov	r0, r3
 81069a8:	3708      	adds	r7, #8
 81069aa:	46bd      	mov	sp, r7
 81069ac:	bd80      	pop	{r7, pc}
	...

081069b0 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 81069b0:	b5b0      	push	{r4, r5, r7, lr}
 81069b2:	b08e      	sub	sp, #56	; 0x38
 81069b4:	af04      	add	r7, sp, #16
 81069b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 81069b8:	2300      	movs	r3, #0
 81069ba:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81069bc:	2300      	movs	r3, #0
 81069be:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 81069c0:	2300      	movs	r3, #0
 81069c2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81069c4:	2300      	movs	r3, #0
 81069c6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81069c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 81069cc:	f001 f858 	bl	8107a80 <HAL_RCCEx_GetPeriphCLKFreq>
 81069d0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 81069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81069d4:	0a1b      	lsrs	r3, r3, #8
 81069d6:	4a3a      	ldr	r2, [pc, #232]	; (8106ac0 <HAL_MMC_InitCard+0x110>)
 81069d8:	fba2 2303 	umull	r2, r3, r2, r3
 81069dc:	091b      	lsrs	r3, r3, #4
 81069de:	61bb      	str	r3, [r7, #24]

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	681d      	ldr	r5, [r3, #0]
 81069e4:	466c      	mov	r4, sp
 81069e6:	f107 0314 	add.w	r3, r7, #20
 81069ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81069ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81069f2:	f107 0308 	add.w	r3, r7, #8
 81069f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 81069f8:	4628      	mov	r0, r5
 81069fa:	f003 ff15 	bl	810a828 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	681b      	ldr	r3, [r3, #0]
 8106a02:	4618      	mov	r0, r3
 8106a04:	f003 ff47 	bl	810a896 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8106a08:	69bb      	ldr	r3, [r7, #24]
 8106a0a:	005b      	lsls	r3, r3, #1
 8106a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8106a12:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8106a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	d008      	beq.n	8106a2c <HAL_MMC_InitCard+0x7c>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8106a1a:	4a2a      	ldr	r2, [pc, #168]	; (8106ac4 <HAL_MMC_InitCard+0x114>)
 8106a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8106a22:	3301      	adds	r3, #1
 8106a24:	4618      	mov	r0, r3
 8106a26:	f7fb fbdd 	bl	81021e4 <HAL_Delay>
 8106a2a:	e002      	b.n	8106a32 <HAL_MMC_InitCard+0x82>
  }
  else
  {
    HAL_Delay(2U);
 8106a2c:	2002      	movs	r0, #2
 8106a2e:	f7fb fbd9 	bl	81021e4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8106a32:	6878      	ldr	r0, [r7, #4]
 8106a34:	f000 fad0 	bl	8106fd8 <MMC_PowerON>
 8106a38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106a3a:	6a3b      	ldr	r3, [r7, #32]
 8106a3c:	2b00      	cmp	r3, #0
 8106a3e:	d00b      	beq.n	8106a58 <HAL_MMC_InitCard+0xa8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	2201      	movs	r2, #1
 8106a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106a4c:	6a3b      	ldr	r3, [r7, #32]
 8106a4e:	431a      	orrs	r2, r3
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8106a54:	2301      	movs	r3, #1
 8106a56:	e02e      	b.n	8106ab6 <HAL_MMC_InitCard+0x106>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8106a58:	6878      	ldr	r0, [r7, #4]
 8106a5a:	f000 f9db 	bl	8106e14 <MMC_InitCard>
 8106a5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106a60:	6a3b      	ldr	r3, [r7, #32]
 8106a62:	2b00      	cmp	r3, #0
 8106a64:	d00b      	beq.n	8106a7e <HAL_MMC_InitCard+0xce>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	2201      	movs	r2, #1
 8106a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106a72:	6a3b      	ldr	r3, [r7, #32]
 8106a74:	431a      	orrs	r2, r3
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8106a7a:	2301      	movs	r3, #1
 8106a7c:	e01b      	b.n	8106ab6 <HAL_MMC_InitCard+0x106>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8106a7e:	687b      	ldr	r3, [r7, #4]
 8106a80:	681b      	ldr	r3, [r3, #0]
 8106a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8106a86:	4618      	mov	r0, r3
 8106a88:	f003 ff9a 	bl	810a9c0 <SDMMC_CmdBlockLength>
 8106a8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106a8e:	6a3b      	ldr	r3, [r7, #32]
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	d00f      	beq.n	8106ab4 <HAL_MMC_InitCard+0x104>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	681b      	ldr	r3, [r3, #0]
 8106a98:	4a0b      	ldr	r2, [pc, #44]	; (8106ac8 <HAL_MMC_InitCard+0x118>)
 8106a9a:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106aa0:	6a3b      	ldr	r3, [r7, #32]
 8106aa2:	431a      	orrs	r2, r3
 8106aa4:	687b      	ldr	r3, [r7, #4]
 8106aa6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8106aa8:	687b      	ldr	r3, [r7, #4]
 8106aaa:	2201      	movs	r2, #1
 8106aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8106ab0:	2301      	movs	r3, #1
 8106ab2:	e000      	b.n	8106ab6 <HAL_MMC_InitCard+0x106>
  }

  return HAL_OK;
 8106ab4:	2300      	movs	r3, #0
}
 8106ab6:	4618      	mov	r0, r3
 8106ab8:	3728      	adds	r7, #40	; 0x28
 8106aba:	46bd      	mov	sp, r7
 8106abc:	bdb0      	pop	{r4, r5, r7, pc}
 8106abe:	bf00      	nop
 8106ac0:	014f8b59 	.word	0x014f8b59
 8106ac4:	00012110 	.word	0x00012110
 8106ac8:	1fe00fff 	.word	0x1fe00fff

08106acc <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8106acc:	b580      	push	{r7, lr}
 8106ace:	b084      	sub	sp, #16
 8106ad0:	af00      	add	r7, sp, #0
 8106ad2:	6078      	str	r0, [r7, #4]
 8106ad4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8106ad6:	2300      	movs	r3, #0
 8106ad8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106ade:	0f9b      	lsrs	r3, r3, #30
 8106ae0:	b2da      	uxtb	r2, r3
 8106ae2:	683b      	ldr	r3, [r7, #0]
 8106ae4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106aea:	0e9b      	lsrs	r3, r3, #26
 8106aec:	b2db      	uxtb	r3, r3
 8106aee:	f003 030f 	and.w	r3, r3, #15
 8106af2:	b2da      	uxtb	r2, r3
 8106af4:	683b      	ldr	r3, [r7, #0]
 8106af6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106afc:	0e1b      	lsrs	r3, r3, #24
 8106afe:	b2db      	uxtb	r3, r3
 8106b00:	f003 0303 	and.w	r3, r3, #3
 8106b04:	b2da      	uxtb	r2, r3
 8106b06:	683b      	ldr	r3, [r7, #0]
 8106b08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106b0e:	0c1b      	lsrs	r3, r3, #16
 8106b10:	b2da      	uxtb	r2, r3
 8106b12:	683b      	ldr	r3, [r7, #0]
 8106b14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106b1a:	0a1b      	lsrs	r3, r3, #8
 8106b1c:	b2da      	uxtb	r2, r3
 8106b1e:	683b      	ldr	r3, [r7, #0]
 8106b20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106b26:	b2da      	uxtb	r2, r3
 8106b28:	683b      	ldr	r3, [r7, #0]
 8106b2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b30:	0d1b      	lsrs	r3, r3, #20
 8106b32:	b29a      	uxth	r2, r3
 8106b34:	683b      	ldr	r3, [r7, #0]
 8106b36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b3c:	0c1b      	lsrs	r3, r3, #16
 8106b3e:	b2db      	uxtb	r3, r3
 8106b40:	f003 030f 	and.w	r3, r3, #15
 8106b44:	b2da      	uxtb	r2, r3
 8106b46:	683b      	ldr	r3, [r7, #0]
 8106b48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b4e:	0bdb      	lsrs	r3, r3, #15
 8106b50:	b2db      	uxtb	r3, r3
 8106b52:	f003 0301 	and.w	r3, r3, #1
 8106b56:	b2da      	uxtb	r2, r3
 8106b58:	683b      	ldr	r3, [r7, #0]
 8106b5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b60:	0b9b      	lsrs	r3, r3, #14
 8106b62:	b2db      	uxtb	r3, r3
 8106b64:	f003 0301 	and.w	r3, r3, #1
 8106b68:	b2da      	uxtb	r2, r3
 8106b6a:	683b      	ldr	r3, [r7, #0]
 8106b6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b72:	0b5b      	lsrs	r3, r3, #13
 8106b74:	b2db      	uxtb	r3, r3
 8106b76:	f003 0301 	and.w	r3, r3, #1
 8106b7a:	b2da      	uxtb	r2, r3
 8106b7c:	683b      	ldr	r3, [r7, #0]
 8106b7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b84:	0b1b      	lsrs	r3, r3, #12
 8106b86:	b2db      	uxtb	r3, r3
 8106b88:	f003 0301 	and.w	r3, r3, #1
 8106b8c:	b2da      	uxtb	r2, r3
 8106b8e:	683b      	ldr	r3, [r7, #0]
 8106b90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8106b92:	683b      	ldr	r3, [r7, #0]
 8106b94:	2200      	movs	r2, #0
 8106b96:	735a      	strb	r2, [r3, #13]

  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8106b98:	f107 010c 	add.w	r1, r7, #12
 8106b9c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8106ba0:	22d4      	movs	r2, #212	; 0xd4
 8106ba2:	6878      	ldr	r0, [r7, #4]
 8106ba4:	f000 fa68 	bl	8107078 <MMC_ReadExtCSD>
 8106ba8:	4603      	mov	r3, r0
 8106baa:	2b00      	cmp	r3, #0
 8106bac:	d001      	beq.n	8106bb2 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8106bae:	2301      	movs	r3, #1
 8106bb0:	e129      	b.n	8106e06 <HAL_MMC_GetCardCSD+0x33a>
  }

  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106bb6:	2b00      	cmp	r3, #0
 8106bb8:	d163      	bne.n	8106c82 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106bbe:	009a      	lsls	r2, r3, #2
 8106bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8106bc4:	4013      	ands	r3, r2
 8106bc6:	687a      	ldr	r2, [r7, #4]
 8106bc8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8106bca:	0f92      	lsrs	r2, r2, #30
 8106bcc:	431a      	orrs	r2, r3
 8106bce:	683b      	ldr	r3, [r7, #0]
 8106bd0:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106bd6:	0edb      	lsrs	r3, r3, #27
 8106bd8:	b2db      	uxtb	r3, r3
 8106bda:	f003 0307 	and.w	r3, r3, #7
 8106bde:	b2da      	uxtb	r2, r3
 8106be0:	683b      	ldr	r3, [r7, #0]
 8106be2:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106be8:	0e1b      	lsrs	r3, r3, #24
 8106bea:	b2db      	uxtb	r3, r3
 8106bec:	f003 0307 	and.w	r3, r3, #7
 8106bf0:	b2da      	uxtb	r2, r3
 8106bf2:	683b      	ldr	r3, [r7, #0]
 8106bf4:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106bfa:	0d5b      	lsrs	r3, r3, #21
 8106bfc:	b2db      	uxtb	r3, r3
 8106bfe:	f003 0307 	and.w	r3, r3, #7
 8106c02:	b2da      	uxtb	r2, r3
 8106c04:	683b      	ldr	r3, [r7, #0]
 8106c06:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106c0c:	0c9b      	lsrs	r3, r3, #18
 8106c0e:	b2db      	uxtb	r3, r3
 8106c10:	f003 0307 	and.w	r3, r3, #7
 8106c14:	b2da      	uxtb	r2, r3
 8106c16:	683b      	ldr	r3, [r7, #0]
 8106c18:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106c1e:	0bdb      	lsrs	r3, r3, #15
 8106c20:	b2db      	uxtb	r3, r3
 8106c22:	f003 0307 	and.w	r3, r3, #7
 8106c26:	b2da      	uxtb	r2, r3
 8106c28:	683b      	ldr	r3, [r7, #0]
 8106c2a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8106c2c:	683b      	ldr	r3, [r7, #0]
 8106c2e:	691b      	ldr	r3, [r3, #16]
 8106c30:	1c5a      	adds	r2, r3, #1
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8106c36:	683b      	ldr	r3, [r7, #0]
 8106c38:	7e1b      	ldrb	r3, [r3, #24]
 8106c3a:	b2db      	uxtb	r3, r3
 8106c3c:	f003 0307 	and.w	r3, r3, #7
 8106c40:	3302      	adds	r3, #2
 8106c42:	2201      	movs	r2, #1
 8106c44:	fa02 f303 	lsl.w	r3, r2, r3
 8106c48:	687a      	ldr	r2, [r7, #4]
 8106c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8106c4c:	fb02 f203 	mul.w	r2, r2, r3
 8106c50:	687b      	ldr	r3, [r7, #4]
 8106c52:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8106c54:	683b      	ldr	r3, [r7, #0]
 8106c56:	7a1b      	ldrb	r3, [r3, #8]
 8106c58:	b2db      	uxtb	r3, r3
 8106c5a:	f003 030f 	and.w	r3, r3, #15
 8106c5e:	2201      	movs	r2, #1
 8106c60:	409a      	lsls	r2, r3
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	64da      	str	r2, [r3, #76]	; 0x4c

    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106c6a:	687a      	ldr	r2, [r7, #4]
 8106c6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8106c6e:	0a52      	lsrs	r2, r2, #9
 8106c70:	fb02 f203 	mul.w	r2, r2, r3
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.LogBlockSize = 512U;
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106c7e:	655a      	str	r2, [r3, #84]	; 0x54
 8106c80:	e023      	b.n	8106cca <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106c86:	2b01      	cmp	r3, #1
 8106c88:	d10f      	bne.n	8106caa <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8106c8a:	68fa      	ldr	r2, [r7, #12]
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8106c94:	687b      	ldr	r3, [r7, #4]
 8106c96:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.BlockSize = 512U;
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106c9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8106ca0:	687b      	ldr	r3, [r7, #4]
 8106ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	655a      	str	r2, [r3, #84]	; 0x54
 8106ca8:	e00f      	b.n	8106cca <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	681b      	ldr	r3, [r3, #0]
 8106cae:	4a58      	ldr	r2, [pc, #352]	; (8106e10 <HAL_MMC_GetCardCSD+0x344>)
 8106cb0:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106cb6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	2201      	movs	r2, #1
 8106cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8106cc6:	2301      	movs	r3, #1
 8106cc8:	e09d      	b.n	8106e06 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106cce:	0b9b      	lsrs	r3, r3, #14
 8106cd0:	b2db      	uxtb	r3, r3
 8106cd2:	f003 0301 	and.w	r3, r3, #1
 8106cd6:	b2da      	uxtb	r2, r3
 8106cd8:	683b      	ldr	r3, [r7, #0]
 8106cda:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106ce0:	09db      	lsrs	r3, r3, #7
 8106ce2:	b2db      	uxtb	r3, r3
 8106ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106ce8:	b2da      	uxtb	r2, r3
 8106cea:	683b      	ldr	r3, [r7, #0]
 8106cec:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8106cee:	687b      	ldr	r3, [r7, #4]
 8106cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106cf2:	b2db      	uxtb	r3, r3
 8106cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106cf8:	b2da      	uxtb	r2, r3
 8106cfa:	683b      	ldr	r3, [r7, #0]
 8106cfc:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d02:	0fdb      	lsrs	r3, r3, #31
 8106d04:	b2da      	uxtb	r2, r3
 8106d06:	683b      	ldr	r3, [r7, #0]
 8106d08:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d0e:	0f5b      	lsrs	r3, r3, #29
 8106d10:	b2db      	uxtb	r3, r3
 8106d12:	f003 0303 	and.w	r3, r3, #3
 8106d16:	b2da      	uxtb	r2, r3
 8106d18:	683b      	ldr	r3, [r7, #0]
 8106d1a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d20:	0e9b      	lsrs	r3, r3, #26
 8106d22:	b2db      	uxtb	r3, r3
 8106d24:	f003 0307 	and.w	r3, r3, #7
 8106d28:	b2da      	uxtb	r2, r3
 8106d2a:	683b      	ldr	r3, [r7, #0]
 8106d2c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d32:	0d9b      	lsrs	r3, r3, #22
 8106d34:	b2db      	uxtb	r3, r3
 8106d36:	f003 030f 	and.w	r3, r3, #15
 8106d3a:	b2da      	uxtb	r2, r3
 8106d3c:	683b      	ldr	r3, [r7, #0]
 8106d3e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d44:	0d5b      	lsrs	r3, r3, #21
 8106d46:	b2db      	uxtb	r3, r3
 8106d48:	f003 0301 	and.w	r3, r3, #1
 8106d4c:	b2da      	uxtb	r2, r3
 8106d4e:	683b      	ldr	r3, [r7, #0]
 8106d50:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8106d54:	683b      	ldr	r3, [r7, #0]
 8106d56:	2200      	movs	r2, #0
 8106d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8106d5c:	687b      	ldr	r3, [r7, #4]
 8106d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d60:	0c1b      	lsrs	r3, r3, #16
 8106d62:	b2db      	uxtb	r3, r3
 8106d64:	f003 0301 	and.w	r3, r3, #1
 8106d68:	b2da      	uxtb	r2, r3
 8106d6a:	683b      	ldr	r3, [r7, #0]
 8106d6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d74:	0bdb      	lsrs	r3, r3, #15
 8106d76:	b2db      	uxtb	r3, r3
 8106d78:	f003 0301 	and.w	r3, r3, #1
 8106d7c:	b2da      	uxtb	r2, r3
 8106d7e:	683b      	ldr	r3, [r7, #0]
 8106d80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d88:	0b9b      	lsrs	r3, r3, #14
 8106d8a:	b2db      	uxtb	r3, r3
 8106d8c:	f003 0301 	and.w	r3, r3, #1
 8106d90:	b2da      	uxtb	r2, r3
 8106d92:	683b      	ldr	r3, [r7, #0]
 8106d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d9c:	0b5b      	lsrs	r3, r3, #13
 8106d9e:	b2db      	uxtb	r3, r3
 8106da0:	f003 0301 	and.w	r3, r3, #1
 8106da4:	b2da      	uxtb	r2, r3
 8106da6:	683b      	ldr	r3, [r7, #0]
 8106da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106db0:	0b1b      	lsrs	r3, r3, #12
 8106db2:	b2db      	uxtb	r3, r3
 8106db4:	f003 0301 	and.w	r3, r3, #1
 8106db8:	b2da      	uxtb	r2, r3
 8106dba:	683b      	ldr	r3, [r7, #0]
 8106dbc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106dc4:	0a9b      	lsrs	r3, r3, #10
 8106dc6:	b2db      	uxtb	r3, r3
 8106dc8:	f003 0303 	and.w	r3, r3, #3
 8106dcc:	b2da      	uxtb	r2, r3
 8106dce:	683b      	ldr	r3, [r7, #0]
 8106dd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106dd8:	0a1b      	lsrs	r3, r3, #8
 8106dda:	b2db      	uxtb	r3, r3
 8106ddc:	f003 0303 	and.w	r3, r3, #3
 8106de0:	b2da      	uxtb	r2, r3
 8106de2:	683b      	ldr	r3, [r7, #0]
 8106de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106dec:	085b      	lsrs	r3, r3, #1
 8106dee:	b2db      	uxtb	r3, r3
 8106df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106df4:	b2da      	uxtb	r2, r3
 8106df6:	683b      	ldr	r3, [r7, #0]
 8106df8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8106dfc:	683b      	ldr	r3, [r7, #0]
 8106dfe:	2201      	movs	r2, #1
 8106e00:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8106e04:	2300      	movs	r3, #0
}
 8106e06:	4618      	mov	r0, r3
 8106e08:	3710      	adds	r7, #16
 8106e0a:	46bd      	mov	sp, r7
 8106e0c:	bd80      	pop	{r7, pc}
 8106e0e:	bf00      	nop
 8106e10:	1fe00fff 	.word	0x1fe00fff

08106e14 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8106e14:	b5b0      	push	{r4, r5, r7, lr}
 8106e16:	b09a      	sub	sp, #104	; 0x68
 8106e18:	af04      	add	r7, sp, #16
 8106e1a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 8106e1c:	2301      	movs	r3, #1
 8106e1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  MMC_InitTypeDef Init;

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	681b      	ldr	r3, [r3, #0]
 8106e24:	4618      	mov	r0, r3
 8106e26:	f003 fd47 	bl	810a8b8 <SDMMC_GetPowerState>
 8106e2a:	4603      	mov	r3, r0
 8106e2c:	2b00      	cmp	r3, #0
 8106e2e:	d102      	bne.n	8106e36 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8106e30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8106e34:	e0cc      	b.n	8106fd0 <MMC_InitCard+0x1bc>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	681b      	ldr	r3, [r3, #0]
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	f003 fe25 	bl	810aa8a <SDMMC_CmdSendCID>
 8106e40:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106e44:	2b00      	cmp	r3, #0
 8106e46:	d001      	beq.n	8106e4c <MMC_InitCard+0x38>
  {
    return errorstate;
 8106e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106e4a:	e0c1      	b.n	8106fd0 <MMC_InitCard+0x1bc>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	681b      	ldr	r3, [r3, #0]
 8106e50:	2100      	movs	r1, #0
 8106e52:	4618      	mov	r0, r3
 8106e54:	f003 fd75 	bl	810a942 <SDMMC_GetResponse>
 8106e58:	4602      	mov	r2, r0
 8106e5a:	687b      	ldr	r3, [r7, #4]
 8106e5c:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	2104      	movs	r1, #4
 8106e64:	4618      	mov	r0, r3
 8106e66:	f003 fd6c 	bl	810a942 <SDMMC_GetResponse>
 8106e6a:	4602      	mov	r2, r0
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8106e70:	687b      	ldr	r3, [r7, #4]
 8106e72:	681b      	ldr	r3, [r3, #0]
 8106e74:	2108      	movs	r1, #8
 8106e76:	4618      	mov	r0, r3
 8106e78:	f003 fd63 	bl	810a942 <SDMMC_GetResponse>
 8106e7c:	4602      	mov	r2, r0
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	681b      	ldr	r3, [r3, #0]
 8106e86:	210c      	movs	r1, #12
 8106e88:	4618      	mov	r0, r3
 8106e8a:	f003 fd5a 	bl	810a942 <SDMMC_GetResponse>
 8106e8e:	4602      	mov	r2, r0
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	681b      	ldr	r3, [r3, #0]
 8106e98:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8106e9c:	4611      	mov	r1, r2
 8106e9e:	4618      	mov	r0, r3
 8106ea0:	f003 fe32 	bl	810ab08 <SDMMC_CmdSetRelAdd>
 8106ea4:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106ea8:	2b00      	cmp	r3, #0
 8106eaa:	d001      	beq.n	8106eb0 <MMC_InitCard+0x9c>
  {
    return errorstate;
 8106eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106eae:	e08f      	b.n	8106fd0 <MMC_InitCard+0x1bc>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8106eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8106eb2:	461a      	mov	r2, r3
 8106eb4:	687b      	ldr	r3, [r7, #4]
 8106eb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	681a      	ldr	r2, [r3, #0]
 8106ebc:	687b      	ldr	r3, [r7, #4]
 8106ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106ec0:	041b      	lsls	r3, r3, #16
 8106ec2:	4619      	mov	r1, r3
 8106ec4:	4610      	mov	r0, r2
 8106ec6:	f003 fdff 	bl	810aac8 <SDMMC_CmdSendCSD>
 8106eca:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106ece:	2b00      	cmp	r3, #0
 8106ed0:	d001      	beq.n	8106ed6 <MMC_InitCard+0xc2>
  {
    return errorstate;
 8106ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106ed4:	e07c      	b.n	8106fd0 <MMC_InitCard+0x1bc>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	681b      	ldr	r3, [r3, #0]
 8106eda:	2100      	movs	r1, #0
 8106edc:	4618      	mov	r0, r3
 8106ede:	f003 fd30 	bl	810a942 <SDMMC_GetResponse>
 8106ee2:	4602      	mov	r2, r0
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	681b      	ldr	r3, [r3, #0]
 8106eec:	2104      	movs	r1, #4
 8106eee:	4618      	mov	r0, r3
 8106ef0:	f003 fd27 	bl	810a942 <SDMMC_GetResponse>
 8106ef4:	4602      	mov	r2, r0
 8106ef6:	687b      	ldr	r3, [r7, #4]
 8106ef8:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8106efa:	687b      	ldr	r3, [r7, #4]
 8106efc:	681b      	ldr	r3, [r3, #0]
 8106efe:	2108      	movs	r1, #8
 8106f00:	4618      	mov	r0, r3
 8106f02:	f003 fd1e 	bl	810a942 <SDMMC_GetResponse>
 8106f06:	4602      	mov	r2, r0
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	210c      	movs	r1, #12
 8106f12:	4618      	mov	r0, r3
 8106f14:	f003 fd15 	bl	810a942 <SDMMC_GetResponse>
 8106f18:	4602      	mov	r2, r0
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	681b      	ldr	r3, [r3, #0]
 8106f22:	2104      	movs	r1, #4
 8106f24:	4618      	mov	r0, r3
 8106f26:	f003 fd0c 	bl	810a942 <SDMMC_GetResponse>
 8106f2a:	4603      	mov	r3, r0
 8106f2c:	0d1a      	lsrs	r2, r3, #20
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	641a      	str	r2, [r3, #64]	; 0x40

   /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	6819      	ldr	r1, [r3, #0]
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106f3a:	041b      	lsls	r3, r3, #16
 8106f3c:	f04f 0400 	mov.w	r4, #0
 8106f40:	461a      	mov	r2, r3
 8106f42:	4623      	mov	r3, r4
 8106f44:	4608      	mov	r0, r1
 8106f46:	f003 fd5e 	bl	810aa06 <SDMMC_CmdSelDesel>
 8106f4a:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106f4e:	2b00      	cmp	r3, #0
 8106f50:	d001      	beq.n	8106f56 <MMC_InitCard+0x142>
  {
    return errorstate;
 8106f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106f54:	e03c      	b.n	8106fd0 <MMC_InitCard+0x1bc>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8106f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8106f5a:	4619      	mov	r1, r3
 8106f5c:	6878      	ldr	r0, [r7, #4]
 8106f5e:	f7ff fdb5 	bl	8106acc <HAL_MMC_GetCardCSD>
 8106f62:	4603      	mov	r3, r0
 8106f64:	2b00      	cmp	r3, #0
 8106f66:	d002      	beq.n	8106f6e <MMC_InitCard+0x15a>
  {
    return hmmc->ErrorCode;
 8106f68:	687b      	ldr	r3, [r7, #4]
 8106f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106f6c:	e030      	b.n	8106fd0 <MMC_InitCard+0x1bc>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8106f6e:	687b      	ldr	r3, [r7, #4]
 8106f70:	681a      	ldr	r2, [r3, #0]
 8106f72:	687b      	ldr	r3, [r7, #4]
 8106f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106f76:	041b      	lsls	r3, r3, #16
 8106f78:	4619      	mov	r1, r3
 8106f7a:	4610      	mov	r0, r2
 8106f7c:	f003 fde6 	bl	810ab4c <SDMMC_CmdSendStatus>
 8106f80:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106f84:	2b00      	cmp	r3, #0
 8106f86:	d005      	beq.n	8106f94 <MMC_InitCard+0x180>
  {
    hmmc->ErrorCode |= errorstate;
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106f8e:	431a      	orrs	r2, r3
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Configure the SDMMC peripheral */
  Init.ClockEdge           = hmmc->Init.ClockEdge;
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	685b      	ldr	r3, [r3, #4]
 8106f98:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = hmmc->Init.ClockPowerSave;
 8106f9a:	687b      	ldr	r3, [r7, #4]
 8106f9c:	689b      	ldr	r3, [r3, #8]
 8106f9e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8106fa0:	2300      	movs	r3, #0
 8106fa2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = hmmc->Init.HardwareFlowControl;
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	691b      	ldr	r3, [r3, #16]
 8106fa8:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = hmmc->Init.ClockDiv;
 8106faa:	687b      	ldr	r3, [r7, #4]
 8106fac:	695b      	ldr	r3, [r3, #20]
 8106fae:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	681d      	ldr	r5, [r3, #0]
 8106fb4:	466c      	mov	r4, sp
 8106fb6:	f107 0318 	add.w	r3, r7, #24
 8106fba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8106fbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8106fc2:	f107 030c 	add.w	r3, r7, #12
 8106fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8106fc8:	4628      	mov	r0, r5
 8106fca:	f003 fc2d 	bl	810a828 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8106fce:	2300      	movs	r3, #0
}
 8106fd0:	4618      	mov	r0, r3
 8106fd2:	3758      	adds	r7, #88	; 0x58
 8106fd4:	46bd      	mov	sp, r7
 8106fd6:	bdb0      	pop	{r4, r5, r7, pc}

08106fd8 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8106fd8:	b580      	push	{r7, lr}
 8106fda:	b086      	sub	sp, #24
 8106fdc:	af00      	add	r7, sp, #0
 8106fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8106fe0:	2300      	movs	r3, #0
 8106fe2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8106fe4:	2300      	movs	r3, #0
 8106fe6:	617b      	str	r3, [r7, #20]
 8106fe8:	2300      	movs	r3, #0
 8106fea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	4618      	mov	r0, r3
 8106ff2:	f003 fd2c 	bl	810aa4e <SDMMC_CmdGoIdleState>
 8106ff6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8106ff8:	68fb      	ldr	r3, [r7, #12]
 8106ffa:	2b00      	cmp	r3, #0
 8106ffc:	d027      	beq.n	810704e <MMC_PowerON+0x76>
  {
    return errorstate;
 8106ffe:	68fb      	ldr	r3, [r7, #12]
 8107000:	e034      	b.n	810706c <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8107002:	68bb      	ldr	r3, [r7, #8]
 8107004:	1c5a      	adds	r2, r3, #1
 8107006:	60ba      	str	r2, [r7, #8]
 8107008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810700c:	4293      	cmp	r3, r2
 810700e:	d102      	bne.n	8107016 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8107010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107014:	e02a      	b.n	810706c <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	4916      	ldr	r1, [pc, #88]	; (8107074 <MMC_PowerON+0x9c>)
 810701c:	4618      	mov	r0, r3
 810701e:	f003 fdb8 	bl	810ab92 <SDMMC_CmdOpCondition>
 8107022:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8107024:	68fb      	ldr	r3, [r7, #12]
 8107026:	2b00      	cmp	r3, #0
 8107028:	d002      	beq.n	8107030 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 810702a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810702e:	e01d      	b.n	810706c <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	681b      	ldr	r3, [r3, #0]
 8107034:	2100      	movs	r1, #0
 8107036:	4618      	mov	r0, r3
 8107038:	f003 fc83 	bl	810a942 <SDMMC_GetResponse>
 810703c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810703e:	697b      	ldr	r3, [r7, #20]
 8107040:	0fdb      	lsrs	r3, r3, #31
 8107042:	2b01      	cmp	r3, #1
 8107044:	d101      	bne.n	810704a <MMC_PowerON+0x72>
 8107046:	2301      	movs	r3, #1
 8107048:	e000      	b.n	810704c <MMC_PowerON+0x74>
 810704a:	2300      	movs	r3, #0
 810704c:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 810704e:	693b      	ldr	r3, [r7, #16]
 8107050:	2b00      	cmp	r3, #0
 8107052:	d0d6      	beq.n	8107002 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8107054:	697b      	ldr	r3, [r7, #20]
 8107056:	0e1b      	lsrs	r3, r3, #24
 8107058:	2bc0      	cmp	r3, #192	; 0xc0
 810705a:	d103      	bne.n	8107064 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	2201      	movs	r2, #1
 8107060:	63da      	str	r2, [r3, #60]	; 0x3c
 8107062:	e002      	b.n	810706a <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8107064:	687b      	ldr	r3, [r7, #4]
 8107066:	2200      	movs	r2, #0
 8107068:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 810706a:	2300      	movs	r3, #0
}
 810706c:	4618      	mov	r0, r3
 810706e:	3718      	adds	r7, #24
 8107070:	46bd      	mov	sp, r7
 8107072:	bd80      	pop	{r7, pc}
 8107074:	c0ff8000 	.word	0xc0ff8000

08107078 <MMC_ReadExtCSD>:
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
{
 8107078:	b580      	push	{r7, lr}
 810707a:	b090      	sub	sp, #64	; 0x40
 810707c:	af00      	add	r7, sp, #0
 810707e:	60f8      	str	r0, [r7, #12]
 8107080:	60b9      	str	r1, [r7, #8]
 8107082:	603b      	str	r3, [r7, #0]
 8107084:	4613      	mov	r3, r2
 8107086:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8107088:	f7fb f8a0 	bl	81021cc <HAL_GetTick>
 810708c:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 810708e:	2300      	movs	r3, #0
 8107090:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8107092:	68fb      	ldr	r3, [r7, #12]
 8107094:	2200      	movs	r2, #0
 8107096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8107098:	68fb      	ldr	r3, [r7, #12]
 810709a:	681b      	ldr	r3, [r3, #0]
 810709c:	2200      	movs	r2, #0
 810709e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81070a0:	f04f 33ff 	mov.w	r3, #4294967295
 81070a4:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512;
 81070a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 81070aa:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 81070ac:	2390      	movs	r3, #144	; 0x90
 81070ae:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81070b0:	2302      	movs	r3, #2
 81070b2:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81070b4:	2300      	movs	r3, #0
 81070b6:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81070b8:	2301      	movs	r3, #1
 81070ba:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 81070bc:	68fb      	ldr	r3, [r7, #12]
 81070be:	681b      	ldr	r3, [r3, #0]
 81070c0:	f107 0214 	add.w	r2, r7, #20
 81070c4:	4611      	mov	r1, r2
 81070c6:	4618      	mov	r0, r3
 81070c8:	f003 fc4e 	bl	810a968 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 81070cc:	68fb      	ldr	r3, [r7, #12]
 81070ce:	681b      	ldr	r3, [r3, #0]
 81070d0:	2100      	movs	r1, #0
 81070d2:	4618      	mov	r0, r3
 81070d4:	f003 fd7d 	bl	810abd2 <SDMMC_CmdSendEXTCSD>
 81070d8:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 81070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81070dc:	2b00      	cmp	r3, #0
 81070de:	d04e      	beq.n	810717e <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81070e0:	68fb      	ldr	r3, [r7, #12]
 81070e2:	681b      	ldr	r3, [r3, #0]
 81070e4:	4a39      	ldr	r2, [pc, #228]	; (81071cc <MMC_ReadExtCSD+0x154>)
 81070e6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81070ee:	431a      	orrs	r2, r3
 81070f0:	68fb      	ldr	r3, [r7, #12]
 81070f2:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 81070f4:	68fb      	ldr	r3, [r7, #12]
 81070f6:	2201      	movs	r2, #1
 81070f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81070fc:	2301      	movs	r3, #1
 81070fe:	e061      	b.n	81071c4 <MMC_ReadExtCSD+0x14c>
  }

  /* Poll on SDMMC flags */
  while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8107100:	68fb      	ldr	r3, [r7, #12]
 8107102:	681b      	ldr	r3, [r3, #0]
 8107104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810710a:	2b00      	cmp	r3, #0
 810710c:	d01c      	beq.n	8107148 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for(count = 0U; count < 8U; count++)
 810710e:	2300      	movs	r3, #0
 8107110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107112:	e013      	b.n	810713c <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8107114:	68fb      	ldr	r3, [r7, #12]
 8107116:	681b      	ldr	r3, [r3, #0]
 8107118:	4618      	mov	r0, r3
 810711a:	f003 fbaf 	bl	810a87c <SDMMC_ReadFIFO>
 810711e:	62f8      	str	r0, [r7, #44]	; 0x2c
		/* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
		/*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8107120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107124:	4413      	add	r3, r2
 8107126:	88fa      	ldrh	r2, [r7, #6]
 8107128:	0892      	lsrs	r2, r2, #2
 810712a:	b292      	uxth	r2, r2
 810712c:	4293      	cmp	r3, r2
 810712e:	d102      	bne.n	8107136 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8107130:	68bb      	ldr	r3, [r7, #8]
 8107132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8107134:	601a      	str	r2, [r3, #0]
      for(count = 0U; count < 8U; count++)
 8107136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107138:	3301      	adds	r3, #1
 810713a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810713c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810713e:	2b07      	cmp	r3, #7
 8107140:	d9e8      	bls.n	8107114 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8107142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107144:	3308      	adds	r3, #8
 8107146:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8107148:	f7fb f840 	bl	81021cc <HAL_GetTick>
 810714c:	4602      	mov	r2, r0
 810714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107150:	1ad3      	subs	r3, r2, r3
 8107152:	683a      	ldr	r2, [r7, #0]
 8107154:	429a      	cmp	r2, r3
 8107156:	d902      	bls.n	810715e <MMC_ReadExtCSD+0xe6>
 8107158:	683b      	ldr	r3, [r7, #0]
 810715a:	2b00      	cmp	r3, #0
 810715c:	d10f      	bne.n	810717e <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810715e:	68fb      	ldr	r3, [r7, #12]
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	4a1a      	ldr	r2, [pc, #104]	; (81071cc <MMC_ReadExtCSD+0x154>)
 8107164:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8107166:	68fb      	ldr	r3, [r7, #12]
 8107168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810716a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 810716e:	68fb      	ldr	r3, [r7, #12]
 8107170:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 8107172:	68fb      	ldr	r3, [r7, #12]
 8107174:	2201      	movs	r2, #1
 8107176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 810717a:	2303      	movs	r3, #3
 810717c:	e022      	b.n	81071c4 <MMC_ReadExtCSD+0x14c>
  while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810717e:	68fb      	ldr	r3, [r7, #12]
 8107180:	681b      	ldr	r3, [r3, #0]
 8107182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107184:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8107188:	2b00      	cmp	r3, #0
 810718a:	d0b9      	beq.n	8107100 <MMC_ReadExtCSD+0x88>
    }
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 810718c:	68fb      	ldr	r3, [r7, #12]
 810718e:	681a      	ldr	r2, [r3, #0]
 8107190:	68fb      	ldr	r3, [r7, #12]
 8107192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107194:	041b      	lsls	r3, r3, #16
 8107196:	4619      	mov	r1, r3
 8107198:	4610      	mov	r0, r2
 810719a:	f003 fcd7 	bl	810ab4c <SDMMC_CmdSendStatus>
 810719e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 81071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81071a2:	2b00      	cmp	r3, #0
 81071a4:	d005      	beq.n	81071b2 <MMC_ReadExtCSD+0x13a>
  {
    hmmc->ErrorCode |= errorstate;
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81071ac:	431a      	orrs	r2, r3
 81071ae:	68fb      	ldr	r3, [r7, #12]
 81071b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81071b2:	68fb      	ldr	r3, [r7, #12]
 81071b4:	681b      	ldr	r3, [r3, #0]
 81071b6:	4a06      	ldr	r2, [pc, #24]	; (81071d0 <MMC_ReadExtCSD+0x158>)
 81071b8:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 81071ba:	68fb      	ldr	r3, [r7, #12]
 81071bc:	2201      	movs	r2, #1
 81071be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 81071c2:	2300      	movs	r3, #0
}
 81071c4:	4618      	mov	r0, r3
 81071c6:	3740      	adds	r7, #64	; 0x40
 81071c8:	46bd      	mov	sp, r7
 81071ca:	bd80      	pop	{r7, pc}
 81071cc:	1fe00fff 	.word	0x1fe00fff
 81071d0:	18000f3a 	.word	0x18000f3a

081071d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 81071d6:	b08f      	sub	sp, #60	; 0x3c
 81071d8:	af0a      	add	r7, sp, #40	; 0x28
 81071da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	2b00      	cmp	r3, #0
 81071e0:	d101      	bne.n	81071e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81071e2:	2301      	movs	r3, #1
 81071e4:	e116      	b.n	8107414 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 81071e6:	687b      	ldr	r3, [r7, #4]
 81071e8:	681b      	ldr	r3, [r3, #0]
 81071ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 81071f2:	b2db      	uxtb	r3, r3
 81071f4:	2b00      	cmp	r3, #0
 81071f6:	d106      	bne.n	8107206 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 81071f8:	687b      	ldr	r3, [r7, #4]
 81071fa:	2200      	movs	r2, #0
 81071fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8107200:	6878      	ldr	r0, [r7, #4]
 8107202:	f7fa fd6f 	bl	8101ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	2203      	movs	r2, #3
 810720a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 810720e:	68bb      	ldr	r3, [r7, #8]
 8107210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107216:	2b00      	cmp	r3, #0
 8107218:	d102      	bne.n	8107220 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	2200      	movs	r2, #0
 810721e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	681b      	ldr	r3, [r3, #0]
 8107224:	4618      	mov	r0, r3
 8107226:	f003 ff7a 	bl	810b11e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810722a:	687b      	ldr	r3, [r7, #4]
 810722c:	681b      	ldr	r3, [r3, #0]
 810722e:	603b      	str	r3, [r7, #0]
 8107230:	687e      	ldr	r6, [r7, #4]
 8107232:	466d      	mov	r5, sp
 8107234:	f106 0410 	add.w	r4, r6, #16
 8107238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810723a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810723c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810723e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8107240:	e894 0003 	ldmia.w	r4, {r0, r1}
 8107244:	e885 0003 	stmia.w	r5, {r0, r1}
 8107248:	1d33      	adds	r3, r6, #4
 810724a:	cb0e      	ldmia	r3, {r1, r2, r3}
 810724c:	6838      	ldr	r0, [r7, #0]
 810724e:	f003 ff05 	bl	810b05c <USB_CoreInit>
 8107252:	4603      	mov	r3, r0
 8107254:	2b00      	cmp	r3, #0
 8107256:	d005      	beq.n	8107264 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8107258:	687b      	ldr	r3, [r7, #4]
 810725a:	2202      	movs	r2, #2
 810725c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8107260:	2301      	movs	r3, #1
 8107262:	e0d7      	b.n	8107414 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	681b      	ldr	r3, [r3, #0]
 8107268:	2100      	movs	r1, #0
 810726a:	4618      	mov	r0, r3
 810726c:	f003 ff68 	bl	810b140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8107270:	2300      	movs	r3, #0
 8107272:	73fb      	strb	r3, [r7, #15]
 8107274:	e04a      	b.n	810730c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8107276:	7bfa      	ldrb	r2, [r7, #15]
 8107278:	6879      	ldr	r1, [r7, #4]
 810727a:	4613      	mov	r3, r2
 810727c:	00db      	lsls	r3, r3, #3
 810727e:	1a9b      	subs	r3, r3, r2
 8107280:	009b      	lsls	r3, r3, #2
 8107282:	440b      	add	r3, r1
 8107284:	333d      	adds	r3, #61	; 0x3d
 8107286:	2201      	movs	r2, #1
 8107288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 810728a:	7bfa      	ldrb	r2, [r7, #15]
 810728c:	6879      	ldr	r1, [r7, #4]
 810728e:	4613      	mov	r3, r2
 8107290:	00db      	lsls	r3, r3, #3
 8107292:	1a9b      	subs	r3, r3, r2
 8107294:	009b      	lsls	r3, r3, #2
 8107296:	440b      	add	r3, r1
 8107298:	333c      	adds	r3, #60	; 0x3c
 810729a:	7bfa      	ldrb	r2, [r7, #15]
 810729c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 810729e:	7bfa      	ldrb	r2, [r7, #15]
 81072a0:	7bfb      	ldrb	r3, [r7, #15]
 81072a2:	b298      	uxth	r0, r3
 81072a4:	6879      	ldr	r1, [r7, #4]
 81072a6:	4613      	mov	r3, r2
 81072a8:	00db      	lsls	r3, r3, #3
 81072aa:	1a9b      	subs	r3, r3, r2
 81072ac:	009b      	lsls	r3, r3, #2
 81072ae:	440b      	add	r3, r1
 81072b0:	3342      	adds	r3, #66	; 0x42
 81072b2:	4602      	mov	r2, r0
 81072b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81072b6:	7bfa      	ldrb	r2, [r7, #15]
 81072b8:	6879      	ldr	r1, [r7, #4]
 81072ba:	4613      	mov	r3, r2
 81072bc:	00db      	lsls	r3, r3, #3
 81072be:	1a9b      	subs	r3, r3, r2
 81072c0:	009b      	lsls	r3, r3, #2
 81072c2:	440b      	add	r3, r1
 81072c4:	333f      	adds	r3, #63	; 0x3f
 81072c6:	2200      	movs	r2, #0
 81072c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81072ca:	7bfa      	ldrb	r2, [r7, #15]
 81072cc:	6879      	ldr	r1, [r7, #4]
 81072ce:	4613      	mov	r3, r2
 81072d0:	00db      	lsls	r3, r3, #3
 81072d2:	1a9b      	subs	r3, r3, r2
 81072d4:	009b      	lsls	r3, r3, #2
 81072d6:	440b      	add	r3, r1
 81072d8:	3344      	adds	r3, #68	; 0x44
 81072da:	2200      	movs	r2, #0
 81072dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81072de:	7bfa      	ldrb	r2, [r7, #15]
 81072e0:	6879      	ldr	r1, [r7, #4]
 81072e2:	4613      	mov	r3, r2
 81072e4:	00db      	lsls	r3, r3, #3
 81072e6:	1a9b      	subs	r3, r3, r2
 81072e8:	009b      	lsls	r3, r3, #2
 81072ea:	440b      	add	r3, r1
 81072ec:	3348      	adds	r3, #72	; 0x48
 81072ee:	2200      	movs	r2, #0
 81072f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81072f2:	7bfa      	ldrb	r2, [r7, #15]
 81072f4:	6879      	ldr	r1, [r7, #4]
 81072f6:	4613      	mov	r3, r2
 81072f8:	00db      	lsls	r3, r3, #3
 81072fa:	1a9b      	subs	r3, r3, r2
 81072fc:	009b      	lsls	r3, r3, #2
 81072fe:	440b      	add	r3, r1
 8107300:	3350      	adds	r3, #80	; 0x50
 8107302:	2200      	movs	r2, #0
 8107304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8107306:	7bfb      	ldrb	r3, [r7, #15]
 8107308:	3301      	adds	r3, #1
 810730a:	73fb      	strb	r3, [r7, #15]
 810730c:	7bfa      	ldrb	r2, [r7, #15]
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	685b      	ldr	r3, [r3, #4]
 8107312:	429a      	cmp	r2, r3
 8107314:	d3af      	bcc.n	8107276 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8107316:	2300      	movs	r3, #0
 8107318:	73fb      	strb	r3, [r7, #15]
 810731a:	e044      	b.n	81073a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 810731c:	7bfa      	ldrb	r2, [r7, #15]
 810731e:	6879      	ldr	r1, [r7, #4]
 8107320:	4613      	mov	r3, r2
 8107322:	00db      	lsls	r3, r3, #3
 8107324:	1a9b      	subs	r3, r3, r2
 8107326:	009b      	lsls	r3, r3, #2
 8107328:	440b      	add	r3, r1
 810732a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 810732e:	2200      	movs	r2, #0
 8107330:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8107332:	7bfa      	ldrb	r2, [r7, #15]
 8107334:	6879      	ldr	r1, [r7, #4]
 8107336:	4613      	mov	r3, r2
 8107338:	00db      	lsls	r3, r3, #3
 810733a:	1a9b      	subs	r3, r3, r2
 810733c:	009b      	lsls	r3, r3, #2
 810733e:	440b      	add	r3, r1
 8107340:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8107344:	7bfa      	ldrb	r2, [r7, #15]
 8107346:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8107348:	7bfa      	ldrb	r2, [r7, #15]
 810734a:	6879      	ldr	r1, [r7, #4]
 810734c:	4613      	mov	r3, r2
 810734e:	00db      	lsls	r3, r3, #3
 8107350:	1a9b      	subs	r3, r3, r2
 8107352:	009b      	lsls	r3, r3, #2
 8107354:	440b      	add	r3, r1
 8107356:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 810735a:	2200      	movs	r2, #0
 810735c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810735e:	7bfa      	ldrb	r2, [r7, #15]
 8107360:	6879      	ldr	r1, [r7, #4]
 8107362:	4613      	mov	r3, r2
 8107364:	00db      	lsls	r3, r3, #3
 8107366:	1a9b      	subs	r3, r3, r2
 8107368:	009b      	lsls	r3, r3, #2
 810736a:	440b      	add	r3, r1
 810736c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8107370:	2200      	movs	r2, #0
 8107372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8107374:	7bfa      	ldrb	r2, [r7, #15]
 8107376:	6879      	ldr	r1, [r7, #4]
 8107378:	4613      	mov	r3, r2
 810737a:	00db      	lsls	r3, r3, #3
 810737c:	1a9b      	subs	r3, r3, r2
 810737e:	009b      	lsls	r3, r3, #2
 8107380:	440b      	add	r3, r1
 8107382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8107386:	2200      	movs	r2, #0
 8107388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 810738a:	7bfa      	ldrb	r2, [r7, #15]
 810738c:	6879      	ldr	r1, [r7, #4]
 810738e:	4613      	mov	r3, r2
 8107390:	00db      	lsls	r3, r3, #3
 8107392:	1a9b      	subs	r3, r3, r2
 8107394:	009b      	lsls	r3, r3, #2
 8107396:	440b      	add	r3, r1
 8107398:	f503 7304 	add.w	r3, r3, #528	; 0x210
 810739c:	2200      	movs	r2, #0
 810739e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81073a0:	7bfb      	ldrb	r3, [r7, #15]
 81073a2:	3301      	adds	r3, #1
 81073a4:	73fb      	strb	r3, [r7, #15]
 81073a6:	7bfa      	ldrb	r2, [r7, #15]
 81073a8:	687b      	ldr	r3, [r7, #4]
 81073aa:	685b      	ldr	r3, [r3, #4]
 81073ac:	429a      	cmp	r2, r3
 81073ae:	d3b5      	bcc.n	810731c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	681b      	ldr	r3, [r3, #0]
 81073b4:	603b      	str	r3, [r7, #0]
 81073b6:	687e      	ldr	r6, [r7, #4]
 81073b8:	466d      	mov	r5, sp
 81073ba:	f106 0410 	add.w	r4, r6, #16
 81073be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81073c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81073c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81073c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81073c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 81073ca:	e885 0003 	stmia.w	r5, {r0, r1}
 81073ce:	1d33      	adds	r3, r6, #4
 81073d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 81073d2:	6838      	ldr	r0, [r7, #0]
 81073d4:	f003 fede 	bl	810b194 <USB_DevInit>
 81073d8:	4603      	mov	r3, r0
 81073da:	2b00      	cmp	r3, #0
 81073dc:	d005      	beq.n	81073ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	2202      	movs	r2, #2
 81073e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 81073e6:	2301      	movs	r3, #1
 81073e8:	e014      	b.n	8107414 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 81073ea:	687b      	ldr	r3, [r7, #4]
 81073ec:	2200      	movs	r2, #0
 81073ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	2201      	movs	r2, #1
 81073f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81073fa:	687b      	ldr	r3, [r7, #4]
 81073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81073fe:	2b01      	cmp	r3, #1
 8107400:	d102      	bne.n	8107408 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8107402:	6878      	ldr	r0, [r7, #4]
 8107404:	f000 f80a 	bl	810741c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	4618      	mov	r0, r3
 810740e:	f004 f880 	bl	810b512 <USB_DevDisconnect>

  return HAL_OK;
 8107412:	2300      	movs	r3, #0
}
 8107414:	4618      	mov	r0, r3
 8107416:	3714      	adds	r7, #20
 8107418:	46bd      	mov	sp, r7
 810741a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810741c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 810741c:	b480      	push	{r7}
 810741e:	b085      	sub	sp, #20
 8107420:	af00      	add	r7, sp, #0
 8107422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	2201      	movs	r2, #1
 810742e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	2200      	movs	r2, #0
 8107436:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	699b      	ldr	r3, [r3, #24]
 810743e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8107442:	68fb      	ldr	r3, [r7, #12]
 8107444:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8107446:	68fb      	ldr	r3, [r7, #12]
 8107448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810744a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810744e:	f043 0303 	orr.w	r3, r3, #3
 8107452:	68fa      	ldr	r2, [r7, #12]
 8107454:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8107456:	2300      	movs	r3, #0
}
 8107458:	4618      	mov	r0, r3
 810745a:	3714      	adds	r7, #20
 810745c:	46bd      	mov	sp, r7
 810745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107462:	4770      	bx	lr

08107464 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107464:	b580      	push	{r7, lr}
 8107466:	b084      	sub	sp, #16
 8107468:	af00      	add	r7, sp, #0
 810746a:	60f8      	str	r0, [r7, #12]
 810746c:	460b      	mov	r3, r1
 810746e:	607a      	str	r2, [r7, #4]
 8107470:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8107472:	4b35      	ldr	r3, [pc, #212]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8107474:	681b      	ldr	r3, [r3, #0]
 8107476:	f023 0201 	bic.w	r2, r3, #1
 810747a:	4933      	ldr	r1, [pc, #204]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810747c:	68fb      	ldr	r3, [r7, #12]
 810747e:	4313      	orrs	r3, r2
 8107480:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8107482:	687b      	ldr	r3, [r7, #4]
 8107484:	2b00      	cmp	r3, #0
 8107486:	d121      	bne.n	81074cc <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107488:	f7fa fffe 	bl	8102488 <HAL_GetCurrentCPUID>
 810748c:	4603      	mov	r3, r0
 810748e:	2b03      	cmp	r3, #3
 8107490:	d154      	bne.n	810753c <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8107492:	4b2d      	ldr	r3, [pc, #180]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8107494:	691b      	ldr	r3, [r3, #16]
 8107496:	4a2c      	ldr	r2, [pc, #176]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8107498:	f023 0301 	bic.w	r3, r3, #1
 810749c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810749e:	4b2b      	ldr	r3, [pc, #172]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81074a0:	691b      	ldr	r3, [r3, #16]
 81074a2:	4a2a      	ldr	r2, [pc, #168]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81074a4:	f043 0304 	orr.w	r3, r3, #4
 81074a8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81074aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81074ae:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81074b2:	7afb      	ldrb	r3, [r7, #11]
 81074b4:	2b01      	cmp	r3, #1
 81074b6:	d101      	bne.n	81074bc <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81074b8:	bf30      	wfi
 81074ba:	e000      	b.n	81074be <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81074bc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81074be:	4b23      	ldr	r3, [pc, #140]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81074c0:	691b      	ldr	r3, [r3, #16]
 81074c2:	4a22      	ldr	r2, [pc, #136]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81074c4:	f023 0304 	bic.w	r3, r3, #4
 81074c8:	6113      	str	r3, [r2, #16]
 81074ca:	e03a      	b.n	8107542 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	2b01      	cmp	r3, #1
 81074d0:	d121      	bne.n	8107516 <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81074d2:	f7fa ffd9 	bl	8102488 <HAL_GetCurrentCPUID>
 81074d6:	4603      	mov	r3, r0
 81074d8:	2b01      	cmp	r3, #1
 81074da:	d131      	bne.n	8107540 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81074dc:	4b1a      	ldr	r3, [pc, #104]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81074de:	695b      	ldr	r3, [r3, #20]
 81074e0:	4a19      	ldr	r2, [pc, #100]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81074e2:	f023 0302 	bic.w	r3, r3, #2
 81074e6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81074e8:	4b18      	ldr	r3, [pc, #96]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81074ea:	691b      	ldr	r3, [r3, #16]
 81074ec:	4a17      	ldr	r2, [pc, #92]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81074ee:	f043 0304 	orr.w	r3, r3, #4
 81074f2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81074f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81074f8:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81074fc:	7afb      	ldrb	r3, [r7, #11]
 81074fe:	2b01      	cmp	r3, #1
 8107500:	d101      	bne.n	8107506 <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107502:	bf30      	wfi
 8107504:	e000      	b.n	8107508 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107506:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107508:	4b10      	ldr	r3, [pc, #64]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 810750a:	691b      	ldr	r3, [r3, #16]
 810750c:	4a0f      	ldr	r2, [pc, #60]	; (810754c <HAL_PWREx_EnterSTOPMode+0xe8>)
 810750e:	f023 0304 	bic.w	r3, r3, #4
 8107512:	6113      	str	r3, [r2, #16]
 8107514:	e015      	b.n	8107542 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107516:	f7fa ffb7 	bl	8102488 <HAL_GetCurrentCPUID>
 810751a:	4603      	mov	r3, r0
 810751c:	2b03      	cmp	r3, #3
 810751e:	d106      	bne.n	810752e <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8107520:	4b09      	ldr	r3, [pc, #36]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8107522:	691b      	ldr	r3, [r3, #16]
 8107524:	4a08      	ldr	r2, [pc, #32]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8107526:	f023 0304 	bic.w	r3, r3, #4
 810752a:	6113      	str	r3, [r2, #16]
 810752c:	e009      	b.n	8107542 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810752e:	4b06      	ldr	r3, [pc, #24]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8107530:	695b      	ldr	r3, [r3, #20]
 8107532:	4a05      	ldr	r2, [pc, #20]	; (8107548 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8107534:	f023 0304 	bic.w	r3, r3, #4
 8107538:	6153      	str	r3, [r2, #20]
 810753a:	e002      	b.n	8107542 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 810753c:	bf00      	nop
 810753e:	e000      	b.n	8107542 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8107540:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107542:	3710      	adds	r7, #16
 8107544:	46bd      	mov	sp, r7
 8107546:	bd80      	pop	{r7, pc}
 8107548:	58024800 	.word	0x58024800
 810754c:	e000ed00 	.word	0xe000ed00

08107550 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107550:	b580      	push	{r7, lr}
 8107552:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107554:	f7fa ff98 	bl	8102488 <HAL_GetCurrentCPUID>
 8107558:	4603      	mov	r3, r0
 810755a:	2b03      	cmp	r3, #3
 810755c:	d101      	bne.n	8107562 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810755e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107560:	e001      	b.n	8107566 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107562:	bf40      	sev
    __WFE ();
 8107564:	bf20      	wfe
}
 8107566:	bf00      	nop
 8107568:	bd80      	pop	{r7, pc}
	...

0810756c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 810756c:	b580      	push	{r7, lr}
 810756e:	b086      	sub	sp, #24
 8107570:	af02      	add	r7, sp, #8
 8107572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8107574:	f7fa fe2a 	bl	81021cc <HAL_GetTick>
 8107578:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	2b00      	cmp	r3, #0
 810757e:	d101      	bne.n	8107584 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8107580:	2301      	movs	r3, #1
 8107582:	e061      	b.n	8107648 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810758a:	b2db      	uxtb	r3, r3
 810758c:	2b00      	cmp	r3, #0
 810758e:	d107      	bne.n	81075a0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8107590:	6878      	ldr	r0, [r7, #4]
 8107592:	f7fa f9c5 	bl	8101920 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8107596:	f241 3188 	movw	r1, #5000	; 0x1388
 810759a:	6878      	ldr	r0, [r7, #4]
 810759c:	f000 f85a 	bl	8107654 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	681b      	ldr	r3, [r3, #0]
 81075a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	689b      	ldr	r3, [r3, #8]
 81075ae:	3b01      	subs	r3, #1
 81075b0:	021a      	lsls	r2, r3, #8
 81075b2:	687b      	ldr	r3, [r7, #4]
 81075b4:	681b      	ldr	r3, [r3, #0]
 81075b6:	430a      	orrs	r2, r1
 81075b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81075be:	9300      	str	r3, [sp, #0]
 81075c0:	68fb      	ldr	r3, [r7, #12]
 81075c2:	2200      	movs	r2, #0
 81075c4:	2120      	movs	r1, #32
 81075c6:	6878      	ldr	r0, [r7, #4]
 81075c8:	f000 f852 	bl	8107670 <QSPI_WaitFlagStateUntilTimeout>
 81075cc:	4603      	mov	r3, r0
 81075ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 81075d0:	7afb      	ldrb	r3, [r7, #11]
 81075d2:	2b00      	cmp	r3, #0
 81075d4:	d137      	bne.n	8107646 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	681b      	ldr	r3, [r3, #0]
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81075e0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 81075e4:	687a      	ldr	r2, [r7, #4]
 81075e6:	6852      	ldr	r2, [r2, #4]
 81075e8:	0611      	lsls	r1, r2, #24
 81075ea:	687a      	ldr	r2, [r7, #4]
 81075ec:	68d2      	ldr	r2, [r2, #12]
 81075ee:	4311      	orrs	r1, r2
 81075f0:	687a      	ldr	r2, [r7, #4]
 81075f2:	69d2      	ldr	r2, [r2, #28]
 81075f4:	4311      	orrs	r1, r2
 81075f6:	687a      	ldr	r2, [r7, #4]
 81075f8:	6a12      	ldr	r2, [r2, #32]
 81075fa:	4311      	orrs	r1, r2
 81075fc:	687a      	ldr	r2, [r7, #4]
 81075fe:	6812      	ldr	r2, [r2, #0]
 8107600:	430b      	orrs	r3, r1
 8107602:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8107604:	687b      	ldr	r3, [r7, #4]
 8107606:	681b      	ldr	r3, [r3, #0]
 8107608:	685a      	ldr	r2, [r3, #4]
 810760a:	4b11      	ldr	r3, [pc, #68]	; (8107650 <HAL_QSPI_Init+0xe4>)
 810760c:	4013      	ands	r3, r2
 810760e:	687a      	ldr	r2, [r7, #4]
 8107610:	6912      	ldr	r2, [r2, #16]
 8107612:	0411      	lsls	r1, r2, #16
 8107614:	687a      	ldr	r2, [r7, #4]
 8107616:	6952      	ldr	r2, [r2, #20]
 8107618:	4311      	orrs	r1, r2
 810761a:	687a      	ldr	r2, [r7, #4]
 810761c:	6992      	ldr	r2, [r2, #24]
 810761e:	4311      	orrs	r1, r2
 8107620:	687a      	ldr	r2, [r7, #4]
 8107622:	6812      	ldr	r2, [r2, #0]
 8107624:	430b      	orrs	r3, r1
 8107626:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	681a      	ldr	r2, [r3, #0]
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	681b      	ldr	r3, [r3, #0]
 8107632:	f042 0201 	orr.w	r2, r2, #1
 8107636:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8107638:	687b      	ldr	r3, [r7, #4]
 810763a:	2200      	movs	r2, #0
 810763c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	2201      	movs	r2, #1
 8107642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8107646:	7afb      	ldrb	r3, [r7, #11]
}
 8107648:	4618      	mov	r0, r3
 810764a:	3710      	adds	r7, #16
 810764c:	46bd      	mov	sp, r7
 810764e:	bd80      	pop	{r7, pc}
 8107650:	ffe0f8fe 	.word	0xffe0f8fe

08107654 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8107654:	b480      	push	{r7}
 8107656:	b083      	sub	sp, #12
 8107658:	af00      	add	r7, sp, #0
 810765a:	6078      	str	r0, [r7, #4]
 810765c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	683a      	ldr	r2, [r7, #0]
 8107662:	649a      	str	r2, [r3, #72]	; 0x48
}
 8107664:	bf00      	nop
 8107666:	370c      	adds	r7, #12
 8107668:	46bd      	mov	sp, r7
 810766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810766e:	4770      	bx	lr

08107670 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8107670:	b580      	push	{r7, lr}
 8107672:	b084      	sub	sp, #16
 8107674:	af00      	add	r7, sp, #0
 8107676:	60f8      	str	r0, [r7, #12]
 8107678:	60b9      	str	r1, [r7, #8]
 810767a:	603b      	str	r3, [r7, #0]
 810767c:	4613      	mov	r3, r2
 810767e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8107680:	e01a      	b.n	81076b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107682:	69bb      	ldr	r3, [r7, #24]
 8107684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107688:	d016      	beq.n	81076b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810768a:	f7fa fd9f 	bl	81021cc <HAL_GetTick>
 810768e:	4602      	mov	r2, r0
 8107690:	683b      	ldr	r3, [r7, #0]
 8107692:	1ad3      	subs	r3, r2, r3
 8107694:	69ba      	ldr	r2, [r7, #24]
 8107696:	429a      	cmp	r2, r3
 8107698:	d302      	bcc.n	81076a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 810769a:	69bb      	ldr	r3, [r7, #24]
 810769c:	2b00      	cmp	r3, #0
 810769e:	d10b      	bne.n	81076b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 81076a0:	68fb      	ldr	r3, [r7, #12]
 81076a2:	2204      	movs	r2, #4
 81076a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 81076a8:	68fb      	ldr	r3, [r7, #12]
 81076aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81076ac:	f043 0201 	orr.w	r2, r3, #1
 81076b0:	68fb      	ldr	r3, [r7, #12]
 81076b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 81076b4:	2301      	movs	r3, #1
 81076b6:	e00e      	b.n	81076d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81076b8:	68fb      	ldr	r3, [r7, #12]
 81076ba:	681b      	ldr	r3, [r3, #0]
 81076bc:	689a      	ldr	r2, [r3, #8]
 81076be:	68bb      	ldr	r3, [r7, #8]
 81076c0:	4013      	ands	r3, r2
 81076c2:	2b00      	cmp	r3, #0
 81076c4:	bf14      	ite	ne
 81076c6:	2301      	movne	r3, #1
 81076c8:	2300      	moveq	r3, #0
 81076ca:	b2db      	uxtb	r3, r3
 81076cc:	461a      	mov	r2, r3
 81076ce:	79fb      	ldrb	r3, [r7, #7]
 81076d0:	429a      	cmp	r2, r3
 81076d2:	d1d6      	bne.n	8107682 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81076d4:	2300      	movs	r3, #0
}
 81076d6:	4618      	mov	r0, r3
 81076d8:	3710      	adds	r7, #16
 81076da:	46bd      	mov	sp, r7
 81076dc:	bd80      	pop	{r7, pc}
	...

081076e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81076e0:	b480      	push	{r7}
 81076e2:	b089      	sub	sp, #36	; 0x24
 81076e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81076e6:	4baf      	ldr	r3, [pc, #700]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81076e8:	691b      	ldr	r3, [r3, #16]
 81076ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81076ee:	2b18      	cmp	r3, #24
 81076f0:	f200 814e 	bhi.w	8107990 <HAL_RCC_GetSysClockFreq+0x2b0>
 81076f4:	a201      	add	r2, pc, #4	; (adr r2, 81076fc <HAL_RCC_GetSysClockFreq+0x1c>)
 81076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076fa:	bf00      	nop
 81076fc:	08107761 	.word	0x08107761
 8107700:	08107991 	.word	0x08107991
 8107704:	08107991 	.word	0x08107991
 8107708:	08107991 	.word	0x08107991
 810770c:	08107991 	.word	0x08107991
 8107710:	08107991 	.word	0x08107991
 8107714:	08107991 	.word	0x08107991
 8107718:	08107991 	.word	0x08107991
 810771c:	08107787 	.word	0x08107787
 8107720:	08107991 	.word	0x08107991
 8107724:	08107991 	.word	0x08107991
 8107728:	08107991 	.word	0x08107991
 810772c:	08107991 	.word	0x08107991
 8107730:	08107991 	.word	0x08107991
 8107734:	08107991 	.word	0x08107991
 8107738:	08107991 	.word	0x08107991
 810773c:	0810778d 	.word	0x0810778d
 8107740:	08107991 	.word	0x08107991
 8107744:	08107991 	.word	0x08107991
 8107748:	08107991 	.word	0x08107991
 810774c:	08107991 	.word	0x08107991
 8107750:	08107991 	.word	0x08107991
 8107754:	08107991 	.word	0x08107991
 8107758:	08107991 	.word	0x08107991
 810775c:	08107793 	.word	0x08107793
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107760:	4b90      	ldr	r3, [pc, #576]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8107762:	681b      	ldr	r3, [r3, #0]
 8107764:	f003 0320 	and.w	r3, r3, #32
 8107768:	2b00      	cmp	r3, #0
 810776a:	d009      	beq.n	8107780 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810776c:	4b8d      	ldr	r3, [pc, #564]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810776e:	681b      	ldr	r3, [r3, #0]
 8107770:	08db      	lsrs	r3, r3, #3
 8107772:	f003 0303 	and.w	r3, r3, #3
 8107776:	4a8c      	ldr	r2, [pc, #560]	; (81079a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8107778:	fa22 f303 	lsr.w	r3, r2, r3
 810777c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810777e:	e10a      	b.n	8107996 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8107780:	4b89      	ldr	r3, [pc, #548]	; (81079a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8107782:	61bb      	str	r3, [r7, #24]
    break;
 8107784:	e107      	b.n	8107996 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8107786:	4b89      	ldr	r3, [pc, #548]	; (81079ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8107788:	61bb      	str	r3, [r7, #24]
    break;
 810778a:	e104      	b.n	8107996 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810778c:	4b88      	ldr	r3, [pc, #544]	; (81079b0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 810778e:	61bb      	str	r3, [r7, #24]
    break;
 8107790:	e101      	b.n	8107996 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107792:	4b84      	ldr	r3, [pc, #528]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8107794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107796:	f003 0303 	and.w	r3, r3, #3
 810779a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810779c:	4b81      	ldr	r3, [pc, #516]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81077a0:	091b      	lsrs	r3, r3, #4
 81077a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81077a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81077a8:	4b7e      	ldr	r3, [pc, #504]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81077ac:	f003 0301 	and.w	r3, r3, #1
 81077b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81077b2:	4b7c      	ldr	r3, [pc, #496]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81077b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81077b6:	08db      	lsrs	r3, r3, #3
 81077b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81077bc:	68fa      	ldr	r2, [r7, #12]
 81077be:	fb02 f303 	mul.w	r3, r2, r3
 81077c2:	ee07 3a90 	vmov	s15, r3
 81077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81077ce:	693b      	ldr	r3, [r7, #16]
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	f000 80da 	beq.w	810798a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81077d6:	697b      	ldr	r3, [r7, #20]
 81077d8:	2b01      	cmp	r3, #1
 81077da:	d05a      	beq.n	8107892 <HAL_RCC_GetSysClockFreq+0x1b2>
 81077dc:	2b01      	cmp	r3, #1
 81077de:	d302      	bcc.n	81077e6 <HAL_RCC_GetSysClockFreq+0x106>
 81077e0:	2b02      	cmp	r3, #2
 81077e2:	d078      	beq.n	81078d6 <HAL_RCC_GetSysClockFreq+0x1f6>
 81077e4:	e099      	b.n	810791a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81077e6:	4b6f      	ldr	r3, [pc, #444]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	f003 0320 	and.w	r3, r3, #32
 81077ee:	2b00      	cmp	r3, #0
 81077f0:	d02d      	beq.n	810784e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81077f2:	4b6c      	ldr	r3, [pc, #432]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	08db      	lsrs	r3, r3, #3
 81077f8:	f003 0303 	and.w	r3, r3, #3
 81077fc:	4a6a      	ldr	r2, [pc, #424]	; (81079a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 81077fe:	fa22 f303 	lsr.w	r3, r2, r3
 8107802:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	ee07 3a90 	vmov	s15, r3
 810780a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810780e:	693b      	ldr	r3, [r7, #16]
 8107810:	ee07 3a90 	vmov	s15, r3
 8107814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810781c:	4b61      	ldr	r3, [pc, #388]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107824:	ee07 3a90 	vmov	s15, r3
 8107828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810782c:	ed97 6a02 	vldr	s12, [r7, #8]
 8107830:	eddf 5a60 	vldr	s11, [pc, #384]	; 81079b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8107834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810783c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107848:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810784c:	e087      	b.n	810795e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810784e:	693b      	ldr	r3, [r7, #16]
 8107850:	ee07 3a90 	vmov	s15, r3
 8107854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107858:	eddf 6a57 	vldr	s13, [pc, #348]	; 81079b8 <HAL_RCC_GetSysClockFreq+0x2d8>
 810785c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107860:	4b50      	ldr	r3, [pc, #320]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8107862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107868:	ee07 3a90 	vmov	s15, r3
 810786c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107870:	ed97 6a02 	vldr	s12, [r7, #8]
 8107874:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81079b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8107878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810787c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107888:	ee67 7a27 	vmul.f32	s15, s14, s15
 810788c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107890:	e065      	b.n	810795e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107892:	693b      	ldr	r3, [r7, #16]
 8107894:	ee07 3a90 	vmov	s15, r3
 8107898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810789c:	eddf 6a47 	vldr	s13, [pc, #284]	; 81079bc <HAL_RCC_GetSysClockFreq+0x2dc>
 81078a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078a4:	4b3f      	ldr	r3, [pc, #252]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078ac:	ee07 3a90 	vmov	s15, r3
 81078b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078b4:	ed97 6a02 	vldr	s12, [r7, #8]
 81078b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81079b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 81078bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81078d4:	e043      	b.n	810795e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81078d6:	693b      	ldr	r3, [r7, #16]
 81078d8:	ee07 3a90 	vmov	s15, r3
 81078dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 81079c0 <HAL_RCC_GetSysClockFreq+0x2e0>
 81078e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078e8:	4b2e      	ldr	r3, [pc, #184]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078f0:	ee07 3a90 	vmov	s15, r3
 81078f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078f8:	ed97 6a02 	vldr	s12, [r7, #8]
 81078fc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81079b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8107900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810790c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107914:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107918:	e021      	b.n	810795e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810791a:	693b      	ldr	r3, [r7, #16]
 810791c:	ee07 3a90 	vmov	s15, r3
 8107920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107924:	eddf 6a25 	vldr	s13, [pc, #148]	; 81079bc <HAL_RCC_GetSysClockFreq+0x2dc>
 8107928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810792c:	4b1d      	ldr	r3, [pc, #116]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107934:	ee07 3a90 	vmov	s15, r3
 8107938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810793c:	ed97 6a02 	vldr	s12, [r7, #8]
 8107940:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81079b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8107944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810794c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107958:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810795c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810795e:	4b11      	ldr	r3, [pc, #68]	; (81079a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8107960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107962:	0a5b      	lsrs	r3, r3, #9
 8107964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107968:	3301      	adds	r3, #1
 810796a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810796c:	683b      	ldr	r3, [r7, #0]
 810796e:	ee07 3a90 	vmov	s15, r3
 8107972:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8107976:	edd7 6a07 	vldr	s13, [r7, #28]
 810797a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107982:	ee17 3a90 	vmov	r3, s15
 8107986:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8107988:	e005      	b.n	8107996 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 810798a:	2300      	movs	r3, #0
 810798c:	61bb      	str	r3, [r7, #24]
    break;
 810798e:	e002      	b.n	8107996 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8107990:	4b06      	ldr	r3, [pc, #24]	; (81079ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8107992:	61bb      	str	r3, [r7, #24]
    break;
 8107994:	bf00      	nop
  }

  return sysclockfreq;
 8107996:	69bb      	ldr	r3, [r7, #24]
}
 8107998:	4618      	mov	r0, r3
 810799a:	3724      	adds	r7, #36	; 0x24
 810799c:	46bd      	mov	sp, r7
 810799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079a2:	4770      	bx	lr
 81079a4:	58024400 	.word	0x58024400
 81079a8:	03d09000 	.word	0x03d09000
 81079ac:	003d0900 	.word	0x003d0900
 81079b0:	017d7840 	.word	0x017d7840
 81079b4:	46000000 	.word	0x46000000
 81079b8:	4c742400 	.word	0x4c742400
 81079bc:	4a742400 	.word	0x4a742400
 81079c0:	4bbebc20 	.word	0x4bbebc20

081079c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81079c4:	b580      	push	{r7, lr}
 81079c6:	b082      	sub	sp, #8
 81079c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81079ca:	f7ff fe89 	bl	81076e0 <HAL_RCC_GetSysClockFreq>
 81079ce:	4601      	mov	r1, r0
 81079d0:	4b11      	ldr	r3, [pc, #68]	; (8107a18 <HAL_RCC_GetHCLKFreq+0x54>)
 81079d2:	699b      	ldr	r3, [r3, #24]
 81079d4:	0a1b      	lsrs	r3, r3, #8
 81079d6:	f003 030f 	and.w	r3, r3, #15
 81079da:	4a10      	ldr	r2, [pc, #64]	; (8107a1c <HAL_RCC_GetHCLKFreq+0x58>)
 81079dc:	5cd3      	ldrb	r3, [r2, r3]
 81079de:	f003 031f 	and.w	r3, r3, #31
 81079e2:	fa21 f303 	lsr.w	r3, r1, r3
 81079e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81079e8:	4b0b      	ldr	r3, [pc, #44]	; (8107a18 <HAL_RCC_GetHCLKFreq+0x54>)
 81079ea:	699b      	ldr	r3, [r3, #24]
 81079ec:	f003 030f 	and.w	r3, r3, #15
 81079f0:	4a0a      	ldr	r2, [pc, #40]	; (8107a1c <HAL_RCC_GetHCLKFreq+0x58>)
 81079f2:	5cd3      	ldrb	r3, [r2, r3]
 81079f4:	f003 031f 	and.w	r3, r3, #31
 81079f8:	687a      	ldr	r2, [r7, #4]
 81079fa:	fa22 f303 	lsr.w	r3, r2, r3
 81079fe:	4a08      	ldr	r2, [pc, #32]	; (8107a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107a00:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8107a02:	4b07      	ldr	r3, [pc, #28]	; (8107a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	4a07      	ldr	r2, [pc, #28]	; (8107a24 <HAL_RCC_GetHCLKFreq+0x60>)
 8107a08:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8107a0a:	4b05      	ldr	r3, [pc, #20]	; (8107a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107a0c:	681b      	ldr	r3, [r3, #0]
}
 8107a0e:	4618      	mov	r0, r3
 8107a10:	3708      	adds	r7, #8
 8107a12:	46bd      	mov	sp, r7
 8107a14:	bd80      	pop	{r7, pc}
 8107a16:	bf00      	nop
 8107a18:	58024400 	.word	0x58024400
 8107a1c:	0810b690 	.word	0x0810b690
 8107a20:	10000004 	.word	0x10000004
 8107a24:	10000000 	.word	0x10000000

08107a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8107a28:	b580      	push	{r7, lr}
 8107a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8107a2c:	f7ff ffca 	bl	81079c4 <HAL_RCC_GetHCLKFreq>
 8107a30:	4601      	mov	r1, r0
 8107a32:	4b06      	ldr	r3, [pc, #24]	; (8107a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8107a34:	69db      	ldr	r3, [r3, #28]
 8107a36:	091b      	lsrs	r3, r3, #4
 8107a38:	f003 0307 	and.w	r3, r3, #7
 8107a3c:	4a04      	ldr	r2, [pc, #16]	; (8107a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8107a3e:	5cd3      	ldrb	r3, [r2, r3]
 8107a40:	f003 031f 	and.w	r3, r3, #31
 8107a44:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8107a48:	4618      	mov	r0, r3
 8107a4a:	bd80      	pop	{r7, pc}
 8107a4c:	58024400 	.word	0x58024400
 8107a50:	0810b690 	.word	0x0810b690

08107a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8107a54:	b580      	push	{r7, lr}
 8107a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8107a58:	f7ff ffb4 	bl	81079c4 <HAL_RCC_GetHCLKFreq>
 8107a5c:	4601      	mov	r1, r0
 8107a5e:	4b06      	ldr	r3, [pc, #24]	; (8107a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8107a60:	69db      	ldr	r3, [r3, #28]
 8107a62:	0a1b      	lsrs	r3, r3, #8
 8107a64:	f003 0307 	and.w	r3, r3, #7
 8107a68:	4a04      	ldr	r2, [pc, #16]	; (8107a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8107a6a:	5cd3      	ldrb	r3, [r2, r3]
 8107a6c:	f003 031f 	and.w	r3, r3, #31
 8107a70:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8107a74:	4618      	mov	r0, r3
 8107a76:	bd80      	pop	{r7, pc}
 8107a78:	58024400 	.word	0x58024400
 8107a7c:	0810b690 	.word	0x0810b690

08107a80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8107a80:	b580      	push	{r7, lr}
 8107a82:	b090      	sub	sp, #64	; 0x40
 8107a84:	af00      	add	r7, sp, #0
 8107a86:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107a8e:	d150      	bne.n	8107b32 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8107a90:	4ba1      	ldr	r3, [pc, #644]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107a94:	f003 0307 	and.w	r3, r3, #7
 8107a98:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107a9c:	2b04      	cmp	r3, #4
 8107a9e:	d844      	bhi.n	8107b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8107aa0:	a201      	add	r2, pc, #4	; (adr r2, 8107aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8107aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107aa6:	bf00      	nop
 8107aa8:	08107abd 	.word	0x08107abd
 8107aac:	08107acd 	.word	0x08107acd
 8107ab0:	08107add 	.word	0x08107add
 8107ab4:	08107b25 	.word	0x08107b25
 8107ab8:	08107aed 	.word	0x08107aed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107ac0:	4618      	mov	r0, r3
 8107ac2:	f000 fd03 	bl	81084cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107aca:	e241      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107acc:	f107 0318 	add.w	r3, r7, #24
 8107ad0:	4618      	mov	r0, r3
 8107ad2:	f000 fa63 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107ad6:	69bb      	ldr	r3, [r7, #24]
 8107ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107ada:	e239      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107adc:	f107 030c 	add.w	r3, r7, #12
 8107ae0:	4618      	mov	r0, r3
 8107ae2:	f000 fba7 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107ae6:	68fb      	ldr	r3, [r7, #12]
 8107ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107aea:	e231      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107aec:	4b8a      	ldr	r3, [pc, #552]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107af4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8107af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107af8:	2b00      	cmp	r3, #0
 8107afa:	d102      	bne.n	8107b02 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8107afc:	4b87      	ldr	r3, [pc, #540]	; (8107d1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8107b00:	e226      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8107b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107b08:	d102      	bne.n	8107b10 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8107b0a:	4b85      	ldr	r3, [pc, #532]	; (8107d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b0e:	e21f      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8107b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107b16:	d102      	bne.n	8107b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8107b18:	4b82      	ldr	r3, [pc, #520]	; (8107d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b1c:	e218      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8107b1e:	2300      	movs	r3, #0
 8107b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b22:	e215      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107b24:	4b80      	ldr	r3, [pc, #512]	; (8107d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8107b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b28:	e212      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8107b2a:	2300      	movs	r3, #0
 8107b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b2e:	bf00      	nop
 8107b30:	e20e      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107b32:	687b      	ldr	r3, [r7, #4]
 8107b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107b38:	d14f      	bne.n	8107bda <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8107b3a:	4b77      	ldr	r3, [pc, #476]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107b3e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8107b42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107b46:	2b80      	cmp	r3, #128	; 0x80
 8107b48:	d01c      	beq.n	8107b84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8107b4a:	2b80      	cmp	r3, #128	; 0x80
 8107b4c:	d804      	bhi.n	8107b58 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8107b4e:	2b00      	cmp	r3, #0
 8107b50:	d008      	beq.n	8107b64 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8107b52:	2b40      	cmp	r3, #64	; 0x40
 8107b54:	d00e      	beq.n	8107b74 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8107b56:	e03c      	b.n	8107bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8107b58:	2bc0      	cmp	r3, #192	; 0xc0
 8107b5a:	d037      	beq.n	8107bcc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8107b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107b60:	d018      	beq.n	8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8107b62:	e036      	b.n	8107bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107b68:	4618      	mov	r0, r3
 8107b6a:	f000 fcaf 	bl	81084cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b72:	e1ed      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b74:	f107 0318 	add.w	r3, r7, #24
 8107b78:	4618      	mov	r0, r3
 8107b7a:	f000 fa0f 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107b7e:	69bb      	ldr	r3, [r7, #24]
 8107b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b82:	e1e5      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b84:	f107 030c 	add.w	r3, r7, #12
 8107b88:	4618      	mov	r0, r3
 8107b8a:	f000 fb53 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107b8e:	68fb      	ldr	r3, [r7, #12]
 8107b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b92:	e1dd      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107b94:	4b60      	ldr	r3, [pc, #384]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107b9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8107b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107ba0:	2b00      	cmp	r3, #0
 8107ba2:	d102      	bne.n	8107baa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8107ba4:	4b5d      	ldr	r3, [pc, #372]	; (8107d1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8107ba8:	e1d2      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8107baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107bb0:	d102      	bne.n	8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8107bb2:	4b5b      	ldr	r3, [pc, #364]	; (8107d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107bb6:	e1cb      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8107bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107bbe:	d102      	bne.n	8107bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8107bc0:	4b58      	ldr	r3, [pc, #352]	; (8107d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107bc4:	e1c4      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8107bc6:	2300      	movs	r3, #0
 8107bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107bca:	e1c1      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107bcc:	4b56      	ldr	r3, [pc, #344]	; (8107d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8107bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107bd0:	e1be      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8107bd2:	2300      	movs	r3, #0
 8107bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107bd6:	bf00      	nop
 8107bd8:	e1ba      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107be0:	d153      	bne.n	8107c8a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8107be2:	4b4d      	ldr	r3, [pc, #308]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107be6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8107bea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107bf2:	d01f      	beq.n	8107c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8107bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107bf8:	d805      	bhi.n	8107c06 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8107bfa:	2b00      	cmp	r3, #0
 8107bfc:	d00a      	beq.n	8107c14 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8107bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107c02:	d00f      	beq.n	8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8107c04:	e03d      	b.n	8107c82 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8107c06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107c0a:	d037      	beq.n	8107c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8107c0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107c10:	d018      	beq.n	8107c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8107c12:	e036      	b.n	8107c82 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107c18:	4618      	mov	r0, r3
 8107c1a:	f000 fc57 	bl	81084cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c22:	e195      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c24:	f107 0318 	add.w	r3, r7, #24
 8107c28:	4618      	mov	r0, r3
 8107c2a:	f000 f9b7 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107c2e:	69bb      	ldr	r3, [r7, #24]
 8107c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c32:	e18d      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107c34:	f107 030c 	add.w	r3, r7, #12
 8107c38:	4618      	mov	r0, r3
 8107c3a:	f000 fafb 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107c3e:	68fb      	ldr	r3, [r7, #12]
 8107c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c42:	e185      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107c44:	4b34      	ldr	r3, [pc, #208]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107c4c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8107c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107c50:	2b00      	cmp	r3, #0
 8107c52:	d102      	bne.n	8107c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8107c54:	4b31      	ldr	r3, [pc, #196]	; (8107d1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8107c58:	e17a      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8107c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107c60:	d102      	bne.n	8107c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8107c62:	4b2f      	ldr	r3, [pc, #188]	; (8107d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c66:	e173      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8107c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107c6e:	d102      	bne.n	8107c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8107c70:	4b2c      	ldr	r3, [pc, #176]	; (8107d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c74:	e16c      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8107c76:	2300      	movs	r3, #0
 8107c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c7a:	e169      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107c7c:	4b2a      	ldr	r3, [pc, #168]	; (8107d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8107c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c80:	e166      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8107c82:	2300      	movs	r3, #0
 8107c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c86:	bf00      	nop
 8107c88:	e162      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107c90:	d15d      	bne.n	8107d4e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8107c92:	4b21      	ldr	r3, [pc, #132]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107c96:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8107c9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107ca2:	d01f      	beq.n	8107ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8107ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107ca8:	d805      	bhi.n	8107cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8107caa:	2b00      	cmp	r3, #0
 8107cac:	d00a      	beq.n	8107cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8107cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107cb2:	d00f      	beq.n	8107cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8107cb4:	e047      	b.n	8107d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8107cb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107cba:	d041      	beq.n	8107d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8107cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107cc0:	d018      	beq.n	8107cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8107cc2:	e040      	b.n	8107d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107cc8:	4618      	mov	r0, r3
 8107cca:	f000 fbff 	bl	81084cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107cd2:	e13d      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107cd4:	f107 0318 	add.w	r3, r7, #24
 8107cd8:	4618      	mov	r0, r3
 8107cda:	f000 f95f 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107cde:	69bb      	ldr	r3, [r7, #24]
 8107ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107ce2:	e135      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107ce4:	f107 030c 	add.w	r3, r7, #12
 8107ce8:	4618      	mov	r0, r3
 8107cea:	f000 faa3 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107cee:	68fb      	ldr	r3, [r7, #12]
 8107cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107cf2:	e12d      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107cf4:	4b08      	ldr	r3, [pc, #32]	; (8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107cfc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8107cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107d00:	2b00      	cmp	r3, #0
 8107d02:	d102      	bne.n	8107d0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8107d04:	4b05      	ldr	r3, [pc, #20]	; (8107d1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8107d08:	e122      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8107d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107d10:	d10c      	bne.n	8107d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8107d12:	4b03      	ldr	r3, [pc, #12]	; (8107d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d16:	e11b      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8107d18:	58024400 	.word	0x58024400
 8107d1c:	03d09000 	.word	0x03d09000
 8107d20:	003d0900 	.word	0x003d0900
 8107d24:	017d7840 	.word	0x017d7840
 8107d28:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8107d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107d32:	d102      	bne.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8107d34:	4b89      	ldr	r3, [pc, #548]	; (8107f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8107d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d38:	e10a      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8107d3a:	2300      	movs	r3, #0
 8107d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d3e:	e107      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107d40:	4b87      	ldr	r3, [pc, #540]	; (8107f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8107d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d44:	e104      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8107d46:	2300      	movs	r3, #0
 8107d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d4a:	bf00      	nop
 8107d4c:	e100      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8107d4e:	687b      	ldr	r3, [r7, #4]
 8107d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107d54:	d153      	bne.n	8107dfe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8107d56:	4b83      	ldr	r3, [pc, #524]	; (8107f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8107d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107d5a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8107d5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107d66:	d01f      	beq.n	8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8107d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107d6c:	d805      	bhi.n	8107d7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8107d6e:	2b00      	cmp	r3, #0
 8107d70:	d00a      	beq.n	8107d88 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8107d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107d76:	d00f      	beq.n	8107d98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8107d78:	e03d      	b.n	8107df6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8107d7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107d7e:	d037      	beq.n	8107df0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8107d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107d84:	d018      	beq.n	8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8107d86:	e036      	b.n	8107df6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107d8c:	4618      	mov	r0, r3
 8107d8e:	f000 fb9d 	bl	81084cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d96:	e0db      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107d98:	f107 0318 	add.w	r3, r7, #24
 8107d9c:	4618      	mov	r0, r3
 8107d9e:	f000 f8fd 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107da2:	69bb      	ldr	r3, [r7, #24]
 8107da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107da6:	e0d3      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107da8:	f107 030c 	add.w	r3, r7, #12
 8107dac:	4618      	mov	r0, r3
 8107dae:	f000 fa41 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107db2:	68fb      	ldr	r3, [r7, #12]
 8107db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107db6:	e0cb      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107db8:	4b6a      	ldr	r3, [pc, #424]	; (8107f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8107dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107dc0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8107dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107dc4:	2b00      	cmp	r3, #0
 8107dc6:	d102      	bne.n	8107dce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8107dc8:	4b67      	ldr	r3, [pc, #412]	; (8107f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8107dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8107dcc:	e0c0      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8107dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107dd4:	d102      	bne.n	8107ddc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8107dd6:	4b65      	ldr	r3, [pc, #404]	; (8107f6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8107dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107dda:	e0b9      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8107ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107de2:	d102      	bne.n	8107dea <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8107de4:	4b5d      	ldr	r3, [pc, #372]	; (8107f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8107de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107de8:	e0b2      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8107dea:	2300      	movs	r3, #0
 8107dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107dee:	e0af      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107df0:	4b5b      	ldr	r3, [pc, #364]	; (8107f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8107df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107df4:	e0ac      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8107df6:	2300      	movs	r3, #0
 8107df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107dfa:	bf00      	nop
 8107dfc:	e0a8      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8107e04:	d13d      	bne.n	8107e82 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8107e06:	4b57      	ldr	r3, [pc, #348]	; (8107f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8107e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107e0e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107e16:	d00c      	beq.n	8107e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8107e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107e1c:	d011      	beq.n	8107e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8107e1e:	2b00      	cmp	r3, #0
 8107e20:	d12b      	bne.n	8107e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107e22:	f107 0318 	add.w	r3, r7, #24
 8107e26:	4618      	mov	r0, r3
 8107e28:	f000 f8b8 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107e2c:	69bb      	ldr	r3, [r7, #24]
 8107e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e30:	e08e      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107e32:	f107 030c 	add.w	r3, r7, #12
 8107e36:	4618      	mov	r0, r3
 8107e38:	f000 f9fc 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107e3c:	697b      	ldr	r3, [r7, #20]
 8107e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e40:	e086      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107e42:	4b48      	ldr	r3, [pc, #288]	; (8107f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8107e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107e46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107e4a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8107e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e4e:	2b00      	cmp	r3, #0
 8107e50:	d102      	bne.n	8107e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8107e52:	4b45      	ldr	r3, [pc, #276]	; (8107f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8107e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8107e56:	e07b      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8107e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e5e:	d102      	bne.n	8107e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8107e60:	4b42      	ldr	r3, [pc, #264]	; (8107f6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8107e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e64:	e074      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8107e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107e6c:	d102      	bne.n	8107e74 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8107e6e:	4b3b      	ldr	r3, [pc, #236]	; (8107f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8107e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e72:	e06d      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8107e74:	2300      	movs	r3, #0
 8107e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e78:	e06a      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8107e7a:	2300      	movs	r3, #0
 8107e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e7e:	bf00      	nop
 8107e80:	e066      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107e88:	d11f      	bne.n	8107eca <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8107e8a:	4b36      	ldr	r3, [pc, #216]	; (8107f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8107e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107e92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107e96:	2b00      	cmp	r3, #0
 8107e98:	d003      	beq.n	8107ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8107e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107e9e:	d008      	beq.n	8107eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8107ea0:	e00f      	b.n	8107ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107ea6:	4618      	mov	r0, r3
 8107ea8:	f000 fb10 	bl	81084cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107eb0:	e04e      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107eb2:	f107 0318 	add.w	r3, r7, #24
 8107eb6:	4618      	mov	r0, r3
 8107eb8:	f000 f870 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107ebc:	6a3b      	ldr	r3, [r7, #32]
 8107ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107ec0:	e046      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8107ec2:	2300      	movs	r3, #0
 8107ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107ec6:	bf00      	nop
 8107ec8:	e042      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107ed0:	d13c      	bne.n	8107f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8107ed2:	4b24      	ldr	r3, [pc, #144]	; (8107f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8107ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107ed6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8107eda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107ee2:	d01e      	beq.n	8107f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8107ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107ee8:	d805      	bhi.n	8107ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8107eea:	2b00      	cmp	r3, #0
 8107eec:	d00d      	beq.n	8107f0a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8107eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107ef2:	d00e      	beq.n	8107f12 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8107ef4:	e026      	b.n	8107f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8107ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107efa:	d01d      	beq.n	8107f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8107efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107f00:	d01d      	beq.n	8107f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8107f02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107f06:	d014      	beq.n	8107f32 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8107f08:	e01c      	b.n	8107f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107f0a:	f000 f831 	bl	8107f70 <HAL_RCCEx_GetD3PCLK1Freq>
 8107f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8107f10:	e01e      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f12:	f107 0318 	add.w	r3, r7, #24
 8107f16:	4618      	mov	r0, r3
 8107f18:	f000 f840 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107f1c:	69fb      	ldr	r3, [r7, #28]
 8107f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f20:	e016      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f22:	f107 030c 	add.w	r3, r7, #12
 8107f26:	4618      	mov	r0, r3
 8107f28:	f000 f984 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107f2c:	693b      	ldr	r3, [r7, #16]
 8107f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f30:	e00e      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8107f32:	4b0d      	ldr	r3, [pc, #52]	; (8107f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8107f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f36:	e00b      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8107f38:	4b0c      	ldr	r3, [pc, #48]	; (8107f6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8107f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f3c:	e008      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8107f3e:	4b07      	ldr	r3, [pc, #28]	; (8107f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8107f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f42:	e005      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8107f44:	2300      	movs	r3, #0
 8107f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f48:	bf00      	nop
 8107f4a:	e001      	b.n	8107f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8107f4c:	2300      	movs	r3, #0
 8107f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8107f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8107f52:	4618      	mov	r0, r3
 8107f54:	3740      	adds	r7, #64	; 0x40
 8107f56:	46bd      	mov	sp, r7
 8107f58:	bd80      	pop	{r7, pc}
 8107f5a:	bf00      	nop
 8107f5c:	017d7840 	.word	0x017d7840
 8107f60:	00bb8000 	.word	0x00bb8000
 8107f64:	58024400 	.word	0x58024400
 8107f68:	03d09000 	.word	0x03d09000
 8107f6c:	003d0900 	.word	0x003d0900

08107f70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107f70:	b580      	push	{r7, lr}
 8107f72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107f74:	f7ff fd26 	bl	81079c4 <HAL_RCC_GetHCLKFreq>
 8107f78:	4601      	mov	r1, r0
 8107f7a:	4b06      	ldr	r3, [pc, #24]	; (8107f94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107f7c:	6a1b      	ldr	r3, [r3, #32]
 8107f7e:	091b      	lsrs	r3, r3, #4
 8107f80:	f003 0307 	and.w	r3, r3, #7
 8107f84:	4a04      	ldr	r2, [pc, #16]	; (8107f98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8107f86:	5cd3      	ldrb	r3, [r2, r3]
 8107f88:	f003 031f 	and.w	r3, r3, #31
 8107f8c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107f90:	4618      	mov	r0, r3
 8107f92:	bd80      	pop	{r7, pc}
 8107f94:	58024400 	.word	0x58024400
 8107f98:	0810b690 	.word	0x0810b690

08107f9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8107f9c:	b480      	push	{r7}
 8107f9e:	b089      	sub	sp, #36	; 0x24
 8107fa0:	af00      	add	r7, sp, #0
 8107fa2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107fa4:	4b9d      	ldr	r3, [pc, #628]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8107fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fa8:	f003 0303 	and.w	r3, r3, #3
 8107fac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8107fae:	4b9b      	ldr	r3, [pc, #620]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8107fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fb2:	0b1b      	lsrs	r3, r3, #12
 8107fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107fb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8107fba:	4b98      	ldr	r3, [pc, #608]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8107fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fbe:	091b      	lsrs	r3, r3, #4
 8107fc0:	f003 0301 	and.w	r3, r3, #1
 8107fc4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8107fc6:	4b95      	ldr	r3, [pc, #596]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8107fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fca:	08db      	lsrs	r3, r3, #3
 8107fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107fd0:	693a      	ldr	r2, [r7, #16]
 8107fd2:	fb02 f303 	mul.w	r3, r2, r3
 8107fd6:	ee07 3a90 	vmov	s15, r3
 8107fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107fe2:	697b      	ldr	r3, [r7, #20]
 8107fe4:	2b00      	cmp	r3, #0
 8107fe6:	f000 810a 	beq.w	81081fe <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8107fea:	69bb      	ldr	r3, [r7, #24]
 8107fec:	2b01      	cmp	r3, #1
 8107fee:	d05a      	beq.n	81080a6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8107ff0:	2b01      	cmp	r3, #1
 8107ff2:	d302      	bcc.n	8107ffa <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8107ff4:	2b02      	cmp	r3, #2
 8107ff6:	d078      	beq.n	81080ea <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8107ff8:	e099      	b.n	810812e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107ffa:	4b88      	ldr	r3, [pc, #544]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8107ffc:	681b      	ldr	r3, [r3, #0]
 8107ffe:	f003 0320 	and.w	r3, r3, #32
 8108002:	2b00      	cmp	r3, #0
 8108004:	d02d      	beq.n	8108062 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108006:	4b85      	ldr	r3, [pc, #532]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8108008:	681b      	ldr	r3, [r3, #0]
 810800a:	08db      	lsrs	r3, r3, #3
 810800c:	f003 0303 	and.w	r3, r3, #3
 8108010:	4a83      	ldr	r2, [pc, #524]	; (8108220 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8108012:	fa22 f303 	lsr.w	r3, r2, r3
 8108016:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8108018:	68bb      	ldr	r3, [r7, #8]
 810801a:	ee07 3a90 	vmov	s15, r3
 810801e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108022:	697b      	ldr	r3, [r7, #20]
 8108024:	ee07 3a90 	vmov	s15, r3
 8108028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810802c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108030:	4b7a      	ldr	r3, [pc, #488]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8108032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108038:	ee07 3a90 	vmov	s15, r3
 810803c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108040:	ed97 6a03 	vldr	s12, [r7, #12]
 8108044:	eddf 5a77 	vldr	s11, [pc, #476]	; 8108224 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8108048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810804c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108058:	ee67 7a27 	vmul.f32	s15, s14, s15
 810805c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8108060:	e087      	b.n	8108172 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8108062:	697b      	ldr	r3, [r7, #20]
 8108064:	ee07 3a90 	vmov	s15, r3
 8108068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810806c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8108228 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8108070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108074:	4b69      	ldr	r3, [pc, #420]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8108076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810807c:	ee07 3a90 	vmov	s15, r3
 8108080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108084:	ed97 6a03 	vldr	s12, [r7, #12]
 8108088:	eddf 5a66 	vldr	s11, [pc, #408]	; 8108224 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 810808c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810809c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81080a4:	e065      	b.n	8108172 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81080a6:	697b      	ldr	r3, [r7, #20]
 81080a8:	ee07 3a90 	vmov	s15, r3
 81080ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81080b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080b8:	4b58      	ldr	r3, [pc, #352]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81080bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080c0:	ee07 3a90 	vmov	s15, r3
 81080c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080c8:	ed97 6a03 	vldr	s12, [r7, #12]
 81080cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8108224 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81080d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81080dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81080e8:	e043      	b.n	8108172 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81080ea:	697b      	ldr	r3, [r7, #20]
 81080ec:	ee07 3a90 	vmov	s15, r3
 81080f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8108230 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81080f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080fc:	4b47      	ldr	r3, [pc, #284]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108104:	ee07 3a90 	vmov	s15, r3
 8108108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810810c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108110:	eddf 5a44 	vldr	s11, [pc, #272]	; 8108224 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8108114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810811c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108128:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810812c:	e021      	b.n	8108172 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810812e:	697b      	ldr	r3, [r7, #20]
 8108130:	ee07 3a90 	vmov	s15, r3
 8108134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108138:	eddf 6a3c 	vldr	s13, [pc, #240]	; 810822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 810813c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108140:	4b36      	ldr	r3, [pc, #216]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8108142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108148:	ee07 3a90 	vmov	s15, r3
 810814c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108150:	ed97 6a03 	vldr	s12, [r7, #12]
 8108154:	eddf 5a33 	vldr	s11, [pc, #204]	; 8108224 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8108158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810815c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108168:	ee67 7a27 	vmul.f32	s15, s14, s15
 810816c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108170:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8108172:	4b2a      	ldr	r3, [pc, #168]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8108174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108176:	0a5b      	lsrs	r3, r3, #9
 8108178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810817c:	ee07 3a90 	vmov	s15, r3
 8108180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108188:	ee37 7a87 	vadd.f32	s14, s15, s14
 810818c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108198:	ee17 2a90 	vmov	r2, s15
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81081a0:	4b1e      	ldr	r3, [pc, #120]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081a4:	0c1b      	lsrs	r3, r3, #16
 81081a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81081aa:	ee07 3a90 	vmov	s15, r3
 81081ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81081b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81081b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81081ba:	edd7 6a07 	vldr	s13, [r7, #28]
 81081be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81081c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81081c6:	ee17 2a90 	vmov	r2, s15
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81081ce:	4b13      	ldr	r3, [pc, #76]	; (810821c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81081d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081d2:	0e1b      	lsrs	r3, r3, #24
 81081d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81081d8:	ee07 3a90 	vmov	s15, r3
 81081dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81081e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81081e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81081e8:	edd7 6a07 	vldr	s13, [r7, #28]
 81081ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81081f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81081f4:	ee17 2a90 	vmov	r2, s15
 81081f8:	687b      	ldr	r3, [r7, #4]
 81081fa:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81081fc:	e008      	b.n	8108210 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81081fe:	687b      	ldr	r3, [r7, #4]
 8108200:	2200      	movs	r2, #0
 8108202:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	2200      	movs	r2, #0
 8108208:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810820a:	687b      	ldr	r3, [r7, #4]
 810820c:	2200      	movs	r2, #0
 810820e:	609a      	str	r2, [r3, #8]
}
 8108210:	bf00      	nop
 8108212:	3724      	adds	r7, #36	; 0x24
 8108214:	46bd      	mov	sp, r7
 8108216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810821a:	4770      	bx	lr
 810821c:	58024400 	.word	0x58024400
 8108220:	03d09000 	.word	0x03d09000
 8108224:	46000000 	.word	0x46000000
 8108228:	4c742400 	.word	0x4c742400
 810822c:	4a742400 	.word	0x4a742400
 8108230:	4bbebc20 	.word	0x4bbebc20

08108234 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8108234:	b480      	push	{r7}
 8108236:	b089      	sub	sp, #36	; 0x24
 8108238:	af00      	add	r7, sp, #0
 810823a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810823c:	4b9d      	ldr	r3, [pc, #628]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108240:	f003 0303 	and.w	r3, r3, #3
 8108244:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8108246:	4b9b      	ldr	r3, [pc, #620]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8108248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810824a:	0d1b      	lsrs	r3, r3, #20
 810824c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108250:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8108252:	4b98      	ldr	r3, [pc, #608]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8108254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108256:	0a1b      	lsrs	r3, r3, #8
 8108258:	f003 0301 	and.w	r3, r3, #1
 810825c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810825e:	4b95      	ldr	r3, [pc, #596]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8108260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108262:	08db      	lsrs	r3, r3, #3
 8108264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108268:	693a      	ldr	r2, [r7, #16]
 810826a:	fb02 f303 	mul.w	r3, r2, r3
 810826e:	ee07 3a90 	vmov	s15, r3
 8108272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810827a:	697b      	ldr	r3, [r7, #20]
 810827c:	2b00      	cmp	r3, #0
 810827e:	f000 810a 	beq.w	8108496 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8108282:	69bb      	ldr	r3, [r7, #24]
 8108284:	2b01      	cmp	r3, #1
 8108286:	d05a      	beq.n	810833e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8108288:	2b01      	cmp	r3, #1
 810828a:	d302      	bcc.n	8108292 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 810828c:	2b02      	cmp	r3, #2
 810828e:	d078      	beq.n	8108382 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8108290:	e099      	b.n	81083c6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108292:	4b88      	ldr	r3, [pc, #544]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8108294:	681b      	ldr	r3, [r3, #0]
 8108296:	f003 0320 	and.w	r3, r3, #32
 810829a:	2b00      	cmp	r3, #0
 810829c:	d02d      	beq.n	81082fa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810829e:	4b85      	ldr	r3, [pc, #532]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	08db      	lsrs	r3, r3, #3
 81082a4:	f003 0303 	and.w	r3, r3, #3
 81082a8:	4a83      	ldr	r2, [pc, #524]	; (81084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 81082aa:	fa22 f303 	lsr.w	r3, r2, r3
 81082ae:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81082b0:	68bb      	ldr	r3, [r7, #8]
 81082b2:	ee07 3a90 	vmov	s15, r3
 81082b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082ba:	697b      	ldr	r3, [r7, #20]
 81082bc:	ee07 3a90 	vmov	s15, r3
 81082c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81082c8:	4b7a      	ldr	r3, [pc, #488]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81082cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81082d0:	ee07 3a90 	vmov	s15, r3
 81082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082d8:	ed97 6a03 	vldr	s12, [r7, #12]
 81082dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 81084bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81082e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81082ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81082f8:	e087      	b.n	810840a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81082fa:	697b      	ldr	r3, [r7, #20]
 81082fc:	ee07 3a90 	vmov	s15, r3
 8108300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108304:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8108308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810830c:	4b69      	ldr	r3, [pc, #420]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108314:	ee07 3a90 	vmov	s15, r3
 8108318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810831c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108320:	eddf 5a66 	vldr	s11, [pc, #408]	; 81084bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8108324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810832c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810833c:	e065      	b.n	810840a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810833e:	697b      	ldr	r3, [r7, #20]
 8108340:	ee07 3a90 	vmov	s15, r3
 8108344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108348:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81084c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 810834c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108350:	4b58      	ldr	r3, [pc, #352]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8108352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108358:	ee07 3a90 	vmov	s15, r3
 810835c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108360:	ed97 6a03 	vldr	s12, [r7, #12]
 8108364:	eddf 5a55 	vldr	s11, [pc, #340]	; 81084bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8108368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810836c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108378:	ee67 7a27 	vmul.f32	s15, s14, s15
 810837c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108380:	e043      	b.n	810840a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108382:	697b      	ldr	r3, [r7, #20]
 8108384:	ee07 3a90 	vmov	s15, r3
 8108388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810838c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8108390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108394:	4b47      	ldr	r3, [pc, #284]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8108396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810839c:	ee07 3a90 	vmov	s15, r3
 81083a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083a4:	ed97 6a03 	vldr	s12, [r7, #12]
 81083a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 81084bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81083ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81083b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81083b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81083b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81083bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81083c4:	e021      	b.n	810840a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81083c6:	697b      	ldr	r3, [r7, #20]
 81083c8:	ee07 3a90 	vmov	s15, r3
 81083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083d0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81084c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81083d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81083d8:	4b36      	ldr	r3, [pc, #216]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81083e0:	ee07 3a90 	vmov	s15, r3
 81083e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083e8:	ed97 6a03 	vldr	s12, [r7, #12]
 81083ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 81084bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81083f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81083f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81083f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81083fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108408:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810840a:	4b2a      	ldr	r3, [pc, #168]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810840c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810840e:	0a5b      	lsrs	r3, r3, #9
 8108410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108414:	ee07 3a90 	vmov	s15, r3
 8108418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810841c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108420:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108424:	edd7 6a07 	vldr	s13, [r7, #28]
 8108428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810842c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108430:	ee17 2a90 	vmov	r2, s15
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8108438:	4b1e      	ldr	r3, [pc, #120]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810843c:	0c1b      	lsrs	r3, r3, #16
 810843e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108442:	ee07 3a90 	vmov	s15, r3
 8108446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810844a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810844e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108452:	edd7 6a07 	vldr	s13, [r7, #28]
 8108456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810845a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810845e:	ee17 2a90 	vmov	r2, s15
 8108462:	687b      	ldr	r3, [r7, #4]
 8108464:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8108466:	4b13      	ldr	r3, [pc, #76]	; (81084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8108468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810846a:	0e1b      	lsrs	r3, r3, #24
 810846c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108470:	ee07 3a90 	vmov	s15, r3
 8108474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810847c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108480:	edd7 6a07 	vldr	s13, [r7, #28]
 8108484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810848c:	ee17 2a90 	vmov	r2, s15
 8108490:	687b      	ldr	r3, [r7, #4]
 8108492:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108494:	e008      	b.n	81084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	2200      	movs	r2, #0
 810849a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	2200      	movs	r2, #0
 81084a0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	2200      	movs	r2, #0
 81084a6:	609a      	str	r2, [r3, #8]
}
 81084a8:	bf00      	nop
 81084aa:	3724      	adds	r7, #36	; 0x24
 81084ac:	46bd      	mov	sp, r7
 81084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084b2:	4770      	bx	lr
 81084b4:	58024400 	.word	0x58024400
 81084b8:	03d09000 	.word	0x03d09000
 81084bc:	46000000 	.word	0x46000000
 81084c0:	4c742400 	.word	0x4c742400
 81084c4:	4a742400 	.word	0x4a742400
 81084c8:	4bbebc20 	.word	0x4bbebc20

081084cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 81084cc:	b480      	push	{r7}
 81084ce:	b089      	sub	sp, #36	; 0x24
 81084d0:	af00      	add	r7, sp, #0
 81084d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81084d4:	4b9d      	ldr	r3, [pc, #628]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81084d8:	f003 0303 	and.w	r3, r3, #3
 81084dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 81084de:	4b9b      	ldr	r3, [pc, #620]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81084e2:	091b      	lsrs	r3, r3, #4
 81084e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81084e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81084ea:	4b98      	ldr	r3, [pc, #608]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81084ee:	f003 0301 	and.w	r3, r3, #1
 81084f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81084f4:	4b95      	ldr	r3, [pc, #596]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81084f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81084f8:	08db      	lsrs	r3, r3, #3
 81084fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81084fe:	693a      	ldr	r2, [r7, #16]
 8108500:	fb02 f303 	mul.w	r3, r2, r3
 8108504:	ee07 3a90 	vmov	s15, r3
 8108508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810850c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108510:	697b      	ldr	r3, [r7, #20]
 8108512:	2b00      	cmp	r3, #0
 8108514:	f000 810a 	beq.w	810872c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8108518:	69bb      	ldr	r3, [r7, #24]
 810851a:	2b01      	cmp	r3, #1
 810851c:	d05a      	beq.n	81085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 810851e:	2b01      	cmp	r3, #1
 8108520:	d302      	bcc.n	8108528 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8108522:	2b02      	cmp	r3, #2
 8108524:	d078      	beq.n	8108618 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8108526:	e099      	b.n	810865c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108528:	4b88      	ldr	r3, [pc, #544]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 810852a:	681b      	ldr	r3, [r3, #0]
 810852c:	f003 0320 	and.w	r3, r3, #32
 8108530:	2b00      	cmp	r3, #0
 8108532:	d02d      	beq.n	8108590 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108534:	4b85      	ldr	r3, [pc, #532]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8108536:	681b      	ldr	r3, [r3, #0]
 8108538:	08db      	lsrs	r3, r3, #3
 810853a:	f003 0303 	and.w	r3, r3, #3
 810853e:	4a84      	ldr	r2, [pc, #528]	; (8108750 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8108540:	fa22 f303 	lsr.w	r3, r2, r3
 8108544:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108546:	68bb      	ldr	r3, [r7, #8]
 8108548:	ee07 3a90 	vmov	s15, r3
 810854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108550:	697b      	ldr	r3, [r7, #20]
 8108552:	ee07 3a90 	vmov	s15, r3
 8108556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810855e:	4b7b      	ldr	r3, [pc, #492]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8108560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108566:	ee07 3a90 	vmov	s15, r3
 810856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810856e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108572:	eddf 5a78 	vldr	s11, [pc, #480]	; 8108754 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8108576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810857e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108586:	ee67 7a27 	vmul.f32	s15, s14, s15
 810858a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810858e:	e087      	b.n	81086a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108590:	697b      	ldr	r3, [r7, #20]
 8108592:	ee07 3a90 	vmov	s15, r3
 8108596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810859a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8108758 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 810859e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085a2:	4b6a      	ldr	r3, [pc, #424]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81085a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81085aa:	ee07 3a90 	vmov	s15, r3
 81085ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81085b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8108754 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 81085ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81085c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81085ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81085ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81085d2:	e065      	b.n	81086a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81085d4:	697b      	ldr	r3, [r7, #20]
 81085d6:	ee07 3a90 	vmov	s15, r3
 81085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810875c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 81085e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085e6:	4b59      	ldr	r3, [pc, #356]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81085ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81085ee:	ee07 3a90 	vmov	s15, r3
 81085f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81085fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8108754 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 81085fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810860a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810860e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108616:	e043      	b.n	81086a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108618:	697b      	ldr	r3, [r7, #20]
 810861a:	ee07 3a90 	vmov	s15, r3
 810861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108622:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8108760 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810862a:	4b48      	ldr	r3, [pc, #288]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 810862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108632:	ee07 3a90 	vmov	s15, r3
 8108636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810863a:	ed97 6a03 	vldr	s12, [r7, #12]
 810863e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8108754 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8108642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810864a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810865a:	e021      	b.n	81086a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810865c:	697b      	ldr	r3, [r7, #20]
 810865e:	ee07 3a90 	vmov	s15, r3
 8108662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108666:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810875c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 810866a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810866e:	4b37      	ldr	r3, [pc, #220]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8108670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108676:	ee07 3a90 	vmov	s15, r3
 810867a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810867e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108682:	eddf 5a34 	vldr	s11, [pc, #208]	; 8108754 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8108686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810868a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810868e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108696:	ee67 7a27 	vmul.f32	s15, s14, s15
 810869a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810869e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 81086a0:	4b2a      	ldr	r3, [pc, #168]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81086a4:	0a5b      	lsrs	r3, r3, #9
 81086a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81086aa:	ee07 3a90 	vmov	s15, r3
 81086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81086b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81086ba:	edd7 6a07 	vldr	s13, [r7, #28]
 81086be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086c6:	ee17 2a90 	vmov	r2, s15
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 81086ce:	4b1f      	ldr	r3, [pc, #124]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81086d2:	0c1b      	lsrs	r3, r3, #16
 81086d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81086d8:	ee07 3a90 	vmov	s15, r3
 81086dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81086e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81086e8:	edd7 6a07 	vldr	s13, [r7, #28]
 81086ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086f4:	ee17 2a90 	vmov	r2, s15
 81086f8:	687b      	ldr	r3, [r7, #4]
 81086fa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 81086fc:	4b13      	ldr	r3, [pc, #76]	; (810874c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108700:	0e1b      	lsrs	r3, r3, #24
 8108702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108706:	ee07 3a90 	vmov	s15, r3
 810870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810870e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108716:	edd7 6a07 	vldr	s13, [r7, #28]
 810871a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810871e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108722:	ee17 2a90 	vmov	r2, s15
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810872a:	e008      	b.n	810873e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	2200      	movs	r2, #0
 8108730:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	2200      	movs	r2, #0
 8108736:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	2200      	movs	r2, #0
 810873c:	609a      	str	r2, [r3, #8]
}
 810873e:	bf00      	nop
 8108740:	3724      	adds	r7, #36	; 0x24
 8108742:	46bd      	mov	sp, r7
 8108744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108748:	4770      	bx	lr
 810874a:	bf00      	nop
 810874c:	58024400 	.word	0x58024400
 8108750:	03d09000 	.word	0x03d09000
 8108754:	46000000 	.word	0x46000000
 8108758:	4c742400 	.word	0x4c742400
 810875c:	4a742400 	.word	0x4a742400
 8108760:	4bbebc20 	.word	0x4bbebc20

08108764 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8108764:	b580      	push	{r7, lr}
 8108766:	b08a      	sub	sp, #40	; 0x28
 8108768:	af00      	add	r7, sp, #0
 810876a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 810876c:	687b      	ldr	r3, [r7, #4]
 810876e:	2b00      	cmp	r3, #0
 8108770:	d101      	bne.n	8108776 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8108772:	2301      	movs	r3, #1
 8108774:	e283      	b.n	8108c7e <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8108776:	f7f9 fd57 	bl	8102228 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8108780:	2b01      	cmp	r3, #1
 8108782:	d113      	bne.n	81087ac <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	4a93      	ldr	r2, [pc, #588]	; (81089d8 <HAL_SAI_Init+0x274>)
 810878a:	4293      	cmp	r3, r2
 810878c:	d004      	beq.n	8108798 <HAL_SAI_Init+0x34>
 810878e:	687b      	ldr	r3, [r7, #4]
 8108790:	681b      	ldr	r3, [r3, #0]
 8108792:	4a92      	ldr	r2, [pc, #584]	; (81089dc <HAL_SAI_Init+0x278>)
 8108794:	4293      	cmp	r3, r2
 8108796:	d107      	bne.n	81087a8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 810879c:	2b01      	cmp	r3, #1
 810879e:	d103      	bne.n	81087a8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 81087a0:	687b      	ldr	r3, [r7, #4]
 81087a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81087a4:	2b00      	cmp	r3, #0
 81087a6:	d001      	beq.n	81087ac <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 81087a8:	2301      	movs	r3, #1
 81087aa:	e268      	b.n	8108c7e <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	681b      	ldr	r3, [r3, #0]
 81087b0:	4a89      	ldr	r2, [pc, #548]	; (81089d8 <HAL_SAI_Init+0x274>)
 81087b2:	4293      	cmp	r3, r2
 81087b4:	d004      	beq.n	81087c0 <HAL_SAI_Init+0x5c>
 81087b6:	687b      	ldr	r3, [r7, #4]
 81087b8:	681b      	ldr	r3, [r3, #0]
 81087ba:	4a89      	ldr	r2, [pc, #548]	; (81089e0 <HAL_SAI_Init+0x27c>)
 81087bc:	4293      	cmp	r3, r2
 81087be:	d102      	bne.n	81087c6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 81087c0:	4b88      	ldr	r3, [pc, #544]	; (81089e4 <HAL_SAI_Init+0x280>)
 81087c2:	61bb      	str	r3, [r7, #24]
 81087c4:	e028      	b.n	8108818 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81087c6:	687b      	ldr	r3, [r7, #4]
 81087c8:	681b      	ldr	r3, [r3, #0]
 81087ca:	4a87      	ldr	r2, [pc, #540]	; (81089e8 <HAL_SAI_Init+0x284>)
 81087cc:	4293      	cmp	r3, r2
 81087ce:	d004      	beq.n	81087da <HAL_SAI_Init+0x76>
 81087d0:	687b      	ldr	r3, [r7, #4]
 81087d2:	681b      	ldr	r3, [r3, #0]
 81087d4:	4a85      	ldr	r2, [pc, #532]	; (81089ec <HAL_SAI_Init+0x288>)
 81087d6:	4293      	cmp	r3, r2
 81087d8:	d102      	bne.n	81087e0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 81087da:	4b85      	ldr	r3, [pc, #532]	; (81089f0 <HAL_SAI_Init+0x28c>)
 81087dc:	61bb      	str	r3, [r7, #24]
 81087de:	e01b      	b.n	8108818 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81087e0:	687b      	ldr	r3, [r7, #4]
 81087e2:	681b      	ldr	r3, [r3, #0]
 81087e4:	4a83      	ldr	r2, [pc, #524]	; (81089f4 <HAL_SAI_Init+0x290>)
 81087e6:	4293      	cmp	r3, r2
 81087e8:	d004      	beq.n	81087f4 <HAL_SAI_Init+0x90>
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	681b      	ldr	r3, [r3, #0]
 81087ee:	4a82      	ldr	r2, [pc, #520]	; (81089f8 <HAL_SAI_Init+0x294>)
 81087f0:	4293      	cmp	r3, r2
 81087f2:	d102      	bne.n	81087fa <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 81087f4:	4b81      	ldr	r3, [pc, #516]	; (81089fc <HAL_SAI_Init+0x298>)
 81087f6:	61bb      	str	r3, [r7, #24]
 81087f8:	e00e      	b.n	8108818 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 81087fa:	687b      	ldr	r3, [r7, #4]
 81087fc:	681b      	ldr	r3, [r3, #0]
 81087fe:	4a77      	ldr	r2, [pc, #476]	; (81089dc <HAL_SAI_Init+0x278>)
 8108800:	4293      	cmp	r3, r2
 8108802:	d004      	beq.n	810880e <HAL_SAI_Init+0xaa>
 8108804:	687b      	ldr	r3, [r7, #4]
 8108806:	681b      	ldr	r3, [r3, #0]
 8108808:	4a7d      	ldr	r2, [pc, #500]	; (8108a00 <HAL_SAI_Init+0x29c>)
 810880a:	4293      	cmp	r3, r2
 810880c:	d102      	bne.n	8108814 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810880e:	4b7d      	ldr	r3, [pc, #500]	; (8108a04 <HAL_SAI_Init+0x2a0>)
 8108810:	61bb      	str	r3, [r7, #24]
 8108812:	e001      	b.n	8108818 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8108814:	2301      	movs	r3, #1
 8108816:	e232      	b.n	8108c7e <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8108818:	687b      	ldr	r3, [r7, #4]
 810881a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 810881e:	b2db      	uxtb	r3, r3
 8108820:	2b00      	cmp	r3, #0
 8108822:	d106      	bne.n	8108832 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	2200      	movs	r2, #0
 8108828:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 810882c:	6878      	ldr	r0, [r7, #4]
 810882e:	f7f9 fb3d 	bl	8101eac <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8108832:	6878      	ldr	r0, [r7, #4]
 8108834:	f000 fa34 	bl	8108ca0 <SAI_Disable>
 8108838:	4603      	mov	r3, r0
 810883a:	2b00      	cmp	r3, #0
 810883c:	d001      	beq.n	8108842 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 810883e:	2301      	movs	r3, #1
 8108840:	e21d      	b.n	8108c7e <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8108842:	687b      	ldr	r3, [r7, #4]
 8108844:	2202      	movs	r2, #2
 8108846:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 810884a:	687b      	ldr	r3, [r7, #4]
 810884c:	68db      	ldr	r3, [r3, #12]
 810884e:	2b01      	cmp	r3, #1
 8108850:	d007      	beq.n	8108862 <HAL_SAI_Init+0xfe>
 8108852:	2b01      	cmp	r3, #1
 8108854:	d302      	bcc.n	810885c <HAL_SAI_Init+0xf8>
 8108856:	2b02      	cmp	r3, #2
 8108858:	d006      	beq.n	8108868 <HAL_SAI_Init+0x104>
 810885a:	e008      	b.n	810886e <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 810885c:	2300      	movs	r3, #0
 810885e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108860:	e008      	b.n	8108874 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8108862:	2310      	movs	r3, #16
 8108864:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108866:	e005      	b.n	8108874 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8108868:	2320      	movs	r3, #32
 810886a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810886c:	e002      	b.n	8108874 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 810886e:	2300      	movs	r3, #0
 8108870:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108872:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8108874:	687b      	ldr	r3, [r7, #4]
 8108876:	689b      	ldr	r3, [r3, #8]
 8108878:	2b05      	cmp	r3, #5
 810887a:	d832      	bhi.n	81088e2 <HAL_SAI_Init+0x17e>
 810887c:	a201      	add	r2, pc, #4	; (adr r2, 8108884 <HAL_SAI_Init+0x120>)
 810887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108882:	bf00      	nop
 8108884:	0810889d 	.word	0x0810889d
 8108888:	081088a3 	.word	0x081088a3
 810888c:	081088ab 	.word	0x081088ab
 8108890:	081088b3 	.word	0x081088b3
 8108894:	081088c3 	.word	0x081088c3
 8108898:	081088d3 	.word	0x081088d3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 810889c:	2300      	movs	r3, #0
 810889e:	61fb      	str	r3, [r7, #28]
      break;
 81088a0:	e022      	b.n	81088e8 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 81088a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81088a6:	61fb      	str	r3, [r7, #28]
      break;
 81088a8:	e01e      	b.n	81088e8 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81088aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81088ae:	61fb      	str	r3, [r7, #28]
      break;
 81088b0:	e01a      	b.n	81088e8 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81088b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81088b6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 81088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81088ba:	f043 0301 	orr.w	r3, r3, #1
 81088be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81088c0:	e012      	b.n	81088e8 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81088c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81088c6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 81088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81088ca:	f043 0302 	orr.w	r3, r3, #2
 81088ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81088d0:	e00a      	b.n	81088e8 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81088d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81088d6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 81088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81088da:	f043 0303 	orr.w	r3, r3, #3
 81088de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81088e0:	e002      	b.n	81088e8 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 81088e2:	2300      	movs	r3, #0
 81088e4:	61fb      	str	r3, [r7, #28]
      break;
 81088e6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 81088e8:	69bb      	ldr	r3, [r7, #24]
 81088ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81088ec:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 81088ee:	687b      	ldr	r3, [r7, #4]
 81088f0:	6a1b      	ldr	r3, [r3, #32]
 81088f2:	2b00      	cmp	r3, #0
 81088f4:	f000 80ba 	beq.w	8108a6c <HAL_SAI_Init+0x308>
  {
    uint32_t freq = 0;
 81088f8:	2300      	movs	r3, #0
 81088fa:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81088fc:	687b      	ldr	r3, [r7, #4]
 81088fe:	681b      	ldr	r3, [r3, #0]
 8108900:	4a35      	ldr	r2, [pc, #212]	; (81089d8 <HAL_SAI_Init+0x274>)
 8108902:	4293      	cmp	r3, r2
 8108904:	d004      	beq.n	8108910 <HAL_SAI_Init+0x1ac>
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	681b      	ldr	r3, [r3, #0]
 810890a:	4a35      	ldr	r2, [pc, #212]	; (81089e0 <HAL_SAI_Init+0x27c>)
 810890c:	4293      	cmp	r3, r2
 810890e:	d104      	bne.n	810891a <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8108910:	f44f 7080 	mov.w	r0, #256	; 0x100
 8108914:	f7ff f8b4 	bl	8107a80 <HAL_RCCEx_GetPeriphCLKFreq>
 8108918:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810891a:	687b      	ldr	r3, [r7, #4]
 810891c:	681b      	ldr	r3, [r3, #0]
 810891e:	4a32      	ldr	r2, [pc, #200]	; (81089e8 <HAL_SAI_Init+0x284>)
 8108920:	4293      	cmp	r3, r2
 8108922:	d004      	beq.n	810892e <HAL_SAI_Init+0x1ca>
 8108924:	687b      	ldr	r3, [r7, #4]
 8108926:	681b      	ldr	r3, [r3, #0]
 8108928:	4a30      	ldr	r2, [pc, #192]	; (81089ec <HAL_SAI_Init+0x288>)
 810892a:	4293      	cmp	r3, r2
 810892c:	d104      	bne.n	8108938 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 810892e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8108932:	f7ff f8a5 	bl	8107a80 <HAL_RCCEx_GetPeriphCLKFreq>
 8108936:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	681b      	ldr	r3, [r3, #0]
 810893c:	4a2d      	ldr	r2, [pc, #180]	; (81089f4 <HAL_SAI_Init+0x290>)
 810893e:	4293      	cmp	r3, r2
 8108940:	d004      	beq.n	810894c <HAL_SAI_Init+0x1e8>
 8108942:	687b      	ldr	r3, [r7, #4]
 8108944:	681b      	ldr	r3, [r3, #0]
 8108946:	4a2c      	ldr	r2, [pc, #176]	; (81089f8 <HAL_SAI_Init+0x294>)
 8108948:	4293      	cmp	r3, r2
 810894a:	d104      	bne.n	8108956 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 810894c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8108950:	f7ff f896 	bl	8107a80 <HAL_RCCEx_GetPeriphCLKFreq>
 8108954:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	681b      	ldr	r3, [r3, #0]
 810895a:	4a20      	ldr	r2, [pc, #128]	; (81089dc <HAL_SAI_Init+0x278>)
 810895c:	4293      	cmp	r3, r2
 810895e:	d104      	bne.n	810896a <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8108960:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8108964:	f7ff f88c 	bl	8107a80 <HAL_RCCEx_GetPeriphCLKFreq>
 8108968:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	681b      	ldr	r3, [r3, #0]
 810896e:	4a24      	ldr	r2, [pc, #144]	; (8108a00 <HAL_SAI_Init+0x29c>)
 8108970:	4293      	cmp	r3, r2
 8108972:	d104      	bne.n	810897e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8108974:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8108978:	f7ff f882 	bl	8107a80 <HAL_RCCEx_GetPeriphCLKFreq>
 810897c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810897e:	687b      	ldr	r3, [r7, #4]
 8108980:	699b      	ldr	r3, [r3, #24]
 8108982:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8108986:	d120      	bne.n	81089ca <HAL_SAI_Init+0x266>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8108988:	687b      	ldr	r3, [r7, #4]
 810898a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810898c:	2b04      	cmp	r3, #4
 810898e:	d102      	bne.n	8108996 <HAL_SAI_Init+0x232>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8108990:	2340      	movs	r3, #64	; 0x40
 8108992:	60fb      	str	r3, [r7, #12]
 8108994:	e00a      	b.n	81089ac <HAL_SAI_Init+0x248>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810899a:	2b08      	cmp	r3, #8
 810899c:	d103      	bne.n	81089a6 <HAL_SAI_Init+0x242>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 810899e:	f44f 7380 	mov.w	r3, #256	; 0x100
 81089a2:	60fb      	str	r3, [r7, #12]
 81089a4:	e002      	b.n	81089ac <HAL_SAI_Init+0x248>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 81089a6:	687b      	ldr	r3, [r7, #4]
 81089a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81089aa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 81089ac:	697a      	ldr	r2, [r7, #20]
 81089ae:	4613      	mov	r3, r2
 81089b0:	009b      	lsls	r3, r3, #2
 81089b2:	4413      	add	r3, r2
 81089b4:	005b      	lsls	r3, r3, #1
 81089b6:	4619      	mov	r1, r3
 81089b8:	687b      	ldr	r3, [r7, #4]
 81089ba:	6a1b      	ldr	r3, [r3, #32]
 81089bc:	68fa      	ldr	r2, [r7, #12]
 81089be:	fb02 f303 	mul.w	r3, r2, r3
 81089c2:	fbb1 f3f3 	udiv	r3, r1, r3
 81089c6:	613b      	str	r3, [r7, #16]
 81089c8:	e02f      	b.n	8108a2a <HAL_SAI_Init+0x2c6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81089d2:	d119      	bne.n	8108a08 <HAL_SAI_Init+0x2a4>
 81089d4:	2302      	movs	r3, #2
 81089d6:	e018      	b.n	8108a0a <HAL_SAI_Init+0x2a6>
 81089d8:	40015804 	.word	0x40015804
 81089dc:	58005404 	.word	0x58005404
 81089e0:	40015824 	.word	0x40015824
 81089e4:	40015800 	.word	0x40015800
 81089e8:	40015c04 	.word	0x40015c04
 81089ec:	40015c24 	.word	0x40015c24
 81089f0:	40015c00 	.word	0x40015c00
 81089f4:	40016004 	.word	0x40016004
 81089f8:	40016024 	.word	0x40016024
 81089fc:	40016000 	.word	0x40016000
 8108a00:	58005424 	.word	0x58005424
 8108a04:	58005400 	.word	0x58005400
 8108a08:	2301      	movs	r3, #1
 8108a0a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8108a0c:	697a      	ldr	r2, [r7, #20]
 8108a0e:	4613      	mov	r3, r2
 8108a10:	009b      	lsls	r3, r3, #2
 8108a12:	4413      	add	r3, r2
 8108a14:	005b      	lsls	r3, r3, #1
 8108a16:	4619      	mov	r1, r3
 8108a18:	687b      	ldr	r3, [r7, #4]
 8108a1a:	6a1b      	ldr	r3, [r3, #32]
 8108a1c:	68ba      	ldr	r2, [r7, #8]
 8108a1e:	fb02 f303 	mul.w	r3, r2, r3
 8108a22:	021b      	lsls	r3, r3, #8
 8108a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8108a28:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8108a2a:	693b      	ldr	r3, [r7, #16]
 8108a2c:	4a96      	ldr	r2, [pc, #600]	; (8108c88 <HAL_SAI_Init+0x524>)
 8108a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8108a32:	08da      	lsrs	r2, r3, #3
 8108a34:	687b      	ldr	r3, [r7, #4]
 8108a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8108a38:	6939      	ldr	r1, [r7, #16]
 8108a3a:	4b93      	ldr	r3, [pc, #588]	; (8108c88 <HAL_SAI_Init+0x524>)
 8108a3c:	fba3 2301 	umull	r2, r3, r3, r1
 8108a40:	08da      	lsrs	r2, r3, #3
 8108a42:	4613      	mov	r3, r2
 8108a44:	009b      	lsls	r3, r3, #2
 8108a46:	4413      	add	r3, r2
 8108a48:	005b      	lsls	r3, r3, #1
 8108a4a:	1aca      	subs	r2, r1, r3
 8108a4c:	2a08      	cmp	r2, #8
 8108a4e:	d904      	bls.n	8108a5a <HAL_SAI_Init+0x2f6>
    {
      hsai->Init.Mckdiv += 1U;
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a54:	1c5a      	adds	r2, r3, #1
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8108a5a:	687b      	ldr	r3, [r7, #4]
 8108a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108a5e:	2b04      	cmp	r3, #4
 8108a60:	d104      	bne.n	8108a6c <HAL_SAI_Init+0x308>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8108a62:	687b      	ldr	r3, [r7, #4]
 8108a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a66:	085a      	lsrs	r2, r3, #1
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8108a6c:	687b      	ldr	r3, [r7, #4]
 8108a6e:	685b      	ldr	r3, [r3, #4]
 8108a70:	2b00      	cmp	r3, #0
 8108a72:	d003      	beq.n	8108a7c <HAL_SAI_Init+0x318>
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	685b      	ldr	r3, [r3, #4]
 8108a78:	2b02      	cmp	r3, #2
 8108a7a:	d109      	bne.n	8108a90 <HAL_SAI_Init+0x32c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8108a7c:	687b      	ldr	r3, [r7, #4]
 8108a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108a80:	2b01      	cmp	r3, #1
 8108a82:	d101      	bne.n	8108a88 <HAL_SAI_Init+0x324>
 8108a84:	2300      	movs	r3, #0
 8108a86:	e001      	b.n	8108a8c <HAL_SAI_Init+0x328>
 8108a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8108a8c:	623b      	str	r3, [r7, #32]
 8108a8e:	e008      	b.n	8108aa2 <HAL_SAI_Init+0x33e>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8108a90:	687b      	ldr	r3, [r7, #4]
 8108a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108a94:	2b01      	cmp	r3, #1
 8108a96:	d102      	bne.n	8108a9e <HAL_SAI_Init+0x33a>
 8108a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8108a9c:	e000      	b.n	8108aa0 <HAL_SAI_Init+0x33c>
 8108a9e:	2300      	movs	r3, #0
 8108aa0:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8108aa2:	f7f9 fbc1 	bl	8102228 <HAL_GetREVID>
 8108aa6:	4603      	mov	r3, r0
 8108aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108aac:	d331      	bcc.n	8108b12 <HAL_SAI_Init+0x3ae>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8108aae:	687b      	ldr	r3, [r7, #4]
 8108ab0:	681b      	ldr	r3, [r3, #0]
 8108ab2:	6819      	ldr	r1, [r3, #0]
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	681a      	ldr	r2, [r3, #0]
 8108ab8:	4b74      	ldr	r3, [pc, #464]	; (8108c8c <HAL_SAI_Init+0x528>)
 8108aba:	400b      	ands	r3, r1
 8108abc:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	681b      	ldr	r3, [r3, #0]
 8108ac2:	6819      	ldr	r1, [r3, #0]
 8108ac4:	687b      	ldr	r3, [r7, #4]
 8108ac6:	685a      	ldr	r2, [r3, #4]
 8108ac8:	687b      	ldr	r3, [r7, #4]
 8108aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108acc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108ace:	687b      	ldr	r3, [r7, #4]
 8108ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108ad2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108ad4:	687b      	ldr	r3, [r7, #4]
 8108ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108ad8:	431a      	orrs	r2, r3
 8108ada:	6a3b      	ldr	r3, [r7, #32]
 8108adc:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8108ade:	69fb      	ldr	r3, [r7, #28]
 8108ae0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108ae2:	687b      	ldr	r3, [r7, #4]
 8108ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8108ae6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	695b      	ldr	r3, [r3, #20]
 8108aec:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108aee:	687b      	ldr	r3, [r7, #4]
 8108af0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108af2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108af4:	687b      	ldr	r3, [r7, #4]
 8108af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108af8:	051b      	lsls	r3, r3, #20
 8108afa:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8108afc:	687b      	ldr	r3, [r7, #4]
 8108afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108b00:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	691b      	ldr	r3, [r3, #16]
 8108b06:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	681b      	ldr	r3, [r3, #0]
 8108b0c:	430a      	orrs	r2, r1
 8108b0e:	601a      	str	r2, [r3, #0]
 8108b10:	e02d      	b.n	8108b6e <HAL_SAI_Init+0x40a>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	681b      	ldr	r3, [r3, #0]
 8108b16:	6819      	ldr	r1, [r3, #0]
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	681a      	ldr	r2, [r3, #0]
 8108b1c:	4b5c      	ldr	r3, [pc, #368]	; (8108c90 <HAL_SAI_Init+0x52c>)
 8108b1e:	400b      	ands	r3, r1
 8108b20:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	6819      	ldr	r1, [r3, #0]
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	685a      	ldr	r2, [r3, #4]
 8108b2c:	687b      	ldr	r3, [r7, #4]
 8108b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108b30:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108b36:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108b38:	687b      	ldr	r3, [r7, #4]
 8108b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108b3c:	431a      	orrs	r2, r3
 8108b3e:	6a3b      	ldr	r3, [r7, #32]
 8108b40:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8108b42:	69fb      	ldr	r3, [r7, #28]
 8108b44:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108b46:	687b      	ldr	r3, [r7, #4]
 8108b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8108b4a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108b4c:	687b      	ldr	r3, [r7, #4]
 8108b4e:	695b      	ldr	r3, [r3, #20]
 8108b50:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108b52:	687b      	ldr	r3, [r7, #4]
 8108b54:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108b56:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108b58:	687b      	ldr	r3, [r7, #4]
 8108b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108b5c:	051b      	lsls	r3, r3, #20
 8108b5e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108b64:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108b66:	687b      	ldr	r3, [r7, #4]
 8108b68:	681b      	ldr	r3, [r3, #0]
 8108b6a:	430a      	orrs	r2, r1
 8108b6c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8108b6e:	687b      	ldr	r3, [r7, #4]
 8108b70:	681b      	ldr	r3, [r3, #0]
 8108b72:	685b      	ldr	r3, [r3, #4]
 8108b74:	687a      	ldr	r2, [r7, #4]
 8108b76:	6812      	ldr	r2, [r2, #0]
 8108b78:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8108b7c:	f023 030f 	bic.w	r3, r3, #15
 8108b80:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8108b82:	687b      	ldr	r3, [r7, #4]
 8108b84:	681b      	ldr	r3, [r3, #0]
 8108b86:	6859      	ldr	r1, [r3, #4]
 8108b88:	687b      	ldr	r3, [r7, #4]
 8108b8a:	69da      	ldr	r2, [r3, #28]
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108b90:	431a      	orrs	r2, r3
 8108b92:	687b      	ldr	r3, [r7, #4]
 8108b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108b96:	431a      	orrs	r2, r3
 8108b98:	687b      	ldr	r3, [r7, #4]
 8108b9a:	681b      	ldr	r3, [r3, #0]
 8108b9c:	430a      	orrs	r2, r1
 8108b9e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	681b      	ldr	r3, [r3, #0]
 8108ba4:	6899      	ldr	r1, [r3, #8]
 8108ba6:	687b      	ldr	r3, [r7, #4]
 8108ba8:	681a      	ldr	r2, [r3, #0]
 8108baa:	4b3a      	ldr	r3, [pc, #232]	; (8108c94 <HAL_SAI_Init+0x530>)
 8108bac:	400b      	ands	r3, r1
 8108bae:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	681b      	ldr	r3, [r3, #0]
 8108bb4:	6899      	ldr	r1, [r3, #8]
 8108bb6:	687b      	ldr	r3, [r7, #4]
 8108bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108bba:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8108bbc:	687b      	ldr	r3, [r7, #4]
 8108bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108bc0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8108bc2:	687b      	ldr	r3, [r7, #4]
 8108bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8108bc6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8108bcc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108bd2:	3b01      	subs	r3, #1
 8108bd4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8108bd6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108bd8:	687b      	ldr	r3, [r7, #4]
 8108bda:	681b      	ldr	r3, [r3, #0]
 8108bdc:	430a      	orrs	r2, r1
 8108bde:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8108be0:	687b      	ldr	r3, [r7, #4]
 8108be2:	681b      	ldr	r3, [r3, #0]
 8108be4:	68d9      	ldr	r1, [r3, #12]
 8108be6:	687b      	ldr	r3, [r7, #4]
 8108be8:	681a      	ldr	r2, [r3, #0]
 8108bea:	f24f 0320 	movw	r3, #61472	; 0xf020
 8108bee:	400b      	ands	r3, r1
 8108bf0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108bf2:	687b      	ldr	r3, [r7, #4]
 8108bf4:	681b      	ldr	r3, [r3, #0]
 8108bf6:	68d9      	ldr	r1, [r3, #12]
 8108bf8:	687b      	ldr	r3, [r7, #4]
 8108bfa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108c00:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108c02:	687b      	ldr	r3, [r7, #4]
 8108c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108c06:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108c08:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108c0e:	3b01      	subs	r3, #1
 8108c10:	021b      	lsls	r3, r3, #8
 8108c12:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108c14:	687b      	ldr	r3, [r7, #4]
 8108c16:	681b      	ldr	r3, [r3, #0]
 8108c18:	430a      	orrs	r2, r1
 8108c1a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8108c1c:	687b      	ldr	r3, [r7, #4]
 8108c1e:	681b      	ldr	r3, [r3, #0]
 8108c20:	4a1d      	ldr	r2, [pc, #116]	; (8108c98 <HAL_SAI_Init+0x534>)
 8108c22:	4293      	cmp	r3, r2
 8108c24:	d004      	beq.n	8108c30 <HAL_SAI_Init+0x4cc>
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	681b      	ldr	r3, [r3, #0]
 8108c2a:	4a1c      	ldr	r2, [pc, #112]	; (8108c9c <HAL_SAI_Init+0x538>)
 8108c2c:	4293      	cmp	r3, r2
 8108c2e:	d119      	bne.n	8108c64 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8108c30:	69bb      	ldr	r3, [r7, #24]
 8108c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c34:	f023 0201 	bic.w	r2, r3, #1
 8108c38:	69bb      	ldr	r3, [r7, #24]
 8108c3a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8108c42:	2b01      	cmp	r3, #1
 8108c44:	d10e      	bne.n	8108c64 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8108c4a:	687b      	ldr	r3, [r7, #4]
 8108c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108c4e:	3b01      	subs	r3, #1
 8108c50:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8108c52:	431a      	orrs	r2, r3
 8108c54:	69bb      	ldr	r3, [r7, #24]
 8108c56:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8108c58:	69bb      	ldr	r3, [r7, #24]
 8108c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c5c:	f043 0201 	orr.w	r2, r3, #1
 8108c60:	69bb      	ldr	r3, [r7, #24]
 8108c62:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8108c64:	687b      	ldr	r3, [r7, #4]
 8108c66:	2200      	movs	r2, #0
 8108c68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	2201      	movs	r2, #1
 8108c70:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	2200      	movs	r2, #0
 8108c78:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8108c7c:	2300      	movs	r3, #0
}
 8108c7e:	4618      	mov	r0, r3
 8108c80:	3728      	adds	r7, #40	; 0x28
 8108c82:	46bd      	mov	sp, r7
 8108c84:	bd80      	pop	{r7, pc}
 8108c86:	bf00      	nop
 8108c88:	cccccccd 	.word	0xcccccccd
 8108c8c:	f005c010 	.word	0xf005c010
 8108c90:	f805c010 	.word	0xf805c010
 8108c94:	fff88000 	.word	0xfff88000
 8108c98:	40015804 	.word	0x40015804
 8108c9c:	58005404 	.word	0x58005404

08108ca0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8108ca0:	b480      	push	{r7}
 8108ca2:	b085      	sub	sp, #20
 8108ca4:	af00      	add	r7, sp, #0
 8108ca6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8108ca8:	4b18      	ldr	r3, [pc, #96]	; (8108d0c <SAI_Disable+0x6c>)
 8108caa:	681b      	ldr	r3, [r3, #0]
 8108cac:	4a18      	ldr	r2, [pc, #96]	; (8108d10 <SAI_Disable+0x70>)
 8108cae:	fba2 2303 	umull	r2, r3, r2, r3
 8108cb2:	0b1b      	lsrs	r3, r3, #12
 8108cb4:	009b      	lsls	r3, r3, #2
 8108cb6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8108cb8:	2300      	movs	r3, #0
 8108cba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8108cbc:	687b      	ldr	r3, [r7, #4]
 8108cbe:	681b      	ldr	r3, [r3, #0]
 8108cc0:	681a      	ldr	r2, [r3, #0]
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	681b      	ldr	r3, [r3, #0]
 8108cc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8108cca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8108ccc:	68fb      	ldr	r3, [r7, #12]
 8108cce:	2b00      	cmp	r3, #0
 8108cd0:	d10a      	bne.n	8108ce8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8108cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8108ce2:	2303      	movs	r3, #3
 8108ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8108ce6:	e009      	b.n	8108cfc <SAI_Disable+0x5c>
    }
    count--;
 8108ce8:	68fb      	ldr	r3, [r7, #12]
 8108cea:	3b01      	subs	r3, #1
 8108cec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8108cee:	687b      	ldr	r3, [r7, #4]
 8108cf0:	681b      	ldr	r3, [r3, #0]
 8108cf2:	681b      	ldr	r3, [r3, #0]
 8108cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8108cf8:	2b00      	cmp	r3, #0
 8108cfa:	d1e7      	bne.n	8108ccc <SAI_Disable+0x2c>

  return status;
 8108cfc:	7afb      	ldrb	r3, [r7, #11]
}
 8108cfe:	4618      	mov	r0, r3
 8108d00:	3714      	adds	r7, #20
 8108d02:	46bd      	mov	sp, r7
 8108d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d08:	4770      	bx	lr
 8108d0a:	bf00      	nop
 8108d0c:	10000000 	.word	0x10000000
 8108d10:	95cbec1b 	.word	0x95cbec1b

08108d14 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8108d14:	b580      	push	{r7, lr}
 8108d16:	b082      	sub	sp, #8
 8108d18:	af00      	add	r7, sp, #0
 8108d1a:	6078      	str	r0, [r7, #4]
 8108d1c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	2b00      	cmp	r3, #0
 8108d22:	d101      	bne.n	8108d28 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8108d24:	2301      	movs	r3, #1
 8108d26:	e02b      	b.n	8108d80 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8108d28:	687b      	ldr	r3, [r7, #4]
 8108d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8108d2e:	b2db      	uxtb	r3, r3
 8108d30:	2b00      	cmp	r3, #0
 8108d32:	d106      	bne.n	8108d42 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8108d34:	687b      	ldr	r3, [r7, #4]
 8108d36:	2200      	movs	r2, #0
 8108d38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8108d3c:	6878      	ldr	r0, [r7, #4]
 8108d3e:	f7f9 f8ab 	bl	8101e98 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8108d42:	687b      	ldr	r3, [r7, #4]
 8108d44:	2202      	movs	r2, #2
 8108d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8108d4a:	687b      	ldr	r3, [r7, #4]
 8108d4c:	681a      	ldr	r2, [r3, #0]
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	3304      	adds	r3, #4
 8108d52:	4619      	mov	r1, r3
 8108d54:	4610      	mov	r0, r2
 8108d56:	f001 fca1 	bl	810a69c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	6818      	ldr	r0, [r3, #0]
 8108d5e:	687b      	ldr	r3, [r7, #4]
 8108d60:	685b      	ldr	r3, [r3, #4]
 8108d62:	461a      	mov	r2, r3
 8108d64:	6839      	ldr	r1, [r7, #0]
 8108d66:	f001 fcf6 	bl	810a756 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8108d6a:	4b07      	ldr	r3, [pc, #28]	; (8108d88 <HAL_SDRAM_Init+0x74>)
 8108d6c:	681b      	ldr	r3, [r3, #0]
 8108d6e:	4a06      	ldr	r2, [pc, #24]	; (8108d88 <HAL_SDRAM_Init+0x74>)
 8108d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8108d74:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8108d76:	687b      	ldr	r3, [r7, #4]
 8108d78:	2201      	movs	r2, #1
 8108d7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8108d7e:	2300      	movs	r3, #0
}
 8108d80:	4618      	mov	r0, r3
 8108d82:	3708      	adds	r7, #8
 8108d84:	46bd      	mov	sp, r7
 8108d86:	bd80      	pop	{r7, pc}
 8108d88:	52004000 	.word	0x52004000

08108d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8108d8c:	b580      	push	{r7, lr}
 8108d8e:	b082      	sub	sp, #8
 8108d90:	af00      	add	r7, sp, #0
 8108d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	2b00      	cmp	r3, #0
 8108d98:	d101      	bne.n	8108d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108d9a:	2301      	movs	r3, #1
 8108d9c:	e042      	b.n	8108e24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108da4:	2b00      	cmp	r3, #0
 8108da6:	d106      	bne.n	8108db6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	2200      	movs	r2, #0
 8108dac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108db0:	6878      	ldr	r0, [r7, #4]
 8108db2:	f7f8 fee1 	bl	8101b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108db6:	687b      	ldr	r3, [r7, #4]
 8108db8:	2224      	movs	r2, #36	; 0x24
 8108dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	681b      	ldr	r3, [r3, #0]
 8108dc2:	681a      	ldr	r2, [r3, #0]
 8108dc4:	687b      	ldr	r3, [r7, #4]
 8108dc6:	681b      	ldr	r3, [r3, #0]
 8108dc8:	f022 0201 	bic.w	r2, r2, #1
 8108dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108dce:	6878      	ldr	r0, [r7, #4]
 8108dd0:	f000 fae6 	bl	81093a0 <UART_SetConfig>
 8108dd4:	4603      	mov	r3, r0
 8108dd6:	2b01      	cmp	r3, #1
 8108dd8:	d101      	bne.n	8108dde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8108dda:	2301      	movs	r3, #1
 8108ddc:	e022      	b.n	8108e24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108de2:	2b00      	cmp	r3, #0
 8108de4:	d002      	beq.n	8108dec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8108de6:	6878      	ldr	r0, [r7, #4]
 8108de8:	f001 f88a 	bl	8109f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108dec:	687b      	ldr	r3, [r7, #4]
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	685a      	ldr	r2, [r3, #4]
 8108df2:	687b      	ldr	r3, [r7, #4]
 8108df4:	681b      	ldr	r3, [r3, #0]
 8108df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8108dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108dfc:	687b      	ldr	r3, [r7, #4]
 8108dfe:	681b      	ldr	r3, [r3, #0]
 8108e00:	689a      	ldr	r2, [r3, #8]
 8108e02:	687b      	ldr	r3, [r7, #4]
 8108e04:	681b      	ldr	r3, [r3, #0]
 8108e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8108e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108e0c:	687b      	ldr	r3, [r7, #4]
 8108e0e:	681b      	ldr	r3, [r3, #0]
 8108e10:	681a      	ldr	r2, [r3, #0]
 8108e12:	687b      	ldr	r3, [r7, #4]
 8108e14:	681b      	ldr	r3, [r3, #0]
 8108e16:	f042 0201 	orr.w	r2, r2, #1
 8108e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108e1c:	6878      	ldr	r0, [r7, #4]
 8108e1e:	f001 f911 	bl	810a044 <UART_CheckIdleState>
 8108e22:	4603      	mov	r3, r0
}
 8108e24:	4618      	mov	r0, r3
 8108e26:	3708      	adds	r7, #8
 8108e28:	46bd      	mov	sp, r7
 8108e2a:	bd80      	pop	{r7, pc}

08108e2c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8108e2c:	b580      	push	{r7, lr}
 8108e2e:	b084      	sub	sp, #16
 8108e30:	af00      	add	r7, sp, #0
 8108e32:	60f8      	str	r0, [r7, #12]
 8108e34:	60b9      	str	r1, [r7, #8]
 8108e36:	4613      	mov	r3, r2
 8108e38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8108e3a:	68fb      	ldr	r3, [r7, #12]
 8108e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108e40:	2b20      	cmp	r3, #32
 8108e42:	d168      	bne.n	8108f16 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8108e44:	68bb      	ldr	r3, [r7, #8]
 8108e46:	2b00      	cmp	r3, #0
 8108e48:	d002      	beq.n	8108e50 <HAL_UART_Transmit_DMA+0x24>
 8108e4a:	88fb      	ldrh	r3, [r7, #6]
 8108e4c:	2b00      	cmp	r3, #0
 8108e4e:	d101      	bne.n	8108e54 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8108e50:	2301      	movs	r3, #1
 8108e52:	e061      	b.n	8108f18 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8108e54:	68fb      	ldr	r3, [r7, #12]
 8108e56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108e5a:	2b01      	cmp	r3, #1
 8108e5c:	d101      	bne.n	8108e62 <HAL_UART_Transmit_DMA+0x36>
 8108e5e:	2302      	movs	r3, #2
 8108e60:	e05a      	b.n	8108f18 <HAL_UART_Transmit_DMA+0xec>
 8108e62:	68fb      	ldr	r3, [r7, #12]
 8108e64:	2201      	movs	r2, #1
 8108e66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8108e6a:	68fb      	ldr	r3, [r7, #12]
 8108e6c:	68ba      	ldr	r2, [r7, #8]
 8108e6e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8108e70:	68fb      	ldr	r3, [r7, #12]
 8108e72:	88fa      	ldrh	r2, [r7, #6]
 8108e74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8108e78:	68fb      	ldr	r3, [r7, #12]
 8108e7a:	88fa      	ldrh	r2, [r7, #6]
 8108e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108e80:	68fb      	ldr	r3, [r7, #12]
 8108e82:	2200      	movs	r2, #0
 8108e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108e88:	68fb      	ldr	r3, [r7, #12]
 8108e8a:	2221      	movs	r2, #33	; 0x21
 8108e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8108e90:	68fb      	ldr	r3, [r7, #12]
 8108e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108e94:	2b00      	cmp	r3, #0
 8108e96:	d02c      	beq.n	8108ef2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8108e98:	68fb      	ldr	r3, [r7, #12]
 8108e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108e9c:	4a20      	ldr	r2, [pc, #128]	; (8108f20 <HAL_UART_Transmit_DMA+0xf4>)
 8108e9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8108ea0:	68fb      	ldr	r3, [r7, #12]
 8108ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108ea4:	4a1f      	ldr	r2, [pc, #124]	; (8108f24 <HAL_UART_Transmit_DMA+0xf8>)
 8108ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8108ea8:	68fb      	ldr	r3, [r7, #12]
 8108eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108eac:	4a1e      	ldr	r2, [pc, #120]	; (8108f28 <HAL_UART_Transmit_DMA+0xfc>)
 8108eae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8108eb0:	68fb      	ldr	r3, [r7, #12]
 8108eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108eb4:	2200      	movs	r2, #0
 8108eb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8108eb8:	68fb      	ldr	r3, [r7, #12]
 8108eba:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8108ebc:	68fb      	ldr	r3, [r7, #12]
 8108ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108ec0:	4619      	mov	r1, r3
 8108ec2:	68fb      	ldr	r3, [r7, #12]
 8108ec4:	681b      	ldr	r3, [r3, #0]
 8108ec6:	3328      	adds	r3, #40	; 0x28
 8108ec8:	461a      	mov	r2, r3
 8108eca:	88fb      	ldrh	r3, [r7, #6]
 8108ecc:	f7f9 fe4a 	bl	8102b64 <HAL_DMA_Start_IT>
 8108ed0:	4603      	mov	r3, r0
 8108ed2:	2b00      	cmp	r3, #0
 8108ed4:	d00d      	beq.n	8108ef2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8108ed6:	68fb      	ldr	r3, [r7, #12]
 8108ed8:	2210      	movs	r2, #16
 8108eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8108ede:	68fb      	ldr	r3, [r7, #12]
 8108ee0:	2200      	movs	r2, #0
 8108ee2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8108ee6:	68fb      	ldr	r3, [r7, #12]
 8108ee8:	2220      	movs	r2, #32
 8108eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8108eee:	2301      	movs	r3, #1
 8108ef0:	e012      	b.n	8108f18 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8108ef2:	68fb      	ldr	r3, [r7, #12]
 8108ef4:	681b      	ldr	r3, [r3, #0]
 8108ef6:	2240      	movs	r2, #64	; 0x40
 8108ef8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8108efa:	68fb      	ldr	r3, [r7, #12]
 8108efc:	2200      	movs	r2, #0
 8108efe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8108f02:	68fb      	ldr	r3, [r7, #12]
 8108f04:	681b      	ldr	r3, [r3, #0]
 8108f06:	689a      	ldr	r2, [r3, #8]
 8108f08:	68fb      	ldr	r3, [r7, #12]
 8108f0a:	681b      	ldr	r3, [r3, #0]
 8108f0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8108f10:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8108f12:	2300      	movs	r3, #0
 8108f14:	e000      	b.n	8108f18 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8108f16:	2302      	movs	r3, #2
  }
}
 8108f18:	4618      	mov	r0, r3
 8108f1a:	3710      	adds	r7, #16
 8108f1c:	46bd      	mov	sp, r7
 8108f1e:	bd80      	pop	{r7, pc}
 8108f20:	0810a257 	.word	0x0810a257
 8108f24:	0810a2a7 	.word	0x0810a2a7
 8108f28:	0810a345 	.word	0x0810a345

08108f2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8108f2c:	b580      	push	{r7, lr}
 8108f2e:	b084      	sub	sp, #16
 8108f30:	af00      	add	r7, sp, #0
 8108f32:	60f8      	str	r0, [r7, #12]
 8108f34:	60b9      	str	r1, [r7, #8]
 8108f36:	4613      	mov	r3, r2
 8108f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8108f3a:	68fb      	ldr	r3, [r7, #12]
 8108f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108f40:	2b20      	cmp	r3, #32
 8108f42:	d170      	bne.n	8109026 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8108f44:	68bb      	ldr	r3, [r7, #8]
 8108f46:	2b00      	cmp	r3, #0
 8108f48:	d002      	beq.n	8108f50 <HAL_UART_Receive_DMA+0x24>
 8108f4a:	88fb      	ldrh	r3, [r7, #6]
 8108f4c:	2b00      	cmp	r3, #0
 8108f4e:	d101      	bne.n	8108f54 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8108f50:	2301      	movs	r3, #1
 8108f52:	e069      	b.n	8109028 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8108f54:	68fb      	ldr	r3, [r7, #12]
 8108f56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108f5a:	2b01      	cmp	r3, #1
 8108f5c:	d101      	bne.n	8108f62 <HAL_UART_Receive_DMA+0x36>
 8108f5e:	2302      	movs	r3, #2
 8108f60:	e062      	b.n	8109028 <HAL_UART_Receive_DMA+0xfc>
 8108f62:	68fb      	ldr	r3, [r7, #12]
 8108f64:	2201      	movs	r2, #1
 8108f66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8108f6a:	68fb      	ldr	r3, [r7, #12]
 8108f6c:	68ba      	ldr	r2, [r7, #8]
 8108f6e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8108f70:	68fb      	ldr	r3, [r7, #12]
 8108f72:	88fa      	ldrh	r2, [r7, #6]
 8108f74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108f78:	68fb      	ldr	r3, [r7, #12]
 8108f7a:	2200      	movs	r2, #0
 8108f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8108f80:	68fb      	ldr	r3, [r7, #12]
 8108f82:	2222      	movs	r2, #34	; 0x22
 8108f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8108f88:	68fb      	ldr	r3, [r7, #12]
 8108f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108f8c:	2b00      	cmp	r3, #0
 8108f8e:	d02c      	beq.n	8108fea <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8108f90:	68fb      	ldr	r3, [r7, #12]
 8108f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108f94:	4a26      	ldr	r2, [pc, #152]	; (8109030 <HAL_UART_Receive_DMA+0x104>)
 8108f96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8108f98:	68fb      	ldr	r3, [r7, #12]
 8108f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108f9c:	4a25      	ldr	r2, [pc, #148]	; (8109034 <HAL_UART_Receive_DMA+0x108>)
 8108f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8108fa0:	68fb      	ldr	r3, [r7, #12]
 8108fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108fa4:	4a24      	ldr	r2, [pc, #144]	; (8109038 <HAL_UART_Receive_DMA+0x10c>)
 8108fa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8108fa8:	68fb      	ldr	r3, [r7, #12]
 8108faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108fac:	2200      	movs	r2, #0
 8108fae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8108fb0:	68fb      	ldr	r3, [r7, #12]
 8108fb2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8108fb4:	68fb      	ldr	r3, [r7, #12]
 8108fb6:	681b      	ldr	r3, [r3, #0]
 8108fb8:	3324      	adds	r3, #36	; 0x24
 8108fba:	4619      	mov	r1, r3
 8108fbc:	68fb      	ldr	r3, [r7, #12]
 8108fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108fc0:	461a      	mov	r2, r3
 8108fc2:	88fb      	ldrh	r3, [r7, #6]
 8108fc4:	f7f9 fdce 	bl	8102b64 <HAL_DMA_Start_IT>
 8108fc8:	4603      	mov	r3, r0
 8108fca:	2b00      	cmp	r3, #0
 8108fcc:	d00d      	beq.n	8108fea <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8108fce:	68fb      	ldr	r3, [r7, #12]
 8108fd0:	2210      	movs	r2, #16
 8108fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8108fd6:	68fb      	ldr	r3, [r7, #12]
 8108fd8:	2200      	movs	r2, #0
 8108fda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8108fde:	68fb      	ldr	r3, [r7, #12]
 8108fe0:	2220      	movs	r2, #32
 8108fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8108fe6:	2301      	movs	r3, #1
 8108fe8:	e01e      	b.n	8109028 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8108fea:	68fb      	ldr	r3, [r7, #12]
 8108fec:	2200      	movs	r2, #0
 8108fee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108ff2:	68fb      	ldr	r3, [r7, #12]
 8108ff4:	681b      	ldr	r3, [r3, #0]
 8108ff6:	681a      	ldr	r2, [r3, #0]
 8108ff8:	68fb      	ldr	r3, [r7, #12]
 8108ffa:	681b      	ldr	r3, [r3, #0]
 8108ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8109000:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109002:	68fb      	ldr	r3, [r7, #12]
 8109004:	681b      	ldr	r3, [r3, #0]
 8109006:	689a      	ldr	r2, [r3, #8]
 8109008:	68fb      	ldr	r3, [r7, #12]
 810900a:	681b      	ldr	r3, [r3, #0]
 810900c:	f042 0201 	orr.w	r2, r2, #1
 8109010:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109012:	68fb      	ldr	r3, [r7, #12]
 8109014:	681b      	ldr	r3, [r3, #0]
 8109016:	689a      	ldr	r2, [r3, #8]
 8109018:	68fb      	ldr	r3, [r7, #12]
 810901a:	681b      	ldr	r3, [r3, #0]
 810901c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8109020:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8109022:	2300      	movs	r3, #0
 8109024:	e000      	b.n	8109028 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8109026:	2302      	movs	r3, #2
  }
}
 8109028:	4618      	mov	r0, r3
 810902a:	3710      	adds	r7, #16
 810902c:	46bd      	mov	sp, r7
 810902e:	bd80      	pop	{r7, pc}
 8109030:	0810a2c3 	.word	0x0810a2c3
 8109034:	0810a329 	.word	0x0810a329
 8109038:	0810a345 	.word	0x0810a345

0810903c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810903c:	b580      	push	{r7, lr}
 810903e:	b088      	sub	sp, #32
 8109040:	af00      	add	r7, sp, #0
 8109042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8109044:	687b      	ldr	r3, [r7, #4]
 8109046:	681b      	ldr	r3, [r3, #0]
 8109048:	69db      	ldr	r3, [r3, #28]
 810904a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810904c:	687b      	ldr	r3, [r7, #4]
 810904e:	681b      	ldr	r3, [r3, #0]
 8109050:	681b      	ldr	r3, [r3, #0]
 8109052:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8109054:	687b      	ldr	r3, [r7, #4]
 8109056:	681b      	ldr	r3, [r3, #0]
 8109058:	689b      	ldr	r3, [r3, #8]
 810905a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810905c:	69fa      	ldr	r2, [r7, #28]
 810905e:	f640 030f 	movw	r3, #2063	; 0x80f
 8109062:	4013      	ands	r3, r2
 8109064:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8109066:	693b      	ldr	r3, [r7, #16]
 8109068:	2b00      	cmp	r3, #0
 810906a:	d118      	bne.n	810909e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810906c:	69fb      	ldr	r3, [r7, #28]
 810906e:	f003 0320 	and.w	r3, r3, #32
 8109072:	2b00      	cmp	r3, #0
 8109074:	d013      	beq.n	810909e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109076:	69bb      	ldr	r3, [r7, #24]
 8109078:	f003 0320 	and.w	r3, r3, #32
 810907c:	2b00      	cmp	r3, #0
 810907e:	d104      	bne.n	810908a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109080:	697b      	ldr	r3, [r7, #20]
 8109082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109086:	2b00      	cmp	r3, #0
 8109088:	d009      	beq.n	810909e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810908a:	687b      	ldr	r3, [r7, #4]
 810908c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810908e:	2b00      	cmp	r3, #0
 8109090:	f000 8145 	beq.w	810931e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109098:	6878      	ldr	r0, [r7, #4]
 810909a:	4798      	blx	r3
      }
      return;
 810909c:	e13f      	b.n	810931e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810909e:	693b      	ldr	r3, [r7, #16]
 81090a0:	2b00      	cmp	r3, #0
 81090a2:	f000 80e8 	beq.w	8109276 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81090a6:	697a      	ldr	r2, [r7, #20]
 81090a8:	4ba1      	ldr	r3, [pc, #644]	; (8109330 <HAL_UART_IRQHandler+0x2f4>)
 81090aa:	4013      	ands	r3, r2
 81090ac:	2b00      	cmp	r3, #0
 81090ae:	d105      	bne.n	81090bc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81090b0:	69ba      	ldr	r2, [r7, #24]
 81090b2:	4ba0      	ldr	r3, [pc, #640]	; (8109334 <HAL_UART_IRQHandler+0x2f8>)
 81090b4:	4013      	ands	r3, r2
 81090b6:	2b00      	cmp	r3, #0
 81090b8:	f000 80dd 	beq.w	8109276 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81090bc:	69fb      	ldr	r3, [r7, #28]
 81090be:	f003 0301 	and.w	r3, r3, #1
 81090c2:	2b00      	cmp	r3, #0
 81090c4:	d010      	beq.n	81090e8 <HAL_UART_IRQHandler+0xac>
 81090c6:	69bb      	ldr	r3, [r7, #24]
 81090c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81090cc:	2b00      	cmp	r3, #0
 81090ce:	d00b      	beq.n	81090e8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81090d0:	687b      	ldr	r3, [r7, #4]
 81090d2:	681b      	ldr	r3, [r3, #0]
 81090d4:	2201      	movs	r2, #1
 81090d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81090de:	f043 0201 	orr.w	r2, r3, #1
 81090e2:	687b      	ldr	r3, [r7, #4]
 81090e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81090e8:	69fb      	ldr	r3, [r7, #28]
 81090ea:	f003 0302 	and.w	r3, r3, #2
 81090ee:	2b00      	cmp	r3, #0
 81090f0:	d010      	beq.n	8109114 <HAL_UART_IRQHandler+0xd8>
 81090f2:	697b      	ldr	r3, [r7, #20]
 81090f4:	f003 0301 	and.w	r3, r3, #1
 81090f8:	2b00      	cmp	r3, #0
 81090fa:	d00b      	beq.n	8109114 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	681b      	ldr	r3, [r3, #0]
 8109100:	2202      	movs	r2, #2
 8109102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810910a:	f043 0204 	orr.w	r2, r3, #4
 810910e:	687b      	ldr	r3, [r7, #4]
 8109110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109114:	69fb      	ldr	r3, [r7, #28]
 8109116:	f003 0304 	and.w	r3, r3, #4
 810911a:	2b00      	cmp	r3, #0
 810911c:	d010      	beq.n	8109140 <HAL_UART_IRQHandler+0x104>
 810911e:	697b      	ldr	r3, [r7, #20]
 8109120:	f003 0301 	and.w	r3, r3, #1
 8109124:	2b00      	cmp	r3, #0
 8109126:	d00b      	beq.n	8109140 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109128:	687b      	ldr	r3, [r7, #4]
 810912a:	681b      	ldr	r3, [r3, #0]
 810912c:	2204      	movs	r2, #4
 810912e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109130:	687b      	ldr	r3, [r7, #4]
 8109132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109136:	f043 0202 	orr.w	r2, r3, #2
 810913a:	687b      	ldr	r3, [r7, #4]
 810913c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8109140:	69fb      	ldr	r3, [r7, #28]
 8109142:	f003 0308 	and.w	r3, r3, #8
 8109146:	2b00      	cmp	r3, #0
 8109148:	d015      	beq.n	8109176 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810914a:	69bb      	ldr	r3, [r7, #24]
 810914c:	f003 0320 	and.w	r3, r3, #32
 8109150:	2b00      	cmp	r3, #0
 8109152:	d104      	bne.n	810915e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8109154:	697a      	ldr	r2, [r7, #20]
 8109156:	4b76      	ldr	r3, [pc, #472]	; (8109330 <HAL_UART_IRQHandler+0x2f4>)
 8109158:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810915a:	2b00      	cmp	r3, #0
 810915c:	d00b      	beq.n	8109176 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810915e:	687b      	ldr	r3, [r7, #4]
 8109160:	681b      	ldr	r3, [r3, #0]
 8109162:	2208      	movs	r2, #8
 8109164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810916c:	f043 0208 	orr.w	r2, r3, #8
 8109170:	687b      	ldr	r3, [r7, #4]
 8109172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8109176:	69fb      	ldr	r3, [r7, #28]
 8109178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810917c:	2b00      	cmp	r3, #0
 810917e:	d011      	beq.n	81091a4 <HAL_UART_IRQHandler+0x168>
 8109180:	69bb      	ldr	r3, [r7, #24]
 8109182:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8109186:	2b00      	cmp	r3, #0
 8109188:	d00c      	beq.n	81091a4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810918a:	687b      	ldr	r3, [r7, #4]
 810918c:	681b      	ldr	r3, [r3, #0]
 810918e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810919a:	f043 0220 	orr.w	r2, r3, #32
 810919e:	687b      	ldr	r3, [r7, #4]
 81091a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81091aa:	2b00      	cmp	r3, #0
 81091ac:	f000 80b9 	beq.w	8109322 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81091b0:	69fb      	ldr	r3, [r7, #28]
 81091b2:	f003 0320 	and.w	r3, r3, #32
 81091b6:	2b00      	cmp	r3, #0
 81091b8:	d011      	beq.n	81091de <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81091ba:	69bb      	ldr	r3, [r7, #24]
 81091bc:	f003 0320 	and.w	r3, r3, #32
 81091c0:	2b00      	cmp	r3, #0
 81091c2:	d104      	bne.n	81091ce <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81091c4:	697b      	ldr	r3, [r7, #20]
 81091c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81091ca:	2b00      	cmp	r3, #0
 81091cc:	d007      	beq.n	81091de <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 81091ce:	687b      	ldr	r3, [r7, #4]
 81091d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81091d2:	2b00      	cmp	r3, #0
 81091d4:	d003      	beq.n	81091de <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 81091d6:	687b      	ldr	r3, [r7, #4]
 81091d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81091da:	6878      	ldr	r0, [r7, #4]
 81091dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81091e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	681b      	ldr	r3, [r3, #0]
 81091ea:	689b      	ldr	r3, [r3, #8]
 81091ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81091f0:	2b40      	cmp	r3, #64	; 0x40
 81091f2:	d004      	beq.n	81091fe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 81091f4:	68fb      	ldr	r3, [r7, #12]
 81091f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81091fa:	2b00      	cmp	r3, #0
 81091fc:	d031      	beq.n	8109262 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 81091fe:	6878      	ldr	r0, [r7, #4]
 8109200:	f001 f806 	bl	810a210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109204:	687b      	ldr	r3, [r7, #4]
 8109206:	681b      	ldr	r3, [r3, #0]
 8109208:	689b      	ldr	r3, [r3, #8]
 810920a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810920e:	2b40      	cmp	r3, #64	; 0x40
 8109210:	d123      	bne.n	810925a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109212:	687b      	ldr	r3, [r7, #4]
 8109214:	681b      	ldr	r3, [r3, #0]
 8109216:	689a      	ldr	r2, [r3, #8]
 8109218:	687b      	ldr	r3, [r7, #4]
 810921a:	681b      	ldr	r3, [r3, #0]
 810921c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8109220:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109226:	2b00      	cmp	r3, #0
 8109228:	d013      	beq.n	8109252 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810922a:	687b      	ldr	r3, [r7, #4]
 810922c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810922e:	4a42      	ldr	r2, [pc, #264]	; (8109338 <HAL_UART_IRQHandler+0x2fc>)
 8109230:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8109232:	687b      	ldr	r3, [r7, #4]
 8109234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109236:	4618      	mov	r0, r3
 8109238:	f7fa fa1c 	bl	8103674 <HAL_DMA_Abort_IT>
 810923c:	4603      	mov	r3, r0
 810923e:	2b00      	cmp	r3, #0
 8109240:	d017      	beq.n	8109272 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109248:	687a      	ldr	r2, [r7, #4]
 810924a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 810924c:	4610      	mov	r0, r2
 810924e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109250:	e00f      	b.n	8109272 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8109252:	6878      	ldr	r0, [r7, #4]
 8109254:	f000 f89a 	bl	810938c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109258:	e00b      	b.n	8109272 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810925a:	6878      	ldr	r0, [r7, #4]
 810925c:	f000 f896 	bl	810938c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109260:	e007      	b.n	8109272 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8109262:	6878      	ldr	r0, [r7, #4]
 8109264:	f000 f892 	bl	810938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	2200      	movs	r2, #0
 810926c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8109270:	e057      	b.n	8109322 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109272:	bf00      	nop
    return;
 8109274:	e055      	b.n	8109322 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8109276:	69fb      	ldr	r3, [r7, #28]
 8109278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810927c:	2b00      	cmp	r3, #0
 810927e:	d00d      	beq.n	810929c <HAL_UART_IRQHandler+0x260>
 8109280:	697b      	ldr	r3, [r7, #20]
 8109282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8109286:	2b00      	cmp	r3, #0
 8109288:	d008      	beq.n	810929c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810928a:	687b      	ldr	r3, [r7, #4]
 810928c:	681b      	ldr	r3, [r3, #0]
 810928e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8109292:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8109294:	6878      	ldr	r0, [r7, #4]
 8109296:	f001 f8c5 	bl	810a424 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810929a:	e045      	b.n	8109328 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810929c:	69fb      	ldr	r3, [r7, #28]
 810929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81092a2:	2b00      	cmp	r3, #0
 81092a4:	d012      	beq.n	81092cc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81092a6:	69bb      	ldr	r3, [r7, #24]
 81092a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81092ac:	2b00      	cmp	r3, #0
 81092ae:	d104      	bne.n	81092ba <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81092b0:	697b      	ldr	r3, [r7, #20]
 81092b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81092b6:	2b00      	cmp	r3, #0
 81092b8:	d008      	beq.n	81092cc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 81092ba:	687b      	ldr	r3, [r7, #4]
 81092bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81092be:	2b00      	cmp	r3, #0
 81092c0:	d031      	beq.n	8109326 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81092c6:	6878      	ldr	r0, [r7, #4]
 81092c8:	4798      	blx	r3
    }
    return;
 81092ca:	e02c      	b.n	8109326 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 81092cc:	69fb      	ldr	r3, [r7, #28]
 81092ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81092d2:	2b00      	cmp	r3, #0
 81092d4:	d008      	beq.n	81092e8 <HAL_UART_IRQHandler+0x2ac>
 81092d6:	69bb      	ldr	r3, [r7, #24]
 81092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81092dc:	2b00      	cmp	r3, #0
 81092de:	d003      	beq.n	81092e8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 81092e0:	6878      	ldr	r0, [r7, #4]
 81092e2:	f001 f885 	bl	810a3f0 <UART_EndTransmit_IT>
    return;
 81092e6:	e01f      	b.n	8109328 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 81092e8:	69fb      	ldr	r3, [r7, #28]
 81092ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81092ee:	2b00      	cmp	r3, #0
 81092f0:	d008      	beq.n	8109304 <HAL_UART_IRQHandler+0x2c8>
 81092f2:	69bb      	ldr	r3, [r7, #24]
 81092f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	d003      	beq.n	8109304 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 81092fc:	6878      	ldr	r0, [r7, #4]
 81092fe:	f001 f8a5 	bl	810a44c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109302:	e011      	b.n	8109328 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8109304:	69fb      	ldr	r3, [r7, #28]
 8109306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810930a:	2b00      	cmp	r3, #0
 810930c:	d00c      	beq.n	8109328 <HAL_UART_IRQHandler+0x2ec>
 810930e:	69bb      	ldr	r3, [r7, #24]
 8109310:	2b00      	cmp	r3, #0
 8109312:	da09      	bge.n	8109328 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8109314:	6878      	ldr	r0, [r7, #4]
 8109316:	f001 f88f 	bl	810a438 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810931a:	bf00      	nop
 810931c:	e004      	b.n	8109328 <HAL_UART_IRQHandler+0x2ec>
      return;
 810931e:	bf00      	nop
 8109320:	e002      	b.n	8109328 <HAL_UART_IRQHandler+0x2ec>
    return;
 8109322:	bf00      	nop
 8109324:	e000      	b.n	8109328 <HAL_UART_IRQHandler+0x2ec>
    return;
 8109326:	bf00      	nop
  }
}
 8109328:	3720      	adds	r7, #32
 810932a:	46bd      	mov	sp, r7
 810932c:	bd80      	pop	{r7, pc}
 810932e:	bf00      	nop
 8109330:	10000001 	.word	0x10000001
 8109334:	04000120 	.word	0x04000120
 8109338:	0810a3c5 	.word	0x0810a3c5

0810933c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810933c:	b480      	push	{r7}
 810933e:	b083      	sub	sp, #12
 8109340:	af00      	add	r7, sp, #0
 8109342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8109344:	bf00      	nop
 8109346:	370c      	adds	r7, #12
 8109348:	46bd      	mov	sp, r7
 810934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810934e:	4770      	bx	lr

08109350 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8109350:	b480      	push	{r7}
 8109352:	b083      	sub	sp, #12
 8109354:	af00      	add	r7, sp, #0
 8109356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8109358:	bf00      	nop
 810935a:	370c      	adds	r7, #12
 810935c:	46bd      	mov	sp, r7
 810935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109362:	4770      	bx	lr

08109364 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8109364:	b480      	push	{r7}
 8109366:	b083      	sub	sp, #12
 8109368:	af00      	add	r7, sp, #0
 810936a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 810936c:	bf00      	nop
 810936e:	370c      	adds	r7, #12
 8109370:	46bd      	mov	sp, r7
 8109372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109376:	4770      	bx	lr

08109378 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8109378:	b480      	push	{r7}
 810937a:	b083      	sub	sp, #12
 810937c:	af00      	add	r7, sp, #0
 810937e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8109380:	bf00      	nop
 8109382:	370c      	adds	r7, #12
 8109384:	46bd      	mov	sp, r7
 8109386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810938a:	4770      	bx	lr

0810938c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810938c:	b480      	push	{r7}
 810938e:	b083      	sub	sp, #12
 8109390:	af00      	add	r7, sp, #0
 8109392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8109394:	bf00      	nop
 8109396:	370c      	adds	r7, #12
 8109398:	46bd      	mov	sp, r7
 810939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810939e:	4770      	bx	lr

081093a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81093a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 81093a4:	b08e      	sub	sp, #56	; 0x38
 81093a6:	af00      	add	r7, sp, #0
 81093a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81093aa:	2300      	movs	r3, #0
 81093ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81093b0:	687b      	ldr	r3, [r7, #4]
 81093b2:	689a      	ldr	r2, [r3, #8]
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	691b      	ldr	r3, [r3, #16]
 81093b8:	431a      	orrs	r2, r3
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	695b      	ldr	r3, [r3, #20]
 81093be:	431a      	orrs	r2, r3
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	69db      	ldr	r3, [r3, #28]
 81093c4:	4313      	orrs	r3, r2
 81093c6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81093cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81093ce:	4313      	orrs	r3, r2
 81093d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81093d2:	687b      	ldr	r3, [r7, #4]
 81093d4:	681b      	ldr	r3, [r3, #0]
 81093d6:	681a      	ldr	r2, [r3, #0]
 81093d8:	4bc2      	ldr	r3, [pc, #776]	; (81096e4 <UART_SetConfig+0x344>)
 81093da:	4013      	ands	r3, r2
 81093dc:	687a      	ldr	r2, [r7, #4]
 81093de:	6812      	ldr	r2, [r2, #0]
 81093e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81093e2:	430b      	orrs	r3, r1
 81093e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81093e6:	687b      	ldr	r3, [r7, #4]
 81093e8:	681b      	ldr	r3, [r3, #0]
 81093ea:	685b      	ldr	r3, [r3, #4]
 81093ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81093f0:	687b      	ldr	r3, [r7, #4]
 81093f2:	68da      	ldr	r2, [r3, #12]
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	681b      	ldr	r3, [r3, #0]
 81093f8:	430a      	orrs	r2, r1
 81093fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	699b      	ldr	r3, [r3, #24]
 8109400:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	681b      	ldr	r3, [r3, #0]
 8109406:	4ab8      	ldr	r2, [pc, #736]	; (81096e8 <UART_SetConfig+0x348>)
 8109408:	4293      	cmp	r3, r2
 810940a:	d004      	beq.n	8109416 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	6a1b      	ldr	r3, [r3, #32]
 8109410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109412:	4313      	orrs	r3, r2
 8109414:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109416:	687b      	ldr	r3, [r7, #4]
 8109418:	681b      	ldr	r3, [r3, #0]
 810941a:	689b      	ldr	r3, [r3, #8]
 810941c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109420:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109424:	687a      	ldr	r2, [r7, #4]
 8109426:	6812      	ldr	r2, [r2, #0]
 8109428:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810942a:	430b      	orrs	r3, r1
 810942c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810942e:	687b      	ldr	r3, [r7, #4]
 8109430:	681b      	ldr	r3, [r3, #0]
 8109432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109434:	f023 010f 	bic.w	r1, r3, #15
 8109438:	687b      	ldr	r3, [r7, #4]
 810943a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	681b      	ldr	r3, [r3, #0]
 8109440:	430a      	orrs	r2, r1
 8109442:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	681b      	ldr	r3, [r3, #0]
 8109448:	4aa8      	ldr	r2, [pc, #672]	; (81096ec <UART_SetConfig+0x34c>)
 810944a:	4293      	cmp	r3, r2
 810944c:	d177      	bne.n	810953e <UART_SetConfig+0x19e>
 810944e:	4ba8      	ldr	r3, [pc, #672]	; (81096f0 <UART_SetConfig+0x350>)
 8109450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109456:	2b28      	cmp	r3, #40	; 0x28
 8109458:	d86c      	bhi.n	8109534 <UART_SetConfig+0x194>
 810945a:	a201      	add	r2, pc, #4	; (adr r2, 8109460 <UART_SetConfig+0xc0>)
 810945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109460:	08109505 	.word	0x08109505
 8109464:	08109535 	.word	0x08109535
 8109468:	08109535 	.word	0x08109535
 810946c:	08109535 	.word	0x08109535
 8109470:	08109535 	.word	0x08109535
 8109474:	08109535 	.word	0x08109535
 8109478:	08109535 	.word	0x08109535
 810947c:	08109535 	.word	0x08109535
 8109480:	0810950d 	.word	0x0810950d
 8109484:	08109535 	.word	0x08109535
 8109488:	08109535 	.word	0x08109535
 810948c:	08109535 	.word	0x08109535
 8109490:	08109535 	.word	0x08109535
 8109494:	08109535 	.word	0x08109535
 8109498:	08109535 	.word	0x08109535
 810949c:	08109535 	.word	0x08109535
 81094a0:	08109515 	.word	0x08109515
 81094a4:	08109535 	.word	0x08109535
 81094a8:	08109535 	.word	0x08109535
 81094ac:	08109535 	.word	0x08109535
 81094b0:	08109535 	.word	0x08109535
 81094b4:	08109535 	.word	0x08109535
 81094b8:	08109535 	.word	0x08109535
 81094bc:	08109535 	.word	0x08109535
 81094c0:	0810951d 	.word	0x0810951d
 81094c4:	08109535 	.word	0x08109535
 81094c8:	08109535 	.word	0x08109535
 81094cc:	08109535 	.word	0x08109535
 81094d0:	08109535 	.word	0x08109535
 81094d4:	08109535 	.word	0x08109535
 81094d8:	08109535 	.word	0x08109535
 81094dc:	08109535 	.word	0x08109535
 81094e0:	08109525 	.word	0x08109525
 81094e4:	08109535 	.word	0x08109535
 81094e8:	08109535 	.word	0x08109535
 81094ec:	08109535 	.word	0x08109535
 81094f0:	08109535 	.word	0x08109535
 81094f4:	08109535 	.word	0x08109535
 81094f8:	08109535 	.word	0x08109535
 81094fc:	08109535 	.word	0x08109535
 8109500:	0810952d 	.word	0x0810952d
 8109504:	2301      	movs	r3, #1
 8109506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810950a:	e231      	b.n	8109970 <UART_SetConfig+0x5d0>
 810950c:	2304      	movs	r3, #4
 810950e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109512:	e22d      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109514:	2308      	movs	r3, #8
 8109516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810951a:	e229      	b.n	8109970 <UART_SetConfig+0x5d0>
 810951c:	2310      	movs	r3, #16
 810951e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109522:	e225      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109524:	2320      	movs	r3, #32
 8109526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810952a:	e221      	b.n	8109970 <UART_SetConfig+0x5d0>
 810952c:	2340      	movs	r3, #64	; 0x40
 810952e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109532:	e21d      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109534:	2380      	movs	r3, #128	; 0x80
 8109536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810953a:	bf00      	nop
 810953c:	e218      	b.n	8109970 <UART_SetConfig+0x5d0>
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	681b      	ldr	r3, [r3, #0]
 8109542:	4a6c      	ldr	r2, [pc, #432]	; (81096f4 <UART_SetConfig+0x354>)
 8109544:	4293      	cmp	r3, r2
 8109546:	d132      	bne.n	81095ae <UART_SetConfig+0x20e>
 8109548:	4b69      	ldr	r3, [pc, #420]	; (81096f0 <UART_SetConfig+0x350>)
 810954a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810954c:	f003 0307 	and.w	r3, r3, #7
 8109550:	2b05      	cmp	r3, #5
 8109552:	d827      	bhi.n	81095a4 <UART_SetConfig+0x204>
 8109554:	a201      	add	r2, pc, #4	; (adr r2, 810955c <UART_SetConfig+0x1bc>)
 8109556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810955a:	bf00      	nop
 810955c:	08109575 	.word	0x08109575
 8109560:	0810957d 	.word	0x0810957d
 8109564:	08109585 	.word	0x08109585
 8109568:	0810958d 	.word	0x0810958d
 810956c:	08109595 	.word	0x08109595
 8109570:	0810959d 	.word	0x0810959d
 8109574:	2300      	movs	r3, #0
 8109576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810957a:	e1f9      	b.n	8109970 <UART_SetConfig+0x5d0>
 810957c:	2304      	movs	r3, #4
 810957e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109582:	e1f5      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109584:	2308      	movs	r3, #8
 8109586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810958a:	e1f1      	b.n	8109970 <UART_SetConfig+0x5d0>
 810958c:	2310      	movs	r3, #16
 810958e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109592:	e1ed      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109594:	2320      	movs	r3, #32
 8109596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810959a:	e1e9      	b.n	8109970 <UART_SetConfig+0x5d0>
 810959c:	2340      	movs	r3, #64	; 0x40
 810959e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81095a2:	e1e5      	b.n	8109970 <UART_SetConfig+0x5d0>
 81095a4:	2380      	movs	r3, #128	; 0x80
 81095a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81095aa:	bf00      	nop
 81095ac:	e1e0      	b.n	8109970 <UART_SetConfig+0x5d0>
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	681b      	ldr	r3, [r3, #0]
 81095b2:	4a51      	ldr	r2, [pc, #324]	; (81096f8 <UART_SetConfig+0x358>)
 81095b4:	4293      	cmp	r3, r2
 81095b6:	d132      	bne.n	810961e <UART_SetConfig+0x27e>
 81095b8:	4b4d      	ldr	r3, [pc, #308]	; (81096f0 <UART_SetConfig+0x350>)
 81095ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81095bc:	f003 0307 	and.w	r3, r3, #7
 81095c0:	2b05      	cmp	r3, #5
 81095c2:	d827      	bhi.n	8109614 <UART_SetConfig+0x274>
 81095c4:	a201      	add	r2, pc, #4	; (adr r2, 81095cc <UART_SetConfig+0x22c>)
 81095c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81095ca:	bf00      	nop
 81095cc:	081095e5 	.word	0x081095e5
 81095d0:	081095ed 	.word	0x081095ed
 81095d4:	081095f5 	.word	0x081095f5
 81095d8:	081095fd 	.word	0x081095fd
 81095dc:	08109605 	.word	0x08109605
 81095e0:	0810960d 	.word	0x0810960d
 81095e4:	2300      	movs	r3, #0
 81095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81095ea:	e1c1      	b.n	8109970 <UART_SetConfig+0x5d0>
 81095ec:	2304      	movs	r3, #4
 81095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81095f2:	e1bd      	b.n	8109970 <UART_SetConfig+0x5d0>
 81095f4:	2308      	movs	r3, #8
 81095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81095fa:	e1b9      	b.n	8109970 <UART_SetConfig+0x5d0>
 81095fc:	2310      	movs	r3, #16
 81095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109602:	e1b5      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109604:	2320      	movs	r3, #32
 8109606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810960a:	e1b1      	b.n	8109970 <UART_SetConfig+0x5d0>
 810960c:	2340      	movs	r3, #64	; 0x40
 810960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109612:	e1ad      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109614:	2380      	movs	r3, #128	; 0x80
 8109616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810961a:	bf00      	nop
 810961c:	e1a8      	b.n	8109970 <UART_SetConfig+0x5d0>
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	681b      	ldr	r3, [r3, #0]
 8109622:	4a36      	ldr	r2, [pc, #216]	; (81096fc <UART_SetConfig+0x35c>)
 8109624:	4293      	cmp	r3, r2
 8109626:	d132      	bne.n	810968e <UART_SetConfig+0x2ee>
 8109628:	4b31      	ldr	r3, [pc, #196]	; (81096f0 <UART_SetConfig+0x350>)
 810962a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810962c:	f003 0307 	and.w	r3, r3, #7
 8109630:	2b05      	cmp	r3, #5
 8109632:	d827      	bhi.n	8109684 <UART_SetConfig+0x2e4>
 8109634:	a201      	add	r2, pc, #4	; (adr r2, 810963c <UART_SetConfig+0x29c>)
 8109636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810963a:	bf00      	nop
 810963c:	08109655 	.word	0x08109655
 8109640:	0810965d 	.word	0x0810965d
 8109644:	08109665 	.word	0x08109665
 8109648:	0810966d 	.word	0x0810966d
 810964c:	08109675 	.word	0x08109675
 8109650:	0810967d 	.word	0x0810967d
 8109654:	2300      	movs	r3, #0
 8109656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810965a:	e189      	b.n	8109970 <UART_SetConfig+0x5d0>
 810965c:	2304      	movs	r3, #4
 810965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109662:	e185      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109664:	2308      	movs	r3, #8
 8109666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810966a:	e181      	b.n	8109970 <UART_SetConfig+0x5d0>
 810966c:	2310      	movs	r3, #16
 810966e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109672:	e17d      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109674:	2320      	movs	r3, #32
 8109676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810967a:	e179      	b.n	8109970 <UART_SetConfig+0x5d0>
 810967c:	2340      	movs	r3, #64	; 0x40
 810967e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109682:	e175      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109684:	2380      	movs	r3, #128	; 0x80
 8109686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810968a:	bf00      	nop
 810968c:	e170      	b.n	8109970 <UART_SetConfig+0x5d0>
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	681b      	ldr	r3, [r3, #0]
 8109692:	4a1b      	ldr	r2, [pc, #108]	; (8109700 <UART_SetConfig+0x360>)
 8109694:	4293      	cmp	r3, r2
 8109696:	d142      	bne.n	810971e <UART_SetConfig+0x37e>
 8109698:	4b15      	ldr	r3, [pc, #84]	; (81096f0 <UART_SetConfig+0x350>)
 810969a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810969c:	f003 0307 	and.w	r3, r3, #7
 81096a0:	2b05      	cmp	r3, #5
 81096a2:	d837      	bhi.n	8109714 <UART_SetConfig+0x374>
 81096a4:	a201      	add	r2, pc, #4	; (adr r2, 81096ac <UART_SetConfig+0x30c>)
 81096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81096aa:	bf00      	nop
 81096ac:	081096c5 	.word	0x081096c5
 81096b0:	081096cd 	.word	0x081096cd
 81096b4:	081096d5 	.word	0x081096d5
 81096b8:	081096dd 	.word	0x081096dd
 81096bc:	08109705 	.word	0x08109705
 81096c0:	0810970d 	.word	0x0810970d
 81096c4:	2300      	movs	r3, #0
 81096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81096ca:	e151      	b.n	8109970 <UART_SetConfig+0x5d0>
 81096cc:	2304      	movs	r3, #4
 81096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81096d2:	e14d      	b.n	8109970 <UART_SetConfig+0x5d0>
 81096d4:	2308      	movs	r3, #8
 81096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81096da:	e149      	b.n	8109970 <UART_SetConfig+0x5d0>
 81096dc:	2310      	movs	r3, #16
 81096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81096e2:	e145      	b.n	8109970 <UART_SetConfig+0x5d0>
 81096e4:	cfff69f3 	.word	0xcfff69f3
 81096e8:	58000c00 	.word	0x58000c00
 81096ec:	40011000 	.word	0x40011000
 81096f0:	58024400 	.word	0x58024400
 81096f4:	40004400 	.word	0x40004400
 81096f8:	40004800 	.word	0x40004800
 81096fc:	40004c00 	.word	0x40004c00
 8109700:	40005000 	.word	0x40005000
 8109704:	2320      	movs	r3, #32
 8109706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810970a:	e131      	b.n	8109970 <UART_SetConfig+0x5d0>
 810970c:	2340      	movs	r3, #64	; 0x40
 810970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109712:	e12d      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109714:	2380      	movs	r3, #128	; 0x80
 8109716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810971a:	bf00      	nop
 810971c:	e128      	b.n	8109970 <UART_SetConfig+0x5d0>
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	681b      	ldr	r3, [r3, #0]
 8109722:	4ab6      	ldr	r2, [pc, #728]	; (81099fc <UART_SetConfig+0x65c>)
 8109724:	4293      	cmp	r3, r2
 8109726:	d178      	bne.n	810981a <UART_SetConfig+0x47a>
 8109728:	4bb5      	ldr	r3, [pc, #724]	; (8109a00 <UART_SetConfig+0x660>)
 810972a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810972c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109730:	2b28      	cmp	r3, #40	; 0x28
 8109732:	d86d      	bhi.n	8109810 <UART_SetConfig+0x470>
 8109734:	a201      	add	r2, pc, #4	; (adr r2, 810973c <UART_SetConfig+0x39c>)
 8109736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810973a:	bf00      	nop
 810973c:	081097e1 	.word	0x081097e1
 8109740:	08109811 	.word	0x08109811
 8109744:	08109811 	.word	0x08109811
 8109748:	08109811 	.word	0x08109811
 810974c:	08109811 	.word	0x08109811
 8109750:	08109811 	.word	0x08109811
 8109754:	08109811 	.word	0x08109811
 8109758:	08109811 	.word	0x08109811
 810975c:	081097e9 	.word	0x081097e9
 8109760:	08109811 	.word	0x08109811
 8109764:	08109811 	.word	0x08109811
 8109768:	08109811 	.word	0x08109811
 810976c:	08109811 	.word	0x08109811
 8109770:	08109811 	.word	0x08109811
 8109774:	08109811 	.word	0x08109811
 8109778:	08109811 	.word	0x08109811
 810977c:	081097f1 	.word	0x081097f1
 8109780:	08109811 	.word	0x08109811
 8109784:	08109811 	.word	0x08109811
 8109788:	08109811 	.word	0x08109811
 810978c:	08109811 	.word	0x08109811
 8109790:	08109811 	.word	0x08109811
 8109794:	08109811 	.word	0x08109811
 8109798:	08109811 	.word	0x08109811
 810979c:	081097f9 	.word	0x081097f9
 81097a0:	08109811 	.word	0x08109811
 81097a4:	08109811 	.word	0x08109811
 81097a8:	08109811 	.word	0x08109811
 81097ac:	08109811 	.word	0x08109811
 81097b0:	08109811 	.word	0x08109811
 81097b4:	08109811 	.word	0x08109811
 81097b8:	08109811 	.word	0x08109811
 81097bc:	08109801 	.word	0x08109801
 81097c0:	08109811 	.word	0x08109811
 81097c4:	08109811 	.word	0x08109811
 81097c8:	08109811 	.word	0x08109811
 81097cc:	08109811 	.word	0x08109811
 81097d0:	08109811 	.word	0x08109811
 81097d4:	08109811 	.word	0x08109811
 81097d8:	08109811 	.word	0x08109811
 81097dc:	08109809 	.word	0x08109809
 81097e0:	2301      	movs	r3, #1
 81097e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81097e6:	e0c3      	b.n	8109970 <UART_SetConfig+0x5d0>
 81097e8:	2304      	movs	r3, #4
 81097ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81097ee:	e0bf      	b.n	8109970 <UART_SetConfig+0x5d0>
 81097f0:	2308      	movs	r3, #8
 81097f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81097f6:	e0bb      	b.n	8109970 <UART_SetConfig+0x5d0>
 81097f8:	2310      	movs	r3, #16
 81097fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81097fe:	e0b7      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109800:	2320      	movs	r3, #32
 8109802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109806:	e0b3      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109808:	2340      	movs	r3, #64	; 0x40
 810980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810980e:	e0af      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109810:	2380      	movs	r3, #128	; 0x80
 8109812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109816:	bf00      	nop
 8109818:	e0aa      	b.n	8109970 <UART_SetConfig+0x5d0>
 810981a:	687b      	ldr	r3, [r7, #4]
 810981c:	681b      	ldr	r3, [r3, #0]
 810981e:	4a79      	ldr	r2, [pc, #484]	; (8109a04 <UART_SetConfig+0x664>)
 8109820:	4293      	cmp	r3, r2
 8109822:	d132      	bne.n	810988a <UART_SetConfig+0x4ea>
 8109824:	4b76      	ldr	r3, [pc, #472]	; (8109a00 <UART_SetConfig+0x660>)
 8109826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109828:	f003 0307 	and.w	r3, r3, #7
 810982c:	2b05      	cmp	r3, #5
 810982e:	d827      	bhi.n	8109880 <UART_SetConfig+0x4e0>
 8109830:	a201      	add	r2, pc, #4	; (adr r2, 8109838 <UART_SetConfig+0x498>)
 8109832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109836:	bf00      	nop
 8109838:	08109851 	.word	0x08109851
 810983c:	08109859 	.word	0x08109859
 8109840:	08109861 	.word	0x08109861
 8109844:	08109869 	.word	0x08109869
 8109848:	08109871 	.word	0x08109871
 810984c:	08109879 	.word	0x08109879
 8109850:	2300      	movs	r3, #0
 8109852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109856:	e08b      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109858:	2304      	movs	r3, #4
 810985a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810985e:	e087      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109860:	2308      	movs	r3, #8
 8109862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109866:	e083      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109868:	2310      	movs	r3, #16
 810986a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810986e:	e07f      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109870:	2320      	movs	r3, #32
 8109872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109876:	e07b      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109878:	2340      	movs	r3, #64	; 0x40
 810987a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810987e:	e077      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109880:	2380      	movs	r3, #128	; 0x80
 8109882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109886:	bf00      	nop
 8109888:	e072      	b.n	8109970 <UART_SetConfig+0x5d0>
 810988a:	687b      	ldr	r3, [r7, #4]
 810988c:	681b      	ldr	r3, [r3, #0]
 810988e:	4a5e      	ldr	r2, [pc, #376]	; (8109a08 <UART_SetConfig+0x668>)
 8109890:	4293      	cmp	r3, r2
 8109892:	d132      	bne.n	81098fa <UART_SetConfig+0x55a>
 8109894:	4b5a      	ldr	r3, [pc, #360]	; (8109a00 <UART_SetConfig+0x660>)
 8109896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109898:	f003 0307 	and.w	r3, r3, #7
 810989c:	2b05      	cmp	r3, #5
 810989e:	d827      	bhi.n	81098f0 <UART_SetConfig+0x550>
 81098a0:	a201      	add	r2, pc, #4	; (adr r2, 81098a8 <UART_SetConfig+0x508>)
 81098a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81098a6:	bf00      	nop
 81098a8:	081098c1 	.word	0x081098c1
 81098ac:	081098c9 	.word	0x081098c9
 81098b0:	081098d1 	.word	0x081098d1
 81098b4:	081098d9 	.word	0x081098d9
 81098b8:	081098e1 	.word	0x081098e1
 81098bc:	081098e9 	.word	0x081098e9
 81098c0:	2300      	movs	r3, #0
 81098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81098c6:	e053      	b.n	8109970 <UART_SetConfig+0x5d0>
 81098c8:	2304      	movs	r3, #4
 81098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81098ce:	e04f      	b.n	8109970 <UART_SetConfig+0x5d0>
 81098d0:	2308      	movs	r3, #8
 81098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81098d6:	e04b      	b.n	8109970 <UART_SetConfig+0x5d0>
 81098d8:	2310      	movs	r3, #16
 81098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81098de:	e047      	b.n	8109970 <UART_SetConfig+0x5d0>
 81098e0:	2320      	movs	r3, #32
 81098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81098e6:	e043      	b.n	8109970 <UART_SetConfig+0x5d0>
 81098e8:	2340      	movs	r3, #64	; 0x40
 81098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81098ee:	e03f      	b.n	8109970 <UART_SetConfig+0x5d0>
 81098f0:	2380      	movs	r3, #128	; 0x80
 81098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81098f6:	bf00      	nop
 81098f8:	e03a      	b.n	8109970 <UART_SetConfig+0x5d0>
 81098fa:	687b      	ldr	r3, [r7, #4]
 81098fc:	681b      	ldr	r3, [r3, #0]
 81098fe:	4a43      	ldr	r2, [pc, #268]	; (8109a0c <UART_SetConfig+0x66c>)
 8109900:	4293      	cmp	r3, r2
 8109902:	d132      	bne.n	810996a <UART_SetConfig+0x5ca>
 8109904:	4b3e      	ldr	r3, [pc, #248]	; (8109a00 <UART_SetConfig+0x660>)
 8109906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109908:	f003 0307 	and.w	r3, r3, #7
 810990c:	2b05      	cmp	r3, #5
 810990e:	d827      	bhi.n	8109960 <UART_SetConfig+0x5c0>
 8109910:	a201      	add	r2, pc, #4	; (adr r2, 8109918 <UART_SetConfig+0x578>)
 8109912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109916:	bf00      	nop
 8109918:	08109931 	.word	0x08109931
 810991c:	08109939 	.word	0x08109939
 8109920:	08109941 	.word	0x08109941
 8109924:	08109949 	.word	0x08109949
 8109928:	08109951 	.word	0x08109951
 810992c:	08109959 	.word	0x08109959
 8109930:	2302      	movs	r3, #2
 8109932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109936:	e01b      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109938:	2304      	movs	r3, #4
 810993a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810993e:	e017      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109940:	2308      	movs	r3, #8
 8109942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109946:	e013      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109948:	2310      	movs	r3, #16
 810994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810994e:	e00f      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109950:	2320      	movs	r3, #32
 8109952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109956:	e00b      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109958:	2340      	movs	r3, #64	; 0x40
 810995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810995e:	e007      	b.n	8109970 <UART_SetConfig+0x5d0>
 8109960:	2380      	movs	r3, #128	; 0x80
 8109962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109966:	bf00      	nop
 8109968:	e002      	b.n	8109970 <UART_SetConfig+0x5d0>
 810996a:	2380      	movs	r3, #128	; 0x80
 810996c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109970:	687b      	ldr	r3, [r7, #4]
 8109972:	681b      	ldr	r3, [r3, #0]
 8109974:	4a25      	ldr	r2, [pc, #148]	; (8109a0c <UART_SetConfig+0x66c>)
 8109976:	4293      	cmp	r3, r2
 8109978:	f040 80b8 	bne.w	8109aec <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810997c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8109980:	2b08      	cmp	r3, #8
 8109982:	d019      	beq.n	81099b8 <UART_SetConfig+0x618>
 8109984:	2b08      	cmp	r3, #8
 8109986:	dc04      	bgt.n	8109992 <UART_SetConfig+0x5f2>
 8109988:	2b02      	cmp	r3, #2
 810998a:	d009      	beq.n	81099a0 <UART_SetConfig+0x600>
 810998c:	2b04      	cmp	r3, #4
 810998e:	d00b      	beq.n	81099a8 <UART_SetConfig+0x608>
 8109990:	e042      	b.n	8109a18 <UART_SetConfig+0x678>
 8109992:	2b20      	cmp	r3, #32
 8109994:	d02b      	beq.n	81099ee <UART_SetConfig+0x64e>
 8109996:	2b40      	cmp	r3, #64	; 0x40
 8109998:	d02c      	beq.n	81099f4 <UART_SetConfig+0x654>
 810999a:	2b10      	cmp	r3, #16
 810999c:	d014      	beq.n	81099c8 <UART_SetConfig+0x628>
 810999e:	e03b      	b.n	8109a18 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81099a0:	f7fe fae6 	bl	8107f70 <HAL_RCCEx_GetD3PCLK1Freq>
 81099a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81099a6:	e03d      	b.n	8109a24 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81099a8:	f107 0314 	add.w	r3, r7, #20
 81099ac:	4618      	mov	r0, r3
 81099ae:	f7fe faf5 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81099b2:	69bb      	ldr	r3, [r7, #24]
 81099b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81099b6:	e035      	b.n	8109a24 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81099b8:	f107 0308 	add.w	r3, r7, #8
 81099bc:	4618      	mov	r0, r3
 81099be:	f7fe fc39 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81099c2:	68fb      	ldr	r3, [r7, #12]
 81099c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81099c6:	e02d      	b.n	8109a24 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81099c8:	4b0d      	ldr	r3, [pc, #52]	; (8109a00 <UART_SetConfig+0x660>)
 81099ca:	681b      	ldr	r3, [r3, #0]
 81099cc:	f003 0320 	and.w	r3, r3, #32
 81099d0:	2b00      	cmp	r3, #0
 81099d2:	d009      	beq.n	81099e8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81099d4:	4b0a      	ldr	r3, [pc, #40]	; (8109a00 <UART_SetConfig+0x660>)
 81099d6:	681b      	ldr	r3, [r3, #0]
 81099d8:	08db      	lsrs	r3, r3, #3
 81099da:	f003 0303 	and.w	r3, r3, #3
 81099de:	4a0c      	ldr	r2, [pc, #48]	; (8109a10 <UART_SetConfig+0x670>)
 81099e0:	fa22 f303 	lsr.w	r3, r2, r3
 81099e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81099e6:	e01d      	b.n	8109a24 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 81099e8:	4b09      	ldr	r3, [pc, #36]	; (8109a10 <UART_SetConfig+0x670>)
 81099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81099ec:	e01a      	b.n	8109a24 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81099ee:	4b09      	ldr	r3, [pc, #36]	; (8109a14 <UART_SetConfig+0x674>)
 81099f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81099f2:	e017      	b.n	8109a24 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81099f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81099f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81099fa:	e013      	b.n	8109a24 <UART_SetConfig+0x684>
 81099fc:	40011400 	.word	0x40011400
 8109a00:	58024400 	.word	0x58024400
 8109a04:	40007800 	.word	0x40007800
 8109a08:	40007c00 	.word	0x40007c00
 8109a0c:	58000c00 	.word	0x58000c00
 8109a10:	03d09000 	.word	0x03d09000
 8109a14:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8109a18:	2300      	movs	r3, #0
 8109a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8109a1c:	2301      	movs	r3, #1
 8109a1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8109a22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109a26:	2b00      	cmp	r3, #0
 8109a28:	f000 824d 	beq.w	8109ec6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109a2c:	687b      	ldr	r3, [r7, #4]
 8109a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a30:	4aad      	ldr	r2, [pc, #692]	; (8109ce8 <UART_SetConfig+0x948>)
 8109a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109a36:	461a      	mov	r2, r3
 8109a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8109a3e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109a40:	687b      	ldr	r3, [r7, #4]
 8109a42:	685a      	ldr	r2, [r3, #4]
 8109a44:	4613      	mov	r3, r2
 8109a46:	005b      	lsls	r3, r3, #1
 8109a48:	4413      	add	r3, r2
 8109a4a:	6a3a      	ldr	r2, [r7, #32]
 8109a4c:	429a      	cmp	r2, r3
 8109a4e:	d305      	bcc.n	8109a5c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	685b      	ldr	r3, [r3, #4]
 8109a54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109a56:	6a3a      	ldr	r2, [r7, #32]
 8109a58:	429a      	cmp	r2, r3
 8109a5a:	d903      	bls.n	8109a64 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8109a5c:	2301      	movs	r3, #1
 8109a5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8109a62:	e230      	b.n	8109ec6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109a66:	4618      	mov	r0, r3
 8109a68:	f04f 0100 	mov.w	r1, #0
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a70:	4a9d      	ldr	r2, [pc, #628]	; (8109ce8 <UART_SetConfig+0x948>)
 8109a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109a76:	b29b      	uxth	r3, r3
 8109a78:	f04f 0400 	mov.w	r4, #0
 8109a7c:	461a      	mov	r2, r3
 8109a7e:	4623      	mov	r3, r4
 8109a80:	f7f6 fc2a 	bl	81002d8 <__aeabi_uldivmod>
 8109a84:	4603      	mov	r3, r0
 8109a86:	460c      	mov	r4, r1
 8109a88:	4619      	mov	r1, r3
 8109a8a:	4622      	mov	r2, r4
 8109a8c:	f04f 0300 	mov.w	r3, #0
 8109a90:	f04f 0400 	mov.w	r4, #0
 8109a94:	0214      	lsls	r4, r2, #8
 8109a96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8109a9a:	020b      	lsls	r3, r1, #8
 8109a9c:	687a      	ldr	r2, [r7, #4]
 8109a9e:	6852      	ldr	r2, [r2, #4]
 8109aa0:	0852      	lsrs	r2, r2, #1
 8109aa2:	4611      	mov	r1, r2
 8109aa4:	f04f 0200 	mov.w	r2, #0
 8109aa8:	eb13 0b01 	adds.w	fp, r3, r1
 8109aac:	eb44 0c02 	adc.w	ip, r4, r2
 8109ab0:	4658      	mov	r0, fp
 8109ab2:	4661      	mov	r1, ip
 8109ab4:	687b      	ldr	r3, [r7, #4]
 8109ab6:	685b      	ldr	r3, [r3, #4]
 8109ab8:	f04f 0400 	mov.w	r4, #0
 8109abc:	461a      	mov	r2, r3
 8109abe:	4623      	mov	r3, r4
 8109ac0:	f7f6 fc0a 	bl	81002d8 <__aeabi_uldivmod>
 8109ac4:	4603      	mov	r3, r0
 8109ac6:	460c      	mov	r4, r1
 8109ac8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109ad0:	d308      	bcc.n	8109ae4 <UART_SetConfig+0x744>
 8109ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109ad8:	d204      	bcs.n	8109ae4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	681b      	ldr	r3, [r3, #0]
 8109ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109ae0:	60da      	str	r2, [r3, #12]
 8109ae2:	e1f0      	b.n	8109ec6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8109ae4:	2301      	movs	r3, #1
 8109ae6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8109aea:	e1ec      	b.n	8109ec6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109aec:	687b      	ldr	r3, [r7, #4]
 8109aee:	69db      	ldr	r3, [r3, #28]
 8109af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109af4:	f040 8100 	bne.w	8109cf8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8109af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8109afc:	2b40      	cmp	r3, #64	; 0x40
 8109afe:	f200 80b7 	bhi.w	8109c70 <UART_SetConfig+0x8d0>
 8109b02:	a201      	add	r2, pc, #4	; (adr r2, 8109b08 <UART_SetConfig+0x768>)
 8109b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109b08:	08109c0d 	.word	0x08109c0d
 8109b0c:	08109c15 	.word	0x08109c15
 8109b10:	08109c71 	.word	0x08109c71
 8109b14:	08109c71 	.word	0x08109c71
 8109b18:	08109c1d 	.word	0x08109c1d
 8109b1c:	08109c71 	.word	0x08109c71
 8109b20:	08109c71 	.word	0x08109c71
 8109b24:	08109c71 	.word	0x08109c71
 8109b28:	08109c2d 	.word	0x08109c2d
 8109b2c:	08109c71 	.word	0x08109c71
 8109b30:	08109c71 	.word	0x08109c71
 8109b34:	08109c71 	.word	0x08109c71
 8109b38:	08109c71 	.word	0x08109c71
 8109b3c:	08109c71 	.word	0x08109c71
 8109b40:	08109c71 	.word	0x08109c71
 8109b44:	08109c71 	.word	0x08109c71
 8109b48:	08109c3d 	.word	0x08109c3d
 8109b4c:	08109c71 	.word	0x08109c71
 8109b50:	08109c71 	.word	0x08109c71
 8109b54:	08109c71 	.word	0x08109c71
 8109b58:	08109c71 	.word	0x08109c71
 8109b5c:	08109c71 	.word	0x08109c71
 8109b60:	08109c71 	.word	0x08109c71
 8109b64:	08109c71 	.word	0x08109c71
 8109b68:	08109c71 	.word	0x08109c71
 8109b6c:	08109c71 	.word	0x08109c71
 8109b70:	08109c71 	.word	0x08109c71
 8109b74:	08109c71 	.word	0x08109c71
 8109b78:	08109c71 	.word	0x08109c71
 8109b7c:	08109c71 	.word	0x08109c71
 8109b80:	08109c71 	.word	0x08109c71
 8109b84:	08109c71 	.word	0x08109c71
 8109b88:	08109c63 	.word	0x08109c63
 8109b8c:	08109c71 	.word	0x08109c71
 8109b90:	08109c71 	.word	0x08109c71
 8109b94:	08109c71 	.word	0x08109c71
 8109b98:	08109c71 	.word	0x08109c71
 8109b9c:	08109c71 	.word	0x08109c71
 8109ba0:	08109c71 	.word	0x08109c71
 8109ba4:	08109c71 	.word	0x08109c71
 8109ba8:	08109c71 	.word	0x08109c71
 8109bac:	08109c71 	.word	0x08109c71
 8109bb0:	08109c71 	.word	0x08109c71
 8109bb4:	08109c71 	.word	0x08109c71
 8109bb8:	08109c71 	.word	0x08109c71
 8109bbc:	08109c71 	.word	0x08109c71
 8109bc0:	08109c71 	.word	0x08109c71
 8109bc4:	08109c71 	.word	0x08109c71
 8109bc8:	08109c71 	.word	0x08109c71
 8109bcc:	08109c71 	.word	0x08109c71
 8109bd0:	08109c71 	.word	0x08109c71
 8109bd4:	08109c71 	.word	0x08109c71
 8109bd8:	08109c71 	.word	0x08109c71
 8109bdc:	08109c71 	.word	0x08109c71
 8109be0:	08109c71 	.word	0x08109c71
 8109be4:	08109c71 	.word	0x08109c71
 8109be8:	08109c71 	.word	0x08109c71
 8109bec:	08109c71 	.word	0x08109c71
 8109bf0:	08109c71 	.word	0x08109c71
 8109bf4:	08109c71 	.word	0x08109c71
 8109bf8:	08109c71 	.word	0x08109c71
 8109bfc:	08109c71 	.word	0x08109c71
 8109c00:	08109c71 	.word	0x08109c71
 8109c04:	08109c71 	.word	0x08109c71
 8109c08:	08109c69 	.word	0x08109c69
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109c0c:	f7fd ff0c 	bl	8107a28 <HAL_RCC_GetPCLK1Freq>
 8109c10:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8109c12:	e033      	b.n	8109c7c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109c14:	f7fd ff1e 	bl	8107a54 <HAL_RCC_GetPCLK2Freq>
 8109c18:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8109c1a:	e02f      	b.n	8109c7c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109c1c:	f107 0314 	add.w	r3, r7, #20
 8109c20:	4618      	mov	r0, r3
 8109c22:	f7fe f9bb 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109c26:	69bb      	ldr	r3, [r7, #24]
 8109c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109c2a:	e027      	b.n	8109c7c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109c2c:	f107 0308 	add.w	r3, r7, #8
 8109c30:	4618      	mov	r0, r3
 8109c32:	f7fe faff 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109c36:	68fb      	ldr	r3, [r7, #12]
 8109c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109c3a:	e01f      	b.n	8109c7c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109c3c:	4b2b      	ldr	r3, [pc, #172]	; (8109cec <UART_SetConfig+0x94c>)
 8109c3e:	681b      	ldr	r3, [r3, #0]
 8109c40:	f003 0320 	and.w	r3, r3, #32
 8109c44:	2b00      	cmp	r3, #0
 8109c46:	d009      	beq.n	8109c5c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109c48:	4b28      	ldr	r3, [pc, #160]	; (8109cec <UART_SetConfig+0x94c>)
 8109c4a:	681b      	ldr	r3, [r3, #0]
 8109c4c:	08db      	lsrs	r3, r3, #3
 8109c4e:	f003 0303 	and.w	r3, r3, #3
 8109c52:	4a27      	ldr	r2, [pc, #156]	; (8109cf0 <UART_SetConfig+0x950>)
 8109c54:	fa22 f303 	lsr.w	r3, r2, r3
 8109c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109c5a:	e00f      	b.n	8109c7c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8109c5c:	4b24      	ldr	r3, [pc, #144]	; (8109cf0 <UART_SetConfig+0x950>)
 8109c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109c60:	e00c      	b.n	8109c7c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109c62:	4b24      	ldr	r3, [pc, #144]	; (8109cf4 <UART_SetConfig+0x954>)
 8109c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109c66:	e009      	b.n	8109c7c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109c6e:	e005      	b.n	8109c7c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8109c70:	2300      	movs	r3, #0
 8109c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8109c74:	2301      	movs	r3, #1
 8109c76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8109c7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109c7e:	2b00      	cmp	r3, #0
 8109c80:	f000 8121 	beq.w	8109ec6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109c84:	687b      	ldr	r3, [r7, #4]
 8109c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c88:	4a17      	ldr	r2, [pc, #92]	; (8109ce8 <UART_SetConfig+0x948>)
 8109c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109c8e:	461a      	mov	r2, r3
 8109c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8109c96:	005a      	lsls	r2, r3, #1
 8109c98:	687b      	ldr	r3, [r7, #4]
 8109c9a:	685b      	ldr	r3, [r3, #4]
 8109c9c:	085b      	lsrs	r3, r3, #1
 8109c9e:	441a      	add	r2, r3
 8109ca0:	687b      	ldr	r3, [r7, #4]
 8109ca2:	685b      	ldr	r3, [r3, #4]
 8109ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8109ca8:	b29b      	uxth	r3, r3
 8109caa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109cae:	2b0f      	cmp	r3, #15
 8109cb0:	d916      	bls.n	8109ce0 <UART_SetConfig+0x940>
 8109cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109cb8:	d212      	bcs.n	8109ce0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109cbc:	b29b      	uxth	r3, r3
 8109cbe:	f023 030f 	bic.w	r3, r3, #15
 8109cc2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109cc6:	085b      	lsrs	r3, r3, #1
 8109cc8:	b29b      	uxth	r3, r3
 8109cca:	f003 0307 	and.w	r3, r3, #7
 8109cce:	b29a      	uxth	r2, r3
 8109cd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8109cd2:	4313      	orrs	r3, r2
 8109cd4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8109cd6:	687b      	ldr	r3, [r7, #4]
 8109cd8:	681b      	ldr	r3, [r3, #0]
 8109cda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8109cdc:	60da      	str	r2, [r3, #12]
 8109cde:	e0f2      	b.n	8109ec6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8109ce0:	2301      	movs	r3, #1
 8109ce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8109ce6:	e0ee      	b.n	8109ec6 <UART_SetConfig+0xb26>
 8109ce8:	0810b6a8 	.word	0x0810b6a8
 8109cec:	58024400 	.word	0x58024400
 8109cf0:	03d09000 	.word	0x03d09000
 8109cf4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8109cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8109cfc:	2b40      	cmp	r3, #64	; 0x40
 8109cfe:	f200 80b7 	bhi.w	8109e70 <UART_SetConfig+0xad0>
 8109d02:	a201      	add	r2, pc, #4	; (adr r2, 8109d08 <UART_SetConfig+0x968>)
 8109d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d08:	08109e0d 	.word	0x08109e0d
 8109d0c:	08109e15 	.word	0x08109e15
 8109d10:	08109e71 	.word	0x08109e71
 8109d14:	08109e71 	.word	0x08109e71
 8109d18:	08109e1d 	.word	0x08109e1d
 8109d1c:	08109e71 	.word	0x08109e71
 8109d20:	08109e71 	.word	0x08109e71
 8109d24:	08109e71 	.word	0x08109e71
 8109d28:	08109e2d 	.word	0x08109e2d
 8109d2c:	08109e71 	.word	0x08109e71
 8109d30:	08109e71 	.word	0x08109e71
 8109d34:	08109e71 	.word	0x08109e71
 8109d38:	08109e71 	.word	0x08109e71
 8109d3c:	08109e71 	.word	0x08109e71
 8109d40:	08109e71 	.word	0x08109e71
 8109d44:	08109e71 	.word	0x08109e71
 8109d48:	08109e3d 	.word	0x08109e3d
 8109d4c:	08109e71 	.word	0x08109e71
 8109d50:	08109e71 	.word	0x08109e71
 8109d54:	08109e71 	.word	0x08109e71
 8109d58:	08109e71 	.word	0x08109e71
 8109d5c:	08109e71 	.word	0x08109e71
 8109d60:	08109e71 	.word	0x08109e71
 8109d64:	08109e71 	.word	0x08109e71
 8109d68:	08109e71 	.word	0x08109e71
 8109d6c:	08109e71 	.word	0x08109e71
 8109d70:	08109e71 	.word	0x08109e71
 8109d74:	08109e71 	.word	0x08109e71
 8109d78:	08109e71 	.word	0x08109e71
 8109d7c:	08109e71 	.word	0x08109e71
 8109d80:	08109e71 	.word	0x08109e71
 8109d84:	08109e71 	.word	0x08109e71
 8109d88:	08109e63 	.word	0x08109e63
 8109d8c:	08109e71 	.word	0x08109e71
 8109d90:	08109e71 	.word	0x08109e71
 8109d94:	08109e71 	.word	0x08109e71
 8109d98:	08109e71 	.word	0x08109e71
 8109d9c:	08109e71 	.word	0x08109e71
 8109da0:	08109e71 	.word	0x08109e71
 8109da4:	08109e71 	.word	0x08109e71
 8109da8:	08109e71 	.word	0x08109e71
 8109dac:	08109e71 	.word	0x08109e71
 8109db0:	08109e71 	.word	0x08109e71
 8109db4:	08109e71 	.word	0x08109e71
 8109db8:	08109e71 	.word	0x08109e71
 8109dbc:	08109e71 	.word	0x08109e71
 8109dc0:	08109e71 	.word	0x08109e71
 8109dc4:	08109e71 	.word	0x08109e71
 8109dc8:	08109e71 	.word	0x08109e71
 8109dcc:	08109e71 	.word	0x08109e71
 8109dd0:	08109e71 	.word	0x08109e71
 8109dd4:	08109e71 	.word	0x08109e71
 8109dd8:	08109e71 	.word	0x08109e71
 8109ddc:	08109e71 	.word	0x08109e71
 8109de0:	08109e71 	.word	0x08109e71
 8109de4:	08109e71 	.word	0x08109e71
 8109de8:	08109e71 	.word	0x08109e71
 8109dec:	08109e71 	.word	0x08109e71
 8109df0:	08109e71 	.word	0x08109e71
 8109df4:	08109e71 	.word	0x08109e71
 8109df8:	08109e71 	.word	0x08109e71
 8109dfc:	08109e71 	.word	0x08109e71
 8109e00:	08109e71 	.word	0x08109e71
 8109e04:	08109e71 	.word	0x08109e71
 8109e08:	08109e69 	.word	0x08109e69
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109e0c:	f7fd fe0c 	bl	8107a28 <HAL_RCC_GetPCLK1Freq>
 8109e10:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8109e12:	e033      	b.n	8109e7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109e14:	f7fd fe1e 	bl	8107a54 <HAL_RCC_GetPCLK2Freq>
 8109e18:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8109e1a:	e02f      	b.n	8109e7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109e1c:	f107 0314 	add.w	r3, r7, #20
 8109e20:	4618      	mov	r0, r3
 8109e22:	f7fe f8bb 	bl	8107f9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109e26:	69bb      	ldr	r3, [r7, #24]
 8109e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109e2a:	e027      	b.n	8109e7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109e2c:	f107 0308 	add.w	r3, r7, #8
 8109e30:	4618      	mov	r0, r3
 8109e32:	f7fe f9ff 	bl	8108234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109e36:	68fb      	ldr	r3, [r7, #12]
 8109e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109e3a:	e01f      	b.n	8109e7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109e3c:	4b2c      	ldr	r3, [pc, #176]	; (8109ef0 <UART_SetConfig+0xb50>)
 8109e3e:	681b      	ldr	r3, [r3, #0]
 8109e40:	f003 0320 	and.w	r3, r3, #32
 8109e44:	2b00      	cmp	r3, #0
 8109e46:	d009      	beq.n	8109e5c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109e48:	4b29      	ldr	r3, [pc, #164]	; (8109ef0 <UART_SetConfig+0xb50>)
 8109e4a:	681b      	ldr	r3, [r3, #0]
 8109e4c:	08db      	lsrs	r3, r3, #3
 8109e4e:	f003 0303 	and.w	r3, r3, #3
 8109e52:	4a28      	ldr	r2, [pc, #160]	; (8109ef4 <UART_SetConfig+0xb54>)
 8109e54:	fa22 f303 	lsr.w	r3, r2, r3
 8109e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109e5a:	e00f      	b.n	8109e7c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8109e5c:	4b25      	ldr	r3, [pc, #148]	; (8109ef4 <UART_SetConfig+0xb54>)
 8109e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109e60:	e00c      	b.n	8109e7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109e62:	4b25      	ldr	r3, [pc, #148]	; (8109ef8 <UART_SetConfig+0xb58>)
 8109e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109e66:	e009      	b.n	8109e7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109e6e:	e005      	b.n	8109e7c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8109e70:	2300      	movs	r3, #0
 8109e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8109e74:	2301      	movs	r3, #1
 8109e76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8109e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8109e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e7e:	2b00      	cmp	r3, #0
 8109e80:	d021      	beq.n	8109ec6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109e82:	687b      	ldr	r3, [r7, #4]
 8109e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e86:	4a1d      	ldr	r2, [pc, #116]	; (8109efc <UART_SetConfig+0xb5c>)
 8109e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109e8c:	461a      	mov	r2, r3
 8109e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e90:	fbb3 f2f2 	udiv	r2, r3, r2
 8109e94:	687b      	ldr	r3, [r7, #4]
 8109e96:	685b      	ldr	r3, [r3, #4]
 8109e98:	085b      	lsrs	r3, r3, #1
 8109e9a:	441a      	add	r2, r3
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	685b      	ldr	r3, [r3, #4]
 8109ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8109ea4:	b29b      	uxth	r3, r3
 8109ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109eaa:	2b0f      	cmp	r3, #15
 8109eac:	d908      	bls.n	8109ec0 <UART_SetConfig+0xb20>
 8109eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109eb4:	d204      	bcs.n	8109ec0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8109eb6:	687b      	ldr	r3, [r7, #4]
 8109eb8:	681b      	ldr	r3, [r3, #0]
 8109eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109ebc:	60da      	str	r2, [r3, #12]
 8109ebe:	e002      	b.n	8109ec6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8109ec0:	2301      	movs	r3, #1
 8109ec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109ec6:	687b      	ldr	r3, [r7, #4]
 8109ec8:	2201      	movs	r2, #1
 8109eca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8109ece:	687b      	ldr	r3, [r7, #4]
 8109ed0:	2201      	movs	r2, #1
 8109ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8109ed6:	687b      	ldr	r3, [r7, #4]
 8109ed8:	2200      	movs	r2, #0
 8109eda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8109edc:	687b      	ldr	r3, [r7, #4]
 8109ede:	2200      	movs	r2, #0
 8109ee0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8109ee2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8109ee6:	4618      	mov	r0, r3
 8109ee8:	3738      	adds	r7, #56	; 0x38
 8109eea:	46bd      	mov	sp, r7
 8109eec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8109ef0:	58024400 	.word	0x58024400
 8109ef4:	03d09000 	.word	0x03d09000
 8109ef8:	003d0900 	.word	0x003d0900
 8109efc:	0810b6a8 	.word	0x0810b6a8

08109f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109f00:	b480      	push	{r7}
 8109f02:	b083      	sub	sp, #12
 8109f04:	af00      	add	r7, sp, #0
 8109f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109f08:	687b      	ldr	r3, [r7, #4]
 8109f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f0c:	f003 0301 	and.w	r3, r3, #1
 8109f10:	2b00      	cmp	r3, #0
 8109f12:	d00a      	beq.n	8109f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109f14:	687b      	ldr	r3, [r7, #4]
 8109f16:	681b      	ldr	r3, [r3, #0]
 8109f18:	685b      	ldr	r3, [r3, #4]
 8109f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109f1e:	687b      	ldr	r3, [r7, #4]
 8109f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f22:	687b      	ldr	r3, [r7, #4]
 8109f24:	681b      	ldr	r3, [r3, #0]
 8109f26:	430a      	orrs	r2, r1
 8109f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109f2a:	687b      	ldr	r3, [r7, #4]
 8109f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f2e:	f003 0302 	and.w	r3, r3, #2
 8109f32:	2b00      	cmp	r3, #0
 8109f34:	d00a      	beq.n	8109f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109f36:	687b      	ldr	r3, [r7, #4]
 8109f38:	681b      	ldr	r3, [r3, #0]
 8109f3a:	685b      	ldr	r3, [r3, #4]
 8109f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8109f40:	687b      	ldr	r3, [r7, #4]
 8109f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109f44:	687b      	ldr	r3, [r7, #4]
 8109f46:	681b      	ldr	r3, [r3, #0]
 8109f48:	430a      	orrs	r2, r1
 8109f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8109f4c:	687b      	ldr	r3, [r7, #4]
 8109f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f50:	f003 0304 	and.w	r3, r3, #4
 8109f54:	2b00      	cmp	r3, #0
 8109f56:	d00a      	beq.n	8109f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	681b      	ldr	r3, [r3, #0]
 8109f5c:	685b      	ldr	r3, [r3, #4]
 8109f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8109f62:	687b      	ldr	r3, [r7, #4]
 8109f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109f66:	687b      	ldr	r3, [r7, #4]
 8109f68:	681b      	ldr	r3, [r3, #0]
 8109f6a:	430a      	orrs	r2, r1
 8109f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109f6e:	687b      	ldr	r3, [r7, #4]
 8109f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f72:	f003 0308 	and.w	r3, r3, #8
 8109f76:	2b00      	cmp	r3, #0
 8109f78:	d00a      	beq.n	8109f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8109f7a:	687b      	ldr	r3, [r7, #4]
 8109f7c:	681b      	ldr	r3, [r3, #0]
 8109f7e:	685b      	ldr	r3, [r3, #4]
 8109f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8109f84:	687b      	ldr	r3, [r7, #4]
 8109f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109f88:	687b      	ldr	r3, [r7, #4]
 8109f8a:	681b      	ldr	r3, [r3, #0]
 8109f8c:	430a      	orrs	r2, r1
 8109f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109f90:	687b      	ldr	r3, [r7, #4]
 8109f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f94:	f003 0310 	and.w	r3, r3, #16
 8109f98:	2b00      	cmp	r3, #0
 8109f9a:	d00a      	beq.n	8109fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8109f9c:	687b      	ldr	r3, [r7, #4]
 8109f9e:	681b      	ldr	r3, [r3, #0]
 8109fa0:	689b      	ldr	r3, [r3, #8]
 8109fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8109fa6:	687b      	ldr	r3, [r7, #4]
 8109fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8109faa:	687b      	ldr	r3, [r7, #4]
 8109fac:	681b      	ldr	r3, [r3, #0]
 8109fae:	430a      	orrs	r2, r1
 8109fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8109fb2:	687b      	ldr	r3, [r7, #4]
 8109fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fb6:	f003 0320 	and.w	r3, r3, #32
 8109fba:	2b00      	cmp	r3, #0
 8109fbc:	d00a      	beq.n	8109fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109fbe:	687b      	ldr	r3, [r7, #4]
 8109fc0:	681b      	ldr	r3, [r3, #0]
 8109fc2:	689b      	ldr	r3, [r3, #8]
 8109fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8109fc8:	687b      	ldr	r3, [r7, #4]
 8109fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8109fcc:	687b      	ldr	r3, [r7, #4]
 8109fce:	681b      	ldr	r3, [r3, #0]
 8109fd0:	430a      	orrs	r2, r1
 8109fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8109fd4:	687b      	ldr	r3, [r7, #4]
 8109fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109fdc:	2b00      	cmp	r3, #0
 8109fde:	d01a      	beq.n	810a016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109fe0:	687b      	ldr	r3, [r7, #4]
 8109fe2:	681b      	ldr	r3, [r3, #0]
 8109fe4:	685b      	ldr	r3, [r3, #4]
 8109fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109fee:	687b      	ldr	r3, [r7, #4]
 8109ff0:	681b      	ldr	r3, [r3, #0]
 8109ff2:	430a      	orrs	r2, r1
 8109ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8109ff6:	687b      	ldr	r3, [r7, #4]
 8109ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109ffe:	d10a      	bne.n	810a016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	681b      	ldr	r3, [r3, #0]
 810a004:	685b      	ldr	r3, [r3, #4]
 810a006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a00a:	687b      	ldr	r3, [r7, #4]
 810a00c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	681b      	ldr	r3, [r3, #0]
 810a012:	430a      	orrs	r2, r1
 810a014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a016:	687b      	ldr	r3, [r7, #4]
 810a018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a01e:	2b00      	cmp	r3, #0
 810a020:	d00a      	beq.n	810a038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	681b      	ldr	r3, [r3, #0]
 810a026:	685b      	ldr	r3, [r3, #4]
 810a028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a030:	687b      	ldr	r3, [r7, #4]
 810a032:	681b      	ldr	r3, [r3, #0]
 810a034:	430a      	orrs	r2, r1
 810a036:	605a      	str	r2, [r3, #4]
  }
}
 810a038:	bf00      	nop
 810a03a:	370c      	adds	r7, #12
 810a03c:	46bd      	mov	sp, r7
 810a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a042:	4770      	bx	lr

0810a044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a044:	b580      	push	{r7, lr}
 810a046:	b086      	sub	sp, #24
 810a048:	af02      	add	r7, sp, #8
 810a04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a04c:	687b      	ldr	r3, [r7, #4]
 810a04e:	2200      	movs	r2, #0
 810a050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 810a054:	f7f8 f8ba 	bl	81021cc <HAL_GetTick>
 810a058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	681b      	ldr	r3, [r3, #0]
 810a05e:	681b      	ldr	r3, [r3, #0]
 810a060:	f003 0308 	and.w	r3, r3, #8
 810a064:	2b08      	cmp	r3, #8
 810a066:	d10e      	bne.n	810a086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a06c:	9300      	str	r3, [sp, #0]
 810a06e:	68fb      	ldr	r3, [r7, #12]
 810a070:	2200      	movs	r2, #0
 810a072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a076:	6878      	ldr	r0, [r7, #4]
 810a078:	f000 f82c 	bl	810a0d4 <UART_WaitOnFlagUntilTimeout>
 810a07c:	4603      	mov	r3, r0
 810a07e:	2b00      	cmp	r3, #0
 810a080:	d001      	beq.n	810a086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a082:	2303      	movs	r3, #3
 810a084:	e022      	b.n	810a0cc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	681b      	ldr	r3, [r3, #0]
 810a08a:	681b      	ldr	r3, [r3, #0]
 810a08c:	f003 0304 	and.w	r3, r3, #4
 810a090:	2b04      	cmp	r3, #4
 810a092:	d10e      	bne.n	810a0b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a098:	9300      	str	r3, [sp, #0]
 810a09a:	68fb      	ldr	r3, [r7, #12]
 810a09c:	2200      	movs	r2, #0
 810a09e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810a0a2:	6878      	ldr	r0, [r7, #4]
 810a0a4:	f000 f816 	bl	810a0d4 <UART_WaitOnFlagUntilTimeout>
 810a0a8:	4603      	mov	r3, r0
 810a0aa:	2b00      	cmp	r3, #0
 810a0ac:	d001      	beq.n	810a0b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a0ae:	2303      	movs	r3, #3
 810a0b0:	e00c      	b.n	810a0cc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a0b2:	687b      	ldr	r3, [r7, #4]
 810a0b4:	2220      	movs	r2, #32
 810a0b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 810a0ba:	687b      	ldr	r3, [r7, #4]
 810a0bc:	2220      	movs	r2, #32
 810a0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 810a0c2:	687b      	ldr	r3, [r7, #4]
 810a0c4:	2200      	movs	r2, #0
 810a0c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810a0ca:	2300      	movs	r3, #0
}
 810a0cc:	4618      	mov	r0, r3
 810a0ce:	3710      	adds	r7, #16
 810a0d0:	46bd      	mov	sp, r7
 810a0d2:	bd80      	pop	{r7, pc}

0810a0d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a0d4:	b580      	push	{r7, lr}
 810a0d6:	b084      	sub	sp, #16
 810a0d8:	af00      	add	r7, sp, #0
 810a0da:	60f8      	str	r0, [r7, #12]
 810a0dc:	60b9      	str	r1, [r7, #8]
 810a0de:	603b      	str	r3, [r7, #0]
 810a0e0:	4613      	mov	r3, r2
 810a0e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a0e4:	e062      	b.n	810a1ac <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a0e6:	69bb      	ldr	r3, [r7, #24]
 810a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a0ec:	d05e      	beq.n	810a1ac <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a0ee:	f7f8 f86d 	bl	81021cc <HAL_GetTick>
 810a0f2:	4602      	mov	r2, r0
 810a0f4:	683b      	ldr	r3, [r7, #0]
 810a0f6:	1ad3      	subs	r3, r2, r3
 810a0f8:	69ba      	ldr	r2, [r7, #24]
 810a0fa:	429a      	cmp	r2, r3
 810a0fc:	d302      	bcc.n	810a104 <UART_WaitOnFlagUntilTimeout+0x30>
 810a0fe:	69bb      	ldr	r3, [r7, #24]
 810a100:	2b00      	cmp	r3, #0
 810a102:	d11d      	bne.n	810a140 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810a104:	68fb      	ldr	r3, [r7, #12]
 810a106:	681b      	ldr	r3, [r3, #0]
 810a108:	681a      	ldr	r2, [r3, #0]
 810a10a:	68fb      	ldr	r3, [r7, #12]
 810a10c:	681b      	ldr	r3, [r3, #0]
 810a10e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810a112:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a114:	68fb      	ldr	r3, [r7, #12]
 810a116:	681b      	ldr	r3, [r3, #0]
 810a118:	689a      	ldr	r2, [r3, #8]
 810a11a:	68fb      	ldr	r3, [r7, #12]
 810a11c:	681b      	ldr	r3, [r3, #0]
 810a11e:	f022 0201 	bic.w	r2, r2, #1
 810a122:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810a124:	68fb      	ldr	r3, [r7, #12]
 810a126:	2220      	movs	r2, #32
 810a128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 810a12c:	68fb      	ldr	r3, [r7, #12]
 810a12e:	2220      	movs	r2, #32
 810a130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 810a134:	68fb      	ldr	r3, [r7, #12]
 810a136:	2200      	movs	r2, #0
 810a138:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 810a13c:	2303      	movs	r3, #3
 810a13e:	e045      	b.n	810a1cc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810a140:	68fb      	ldr	r3, [r7, #12]
 810a142:	681b      	ldr	r3, [r3, #0]
 810a144:	681b      	ldr	r3, [r3, #0]
 810a146:	f003 0304 	and.w	r3, r3, #4
 810a14a:	2b00      	cmp	r3, #0
 810a14c:	d02e      	beq.n	810a1ac <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a14e:	68fb      	ldr	r3, [r7, #12]
 810a150:	681b      	ldr	r3, [r3, #0]
 810a152:	69db      	ldr	r3, [r3, #28]
 810a154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a15c:	d126      	bne.n	810a1ac <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a15e:	68fb      	ldr	r3, [r7, #12]
 810a160:	681b      	ldr	r3, [r3, #0]
 810a162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810a166:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810a168:	68fb      	ldr	r3, [r7, #12]
 810a16a:	681b      	ldr	r3, [r3, #0]
 810a16c:	681a      	ldr	r2, [r3, #0]
 810a16e:	68fb      	ldr	r3, [r7, #12]
 810a170:	681b      	ldr	r3, [r3, #0]
 810a172:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810a176:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a178:	68fb      	ldr	r3, [r7, #12]
 810a17a:	681b      	ldr	r3, [r3, #0]
 810a17c:	689a      	ldr	r2, [r3, #8]
 810a17e:	68fb      	ldr	r3, [r7, #12]
 810a180:	681b      	ldr	r3, [r3, #0]
 810a182:	f022 0201 	bic.w	r2, r2, #1
 810a186:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810a188:	68fb      	ldr	r3, [r7, #12]
 810a18a:	2220      	movs	r2, #32
 810a18c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 810a190:	68fb      	ldr	r3, [r7, #12]
 810a192:	2220      	movs	r2, #32
 810a194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a198:	68fb      	ldr	r3, [r7, #12]
 810a19a:	2220      	movs	r2, #32
 810a19c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a1a0:	68fb      	ldr	r3, [r7, #12]
 810a1a2:	2200      	movs	r2, #0
 810a1a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 810a1a8:	2303      	movs	r3, #3
 810a1aa:	e00f      	b.n	810a1cc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a1ac:	68fb      	ldr	r3, [r7, #12]
 810a1ae:	681b      	ldr	r3, [r3, #0]
 810a1b0:	69da      	ldr	r2, [r3, #28]
 810a1b2:	68bb      	ldr	r3, [r7, #8]
 810a1b4:	4013      	ands	r3, r2
 810a1b6:	68ba      	ldr	r2, [r7, #8]
 810a1b8:	429a      	cmp	r2, r3
 810a1ba:	bf0c      	ite	eq
 810a1bc:	2301      	moveq	r3, #1
 810a1be:	2300      	movne	r3, #0
 810a1c0:	b2db      	uxtb	r3, r3
 810a1c2:	461a      	mov	r2, r3
 810a1c4:	79fb      	ldrb	r3, [r7, #7]
 810a1c6:	429a      	cmp	r2, r3
 810a1c8:	d08d      	beq.n	810a0e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a1ca:	2300      	movs	r3, #0
}
 810a1cc:	4618      	mov	r0, r3
 810a1ce:	3710      	adds	r7, #16
 810a1d0:	46bd      	mov	sp, r7
 810a1d2:	bd80      	pop	{r7, pc}

0810a1d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810a1d4:	b480      	push	{r7}
 810a1d6:	b083      	sub	sp, #12
 810a1d8:	af00      	add	r7, sp, #0
 810a1da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810a1dc:	687b      	ldr	r3, [r7, #4]
 810a1de:	681b      	ldr	r3, [r3, #0]
 810a1e0:	681a      	ldr	r2, [r3, #0]
 810a1e2:	687b      	ldr	r3, [r7, #4]
 810a1e4:	681b      	ldr	r3, [r3, #0]
 810a1e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810a1ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810a1ec:	687b      	ldr	r3, [r7, #4]
 810a1ee:	681b      	ldr	r3, [r3, #0]
 810a1f0:	689a      	ldr	r2, [r3, #8]
 810a1f2:	687b      	ldr	r3, [r7, #4]
 810a1f4:	681b      	ldr	r3, [r3, #0]
 810a1f6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810a1fa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810a1fc:	687b      	ldr	r3, [r7, #4]
 810a1fe:	2220      	movs	r2, #32
 810a200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 810a204:	bf00      	nop
 810a206:	370c      	adds	r7, #12
 810a208:	46bd      	mov	sp, r7
 810a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a20e:	4770      	bx	lr

0810a210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810a210:	b480      	push	{r7}
 810a212:	b083      	sub	sp, #12
 810a214:	af00      	add	r7, sp, #0
 810a216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a218:	687b      	ldr	r3, [r7, #4]
 810a21a:	681b      	ldr	r3, [r3, #0]
 810a21c:	681a      	ldr	r2, [r3, #0]
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	681b      	ldr	r3, [r3, #0]
 810a222:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810a226:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a228:	687b      	ldr	r3, [r7, #4]
 810a22a:	681b      	ldr	r3, [r3, #0]
 810a22c:	689b      	ldr	r3, [r3, #8]
 810a22e:	687a      	ldr	r2, [r7, #4]
 810a230:	6812      	ldr	r2, [r2, #0]
 810a232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a236:	f023 0301 	bic.w	r3, r3, #1
 810a23a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810a23c:	687b      	ldr	r3, [r7, #4]
 810a23e:	2220      	movs	r2, #32
 810a240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810a244:	687b      	ldr	r3, [r7, #4]
 810a246:	2200      	movs	r2, #0
 810a248:	66da      	str	r2, [r3, #108]	; 0x6c
}
 810a24a:	bf00      	nop
 810a24c:	370c      	adds	r7, #12
 810a24e:	46bd      	mov	sp, r7
 810a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a254:	4770      	bx	lr

0810a256 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810a256:	b580      	push	{r7, lr}
 810a258:	b084      	sub	sp, #16
 810a25a:	af00      	add	r7, sp, #0
 810a25c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a25e:	687b      	ldr	r3, [r7, #4]
 810a260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a262:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810a264:	687b      	ldr	r3, [r7, #4]
 810a266:	69db      	ldr	r3, [r3, #28]
 810a268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a26c:	d014      	beq.n	810a298 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810a26e:	68fb      	ldr	r3, [r7, #12]
 810a270:	2200      	movs	r2, #0
 810a272:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810a276:	68fb      	ldr	r3, [r7, #12]
 810a278:	681b      	ldr	r3, [r3, #0]
 810a27a:	689a      	ldr	r2, [r3, #8]
 810a27c:	68fb      	ldr	r3, [r7, #12]
 810a27e:	681b      	ldr	r3, [r3, #0]
 810a280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810a284:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810a286:	68fb      	ldr	r3, [r7, #12]
 810a288:	681b      	ldr	r3, [r3, #0]
 810a28a:	681a      	ldr	r2, [r3, #0]
 810a28c:	68fb      	ldr	r3, [r7, #12]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a294:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810a296:	e002      	b.n	810a29e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810a298:	68f8      	ldr	r0, [r7, #12]
 810a29a:	f7ff f84f 	bl	810933c <HAL_UART_TxCpltCallback>
}
 810a29e:	bf00      	nop
 810a2a0:	3710      	adds	r7, #16
 810a2a2:	46bd      	mov	sp, r7
 810a2a4:	bd80      	pop	{r7, pc}

0810a2a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810a2a6:	b580      	push	{r7, lr}
 810a2a8:	b084      	sub	sp, #16
 810a2aa:	af00      	add	r7, sp, #0
 810a2ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a2ae:	687b      	ldr	r3, [r7, #4]
 810a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a2b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810a2b4:	68f8      	ldr	r0, [r7, #12]
 810a2b6:	f7ff f84b 	bl	8109350 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a2ba:	bf00      	nop
 810a2bc:	3710      	adds	r7, #16
 810a2be:	46bd      	mov	sp, r7
 810a2c0:	bd80      	pop	{r7, pc}

0810a2c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a2c2:	b580      	push	{r7, lr}
 810a2c4:	b084      	sub	sp, #16
 810a2c6:	af00      	add	r7, sp, #0
 810a2c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a2ca:	687b      	ldr	r3, [r7, #4]
 810a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a2ce:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810a2d0:	687b      	ldr	r3, [r7, #4]
 810a2d2:	69db      	ldr	r3, [r3, #28]
 810a2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a2d8:	d01f      	beq.n	810a31a <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 810a2da:	68fb      	ldr	r3, [r7, #12]
 810a2dc:	2200      	movs	r2, #0
 810a2de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810a2e2:	68fb      	ldr	r3, [r7, #12]
 810a2e4:	681b      	ldr	r3, [r3, #0]
 810a2e6:	681a      	ldr	r2, [r3, #0]
 810a2e8:	68fb      	ldr	r3, [r7, #12]
 810a2ea:	681b      	ldr	r3, [r3, #0]
 810a2ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810a2f0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a2f2:	68fb      	ldr	r3, [r7, #12]
 810a2f4:	681b      	ldr	r3, [r3, #0]
 810a2f6:	689a      	ldr	r2, [r3, #8]
 810a2f8:	68fb      	ldr	r3, [r7, #12]
 810a2fa:	681b      	ldr	r3, [r3, #0]
 810a2fc:	f022 0201 	bic.w	r2, r2, #1
 810a300:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810a302:	68fb      	ldr	r3, [r7, #12]
 810a304:	681b      	ldr	r3, [r3, #0]
 810a306:	689a      	ldr	r2, [r3, #8]
 810a308:	68fb      	ldr	r3, [r7, #12]
 810a30a:	681b      	ldr	r3, [r3, #0]
 810a30c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810a310:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810a312:	68fb      	ldr	r3, [r7, #12]
 810a314:	2220      	movs	r2, #32
 810a316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 810a31a:	68f8      	ldr	r0, [r7, #12]
 810a31c:	f7ff f822 	bl	8109364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a320:	bf00      	nop
 810a322:	3710      	adds	r7, #16
 810a324:	46bd      	mov	sp, r7
 810a326:	bd80      	pop	{r7, pc}

0810a328 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810a328:	b580      	push	{r7, lr}
 810a32a:	b084      	sub	sp, #16
 810a32c:	af00      	add	r7, sp, #0
 810a32e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a330:	687b      	ldr	r3, [r7, #4]
 810a332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a334:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 810a336:	68f8      	ldr	r0, [r7, #12]
 810a338:	f7ff f81e 	bl	8109378 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a33c:	bf00      	nop
 810a33e:	3710      	adds	r7, #16
 810a340:	46bd      	mov	sp, r7
 810a342:	bd80      	pop	{r7, pc}

0810a344 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810a344:	b580      	push	{r7, lr}
 810a346:	b086      	sub	sp, #24
 810a348:	af00      	add	r7, sp, #0
 810a34a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a34c:	687b      	ldr	r3, [r7, #4]
 810a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a350:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810a352:	697b      	ldr	r3, [r7, #20]
 810a354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a358:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810a35a:	697b      	ldr	r3, [r7, #20]
 810a35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a360:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810a362:	697b      	ldr	r3, [r7, #20]
 810a364:	681b      	ldr	r3, [r3, #0]
 810a366:	689b      	ldr	r3, [r3, #8]
 810a368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a36c:	2b80      	cmp	r3, #128	; 0x80
 810a36e:	d109      	bne.n	810a384 <UART_DMAError+0x40>
 810a370:	693b      	ldr	r3, [r7, #16]
 810a372:	2b21      	cmp	r3, #33	; 0x21
 810a374:	d106      	bne.n	810a384 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810a376:	697b      	ldr	r3, [r7, #20]
 810a378:	2200      	movs	r2, #0
 810a37a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810a37e:	6978      	ldr	r0, [r7, #20]
 810a380:	f7ff ff28 	bl	810a1d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810a384:	697b      	ldr	r3, [r7, #20]
 810a386:	681b      	ldr	r3, [r3, #0]
 810a388:	689b      	ldr	r3, [r3, #8]
 810a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a38e:	2b40      	cmp	r3, #64	; 0x40
 810a390:	d109      	bne.n	810a3a6 <UART_DMAError+0x62>
 810a392:	68fb      	ldr	r3, [r7, #12]
 810a394:	2b22      	cmp	r3, #34	; 0x22
 810a396:	d106      	bne.n	810a3a6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810a398:	697b      	ldr	r3, [r7, #20]
 810a39a:	2200      	movs	r2, #0
 810a39c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810a3a0:	6978      	ldr	r0, [r7, #20]
 810a3a2:	f7ff ff35 	bl	810a210 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810a3a6:	697b      	ldr	r3, [r7, #20]
 810a3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810a3ac:	f043 0210 	orr.w	r2, r3, #16
 810a3b0:	697b      	ldr	r3, [r7, #20]
 810a3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810a3b6:	6978      	ldr	r0, [r7, #20]
 810a3b8:	f7fe ffe8 	bl	810938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a3bc:	bf00      	nop
 810a3be:	3718      	adds	r7, #24
 810a3c0:	46bd      	mov	sp, r7
 810a3c2:	bd80      	pop	{r7, pc}

0810a3c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810a3c4:	b580      	push	{r7, lr}
 810a3c6:	b084      	sub	sp, #16
 810a3c8:	af00      	add	r7, sp, #0
 810a3ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a3cc:	687b      	ldr	r3, [r7, #4]
 810a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a3d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810a3d2:	68fb      	ldr	r3, [r7, #12]
 810a3d4:	2200      	movs	r2, #0
 810a3d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810a3da:	68fb      	ldr	r3, [r7, #12]
 810a3dc:	2200      	movs	r2, #0
 810a3de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810a3e2:	68f8      	ldr	r0, [r7, #12]
 810a3e4:	f7fe ffd2 	bl	810938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a3e8:	bf00      	nop
 810a3ea:	3710      	adds	r7, #16
 810a3ec:	46bd      	mov	sp, r7
 810a3ee:	bd80      	pop	{r7, pc}

0810a3f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810a3f0:	b580      	push	{r7, lr}
 810a3f2:	b082      	sub	sp, #8
 810a3f4:	af00      	add	r7, sp, #0
 810a3f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810a3f8:	687b      	ldr	r3, [r7, #4]
 810a3fa:	681b      	ldr	r3, [r3, #0]
 810a3fc:	681a      	ldr	r2, [r3, #0]
 810a3fe:	687b      	ldr	r3, [r7, #4]
 810a400:	681b      	ldr	r3, [r3, #0]
 810a402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810a406:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810a408:	687b      	ldr	r3, [r7, #4]
 810a40a:	2220      	movs	r2, #32
 810a40c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	2200      	movs	r2, #0
 810a414:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810a416:	6878      	ldr	r0, [r7, #4]
 810a418:	f7fe ff90 	bl	810933c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a41c:	bf00      	nop
 810a41e:	3708      	adds	r7, #8
 810a420:	46bd      	mov	sp, r7
 810a422:	bd80      	pop	{r7, pc}

0810a424 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810a424:	b480      	push	{r7}
 810a426:	b083      	sub	sp, #12
 810a428:	af00      	add	r7, sp, #0
 810a42a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810a42c:	bf00      	nop
 810a42e:	370c      	adds	r7, #12
 810a430:	46bd      	mov	sp, r7
 810a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a436:	4770      	bx	lr

0810a438 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810a438:	b480      	push	{r7}
 810a43a:	b083      	sub	sp, #12
 810a43c:	af00      	add	r7, sp, #0
 810a43e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810a440:	bf00      	nop
 810a442:	370c      	adds	r7, #12
 810a444:	46bd      	mov	sp, r7
 810a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a44a:	4770      	bx	lr

0810a44c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810a44c:	b480      	push	{r7}
 810a44e:	b083      	sub	sp, #12
 810a450:	af00      	add	r7, sp, #0
 810a452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810a454:	bf00      	nop
 810a456:	370c      	adds	r7, #12
 810a458:	46bd      	mov	sp, r7
 810a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a45e:	4770      	bx	lr

0810a460 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810a460:	b480      	push	{r7}
 810a462:	b085      	sub	sp, #20
 810a464:	af00      	add	r7, sp, #0
 810a466:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a468:	687b      	ldr	r3, [r7, #4]
 810a46a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810a46e:	2b01      	cmp	r3, #1
 810a470:	d101      	bne.n	810a476 <HAL_UARTEx_DisableFifoMode+0x16>
 810a472:	2302      	movs	r3, #2
 810a474:	e027      	b.n	810a4c6 <HAL_UARTEx_DisableFifoMode+0x66>
 810a476:	687b      	ldr	r3, [r7, #4]
 810a478:	2201      	movs	r2, #1
 810a47a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810a47e:	687b      	ldr	r3, [r7, #4]
 810a480:	2224      	movs	r2, #36	; 0x24
 810a482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a486:	687b      	ldr	r3, [r7, #4]
 810a488:	681b      	ldr	r3, [r3, #0]
 810a48a:	681b      	ldr	r3, [r3, #0]
 810a48c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a48e:	687b      	ldr	r3, [r7, #4]
 810a490:	681b      	ldr	r3, [r3, #0]
 810a492:	681a      	ldr	r2, [r3, #0]
 810a494:	687b      	ldr	r3, [r7, #4]
 810a496:	681b      	ldr	r3, [r3, #0]
 810a498:	f022 0201 	bic.w	r2, r2, #1
 810a49c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810a49e:	68fb      	ldr	r3, [r7, #12]
 810a4a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810a4a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810a4a6:	687b      	ldr	r3, [r7, #4]
 810a4a8:	2200      	movs	r2, #0
 810a4aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a4ac:	687b      	ldr	r3, [r7, #4]
 810a4ae:	681b      	ldr	r3, [r3, #0]
 810a4b0:	68fa      	ldr	r2, [r7, #12]
 810a4b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a4b4:	687b      	ldr	r3, [r7, #4]
 810a4b6:	2220      	movs	r2, #32
 810a4b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a4bc:	687b      	ldr	r3, [r7, #4]
 810a4be:	2200      	movs	r2, #0
 810a4c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810a4c4:	2300      	movs	r3, #0
}
 810a4c6:	4618      	mov	r0, r3
 810a4c8:	3714      	adds	r7, #20
 810a4ca:	46bd      	mov	sp, r7
 810a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4d0:	4770      	bx	lr

0810a4d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a4d2:	b580      	push	{r7, lr}
 810a4d4:	b084      	sub	sp, #16
 810a4d6:	af00      	add	r7, sp, #0
 810a4d8:	6078      	str	r0, [r7, #4]
 810a4da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a4dc:	687b      	ldr	r3, [r7, #4]
 810a4de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810a4e2:	2b01      	cmp	r3, #1
 810a4e4:	d101      	bne.n	810a4ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810a4e6:	2302      	movs	r3, #2
 810a4e8:	e02d      	b.n	810a546 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810a4ea:	687b      	ldr	r3, [r7, #4]
 810a4ec:	2201      	movs	r2, #1
 810a4ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810a4f2:	687b      	ldr	r3, [r7, #4]
 810a4f4:	2224      	movs	r2, #36	; 0x24
 810a4f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a4fa:	687b      	ldr	r3, [r7, #4]
 810a4fc:	681b      	ldr	r3, [r3, #0]
 810a4fe:	681b      	ldr	r3, [r3, #0]
 810a500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a502:	687b      	ldr	r3, [r7, #4]
 810a504:	681b      	ldr	r3, [r3, #0]
 810a506:	681a      	ldr	r2, [r3, #0]
 810a508:	687b      	ldr	r3, [r7, #4]
 810a50a:	681b      	ldr	r3, [r3, #0]
 810a50c:	f022 0201 	bic.w	r2, r2, #1
 810a510:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810a512:	687b      	ldr	r3, [r7, #4]
 810a514:	681b      	ldr	r3, [r3, #0]
 810a516:	689b      	ldr	r3, [r3, #8]
 810a518:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810a51c:	687b      	ldr	r3, [r7, #4]
 810a51e:	681b      	ldr	r3, [r3, #0]
 810a520:	683a      	ldr	r2, [r7, #0]
 810a522:	430a      	orrs	r2, r1
 810a524:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a526:	6878      	ldr	r0, [r7, #4]
 810a528:	f000 f850 	bl	810a5cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a52c:	687b      	ldr	r3, [r7, #4]
 810a52e:	681b      	ldr	r3, [r3, #0]
 810a530:	68fa      	ldr	r2, [r7, #12]
 810a532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a534:	687b      	ldr	r3, [r7, #4]
 810a536:	2220      	movs	r2, #32
 810a538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a53c:	687b      	ldr	r3, [r7, #4]
 810a53e:	2200      	movs	r2, #0
 810a540:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810a544:	2300      	movs	r3, #0
}
 810a546:	4618      	mov	r0, r3
 810a548:	3710      	adds	r7, #16
 810a54a:	46bd      	mov	sp, r7
 810a54c:	bd80      	pop	{r7, pc}

0810a54e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a54e:	b580      	push	{r7, lr}
 810a550:	b084      	sub	sp, #16
 810a552:	af00      	add	r7, sp, #0
 810a554:	6078      	str	r0, [r7, #4]
 810a556:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810a55e:	2b01      	cmp	r3, #1
 810a560:	d101      	bne.n	810a566 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810a562:	2302      	movs	r3, #2
 810a564:	e02d      	b.n	810a5c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810a566:	687b      	ldr	r3, [r7, #4]
 810a568:	2201      	movs	r2, #1
 810a56a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810a56e:	687b      	ldr	r3, [r7, #4]
 810a570:	2224      	movs	r2, #36	; 0x24
 810a572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a576:	687b      	ldr	r3, [r7, #4]
 810a578:	681b      	ldr	r3, [r3, #0]
 810a57a:	681b      	ldr	r3, [r3, #0]
 810a57c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a57e:	687b      	ldr	r3, [r7, #4]
 810a580:	681b      	ldr	r3, [r3, #0]
 810a582:	681a      	ldr	r2, [r3, #0]
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	681b      	ldr	r3, [r3, #0]
 810a588:	f022 0201 	bic.w	r2, r2, #1
 810a58c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810a58e:	687b      	ldr	r3, [r7, #4]
 810a590:	681b      	ldr	r3, [r3, #0]
 810a592:	689b      	ldr	r3, [r3, #8]
 810a594:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810a598:	687b      	ldr	r3, [r7, #4]
 810a59a:	681b      	ldr	r3, [r3, #0]
 810a59c:	683a      	ldr	r2, [r7, #0]
 810a59e:	430a      	orrs	r2, r1
 810a5a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a5a2:	6878      	ldr	r0, [r7, #4]
 810a5a4:	f000 f812 	bl	810a5cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a5a8:	687b      	ldr	r3, [r7, #4]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	68fa      	ldr	r2, [r7, #12]
 810a5ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a5b0:	687b      	ldr	r3, [r7, #4]
 810a5b2:	2220      	movs	r2, #32
 810a5b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a5b8:	687b      	ldr	r3, [r7, #4]
 810a5ba:	2200      	movs	r2, #0
 810a5bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810a5c0:	2300      	movs	r3, #0
}
 810a5c2:	4618      	mov	r0, r3
 810a5c4:	3710      	adds	r7, #16
 810a5c6:	46bd      	mov	sp, r7
 810a5c8:	bd80      	pop	{r7, pc}
	...

0810a5cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810a5cc:	b480      	push	{r7}
 810a5ce:	b089      	sub	sp, #36	; 0x24
 810a5d0:	af00      	add	r7, sp, #0
 810a5d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 810a5d4:	4a2f      	ldr	r2, [pc, #188]	; (810a694 <UARTEx_SetNbDataToProcess+0xc8>)
 810a5d6:	f107 0314 	add.w	r3, r7, #20
 810a5da:	e892 0003 	ldmia.w	r2, {r0, r1}
 810a5de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 810a5e2:	4a2d      	ldr	r2, [pc, #180]	; (810a698 <UARTEx_SetNbDataToProcess+0xcc>)
 810a5e4:	f107 030c 	add.w	r3, r7, #12
 810a5e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 810a5ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5f4:	2b00      	cmp	r3, #0
 810a5f6:	d108      	bne.n	810a60a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 810a5f8:	687b      	ldr	r3, [r7, #4]
 810a5fa:	2201      	movs	r2, #1
 810a5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810a600:	687b      	ldr	r3, [r7, #4]
 810a602:	2201      	movs	r2, #1
 810a604:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810a608:	e03d      	b.n	810a686 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810a60a:	2310      	movs	r3, #16
 810a60c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810a60e:	2310      	movs	r3, #16
 810a610:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810a612:	687b      	ldr	r3, [r7, #4]
 810a614:	681b      	ldr	r3, [r3, #0]
 810a616:	689b      	ldr	r3, [r3, #8]
 810a618:	0e5b      	lsrs	r3, r3, #25
 810a61a:	b2db      	uxtb	r3, r3
 810a61c:	f003 0307 	and.w	r3, r3, #7
 810a620:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810a622:	687b      	ldr	r3, [r7, #4]
 810a624:	681b      	ldr	r3, [r3, #0]
 810a626:	689b      	ldr	r3, [r3, #8]
 810a628:	0f5b      	lsrs	r3, r3, #29
 810a62a:	b2db      	uxtb	r3, r3
 810a62c:	f003 0307 	and.w	r3, r3, #7
 810a630:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 810a632:	7fbb      	ldrb	r3, [r7, #30]
 810a634:	7f3a      	ldrb	r2, [r7, #28]
 810a636:	f107 0120 	add.w	r1, r7, #32
 810a63a:	440a      	add	r2, r1
 810a63c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810a640:	fb02 f303 	mul.w	r3, r2, r3
 810a644:	7f3a      	ldrb	r2, [r7, #28]
 810a646:	f107 0120 	add.w	r1, r7, #32
 810a64a:	440a      	add	r2, r1
 810a64c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810a650:	fb93 f3f2 	sdiv	r3, r3, r2
 810a654:	b29a      	uxth	r2, r3
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 810a65c:	7ffb      	ldrb	r3, [r7, #31]
 810a65e:	7f7a      	ldrb	r2, [r7, #29]
 810a660:	f107 0120 	add.w	r1, r7, #32
 810a664:	440a      	add	r2, r1
 810a666:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810a66a:	fb02 f303 	mul.w	r3, r2, r3
 810a66e:	7f7a      	ldrb	r2, [r7, #29]
 810a670:	f107 0120 	add.w	r1, r7, #32
 810a674:	440a      	add	r2, r1
 810a676:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810a67a:	fb93 f3f2 	sdiv	r3, r3, r2
 810a67e:	b29a      	uxth	r2, r3
 810a680:	687b      	ldr	r3, [r7, #4]
 810a682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810a686:	bf00      	nop
 810a688:	3724      	adds	r7, #36	; 0x24
 810a68a:	46bd      	mov	sp, r7
 810a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a690:	4770      	bx	lr
 810a692:	bf00      	nop
 810a694:	0810b680 	.word	0x0810b680
 810a698:	0810b688 	.word	0x0810b688

0810a69c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 810a69c:	b480      	push	{r7}
 810a69e:	b083      	sub	sp, #12
 810a6a0:	af00      	add	r7, sp, #0
 810a6a2:	6078      	str	r0, [r7, #4]
 810a6a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810a6a6:	683b      	ldr	r3, [r7, #0]
 810a6a8:	681b      	ldr	r3, [r3, #0]
 810a6aa:	2b00      	cmp	r3, #0
 810a6ac:	d123      	bne.n	810a6f6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810a6ae:	687b      	ldr	r3, [r7, #4]
 810a6b0:	681b      	ldr	r3, [r3, #0]
 810a6b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810a6b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810a6ba:	683a      	ldr	r2, [r7, #0]
 810a6bc:	6851      	ldr	r1, [r2, #4]
 810a6be:	683a      	ldr	r2, [r7, #0]
 810a6c0:	6892      	ldr	r2, [r2, #8]
 810a6c2:	4311      	orrs	r1, r2
 810a6c4:	683a      	ldr	r2, [r7, #0]
 810a6c6:	68d2      	ldr	r2, [r2, #12]
 810a6c8:	4311      	orrs	r1, r2
 810a6ca:	683a      	ldr	r2, [r7, #0]
 810a6cc:	6912      	ldr	r2, [r2, #16]
 810a6ce:	4311      	orrs	r1, r2
 810a6d0:	683a      	ldr	r2, [r7, #0]
 810a6d2:	6952      	ldr	r2, [r2, #20]
 810a6d4:	4311      	orrs	r1, r2
 810a6d6:	683a      	ldr	r2, [r7, #0]
 810a6d8:	6992      	ldr	r2, [r2, #24]
 810a6da:	4311      	orrs	r1, r2
 810a6dc:	683a      	ldr	r2, [r7, #0]
 810a6de:	69d2      	ldr	r2, [r2, #28]
 810a6e0:	4311      	orrs	r1, r2
 810a6e2:	683a      	ldr	r2, [r7, #0]
 810a6e4:	6a12      	ldr	r2, [r2, #32]
 810a6e6:	4311      	orrs	r1, r2
 810a6e8:	683a      	ldr	r2, [r7, #0]
 810a6ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810a6ec:	430a      	orrs	r2, r1
 810a6ee:	431a      	orrs	r2, r3
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	601a      	str	r2, [r3, #0]
 810a6f4:	e028      	b.n	810a748 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810a6f6:	687b      	ldr	r3, [r7, #4]
 810a6f8:	681b      	ldr	r3, [r3, #0]
 810a6fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 810a6fe:	683b      	ldr	r3, [r7, #0]
 810a700:	69d9      	ldr	r1, [r3, #28]
 810a702:	683b      	ldr	r3, [r7, #0]
 810a704:	6a1b      	ldr	r3, [r3, #32]
 810a706:	4319      	orrs	r1, r3
 810a708:	683b      	ldr	r3, [r7, #0]
 810a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a70c:	430b      	orrs	r3, r1
 810a70e:	431a      	orrs	r2, r3
 810a710:	687b      	ldr	r3, [r7, #4]
 810a712:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810a714:	687b      	ldr	r3, [r7, #4]
 810a716:	685b      	ldr	r3, [r3, #4]
 810a718:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810a71c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810a720:	683a      	ldr	r2, [r7, #0]
 810a722:	6851      	ldr	r1, [r2, #4]
 810a724:	683a      	ldr	r2, [r7, #0]
 810a726:	6892      	ldr	r2, [r2, #8]
 810a728:	4311      	orrs	r1, r2
 810a72a:	683a      	ldr	r2, [r7, #0]
 810a72c:	68d2      	ldr	r2, [r2, #12]
 810a72e:	4311      	orrs	r1, r2
 810a730:	683a      	ldr	r2, [r7, #0]
 810a732:	6912      	ldr	r2, [r2, #16]
 810a734:	4311      	orrs	r1, r2
 810a736:	683a      	ldr	r2, [r7, #0]
 810a738:	6952      	ldr	r2, [r2, #20]
 810a73a:	4311      	orrs	r1, r2
 810a73c:	683a      	ldr	r2, [r7, #0]
 810a73e:	6992      	ldr	r2, [r2, #24]
 810a740:	430a      	orrs	r2, r1
 810a742:	431a      	orrs	r2, r3
 810a744:	687b      	ldr	r3, [r7, #4]
 810a746:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810a748:	2300      	movs	r3, #0
}
 810a74a:	4618      	mov	r0, r3
 810a74c:	370c      	adds	r7, #12
 810a74e:	46bd      	mov	sp, r7
 810a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a754:	4770      	bx	lr

0810a756 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810a756:	b480      	push	{r7}
 810a758:	b085      	sub	sp, #20
 810a75a:	af00      	add	r7, sp, #0
 810a75c:	60f8      	str	r0, [r7, #12]
 810a75e:	60b9      	str	r1, [r7, #8]
 810a760:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810a762:	687b      	ldr	r3, [r7, #4]
 810a764:	2b00      	cmp	r3, #0
 810a766:	d128      	bne.n	810a7ba <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810a768:	68fb      	ldr	r3, [r7, #12]
 810a76a:	689b      	ldr	r3, [r3, #8]
 810a76c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810a770:	68bb      	ldr	r3, [r7, #8]
 810a772:	681b      	ldr	r3, [r3, #0]
 810a774:	1e59      	subs	r1, r3, #1
 810a776:	68bb      	ldr	r3, [r7, #8]
 810a778:	685b      	ldr	r3, [r3, #4]
 810a77a:	3b01      	subs	r3, #1
 810a77c:	011b      	lsls	r3, r3, #4
 810a77e:	4319      	orrs	r1, r3
 810a780:	68bb      	ldr	r3, [r7, #8]
 810a782:	689b      	ldr	r3, [r3, #8]
 810a784:	3b01      	subs	r3, #1
 810a786:	021b      	lsls	r3, r3, #8
 810a788:	4319      	orrs	r1, r3
 810a78a:	68bb      	ldr	r3, [r7, #8]
 810a78c:	68db      	ldr	r3, [r3, #12]
 810a78e:	3b01      	subs	r3, #1
 810a790:	031b      	lsls	r3, r3, #12
 810a792:	4319      	orrs	r1, r3
 810a794:	68bb      	ldr	r3, [r7, #8]
 810a796:	691b      	ldr	r3, [r3, #16]
 810a798:	3b01      	subs	r3, #1
 810a79a:	041b      	lsls	r3, r3, #16
 810a79c:	4319      	orrs	r1, r3
 810a79e:	68bb      	ldr	r3, [r7, #8]
 810a7a0:	695b      	ldr	r3, [r3, #20]
 810a7a2:	3b01      	subs	r3, #1
 810a7a4:	051b      	lsls	r3, r3, #20
 810a7a6:	4319      	orrs	r1, r3
 810a7a8:	68bb      	ldr	r3, [r7, #8]
 810a7aa:	699b      	ldr	r3, [r3, #24]
 810a7ac:	3b01      	subs	r3, #1
 810a7ae:	061b      	lsls	r3, r3, #24
 810a7b0:	430b      	orrs	r3, r1
 810a7b2:	431a      	orrs	r2, r3
 810a7b4:	68fb      	ldr	r3, [r7, #12]
 810a7b6:	609a      	str	r2, [r3, #8]
 810a7b8:	e02f      	b.n	810a81a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810a7ba:	68fb      	ldr	r3, [r7, #12]
 810a7bc:	689b      	ldr	r3, [r3, #8]
 810a7be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810a7c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810a7c6:	68ba      	ldr	r2, [r7, #8]
 810a7c8:	68d2      	ldr	r2, [r2, #12]
 810a7ca:	3a01      	subs	r2, #1
 810a7cc:	0311      	lsls	r1, r2, #12
 810a7ce:	68ba      	ldr	r2, [r7, #8]
 810a7d0:	6952      	ldr	r2, [r2, #20]
 810a7d2:	3a01      	subs	r2, #1
 810a7d4:	0512      	lsls	r2, r2, #20
 810a7d6:	430a      	orrs	r2, r1
 810a7d8:	431a      	orrs	r2, r3
 810a7da:	68fb      	ldr	r3, [r7, #12]
 810a7dc:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810a7de:	68fb      	ldr	r3, [r7, #12]
 810a7e0:	68db      	ldr	r3, [r3, #12]
 810a7e2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810a7e6:	68bb      	ldr	r3, [r7, #8]
 810a7e8:	681b      	ldr	r3, [r3, #0]
 810a7ea:	1e59      	subs	r1, r3, #1
 810a7ec:	68bb      	ldr	r3, [r7, #8]
 810a7ee:	685b      	ldr	r3, [r3, #4]
 810a7f0:	3b01      	subs	r3, #1
 810a7f2:	011b      	lsls	r3, r3, #4
 810a7f4:	4319      	orrs	r1, r3
 810a7f6:	68bb      	ldr	r3, [r7, #8]
 810a7f8:	689b      	ldr	r3, [r3, #8]
 810a7fa:	3b01      	subs	r3, #1
 810a7fc:	021b      	lsls	r3, r3, #8
 810a7fe:	4319      	orrs	r1, r3
 810a800:	68bb      	ldr	r3, [r7, #8]
 810a802:	691b      	ldr	r3, [r3, #16]
 810a804:	3b01      	subs	r3, #1
 810a806:	041b      	lsls	r3, r3, #16
 810a808:	4319      	orrs	r1, r3
 810a80a:	68bb      	ldr	r3, [r7, #8]
 810a80c:	699b      	ldr	r3, [r3, #24]
 810a80e:	3b01      	subs	r3, #1
 810a810:	061b      	lsls	r3, r3, #24
 810a812:	430b      	orrs	r3, r1
 810a814:	431a      	orrs	r2, r3
 810a816:	68fb      	ldr	r3, [r7, #12]
 810a818:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810a81a:	2300      	movs	r3, #0
}
 810a81c:	4618      	mov	r0, r3
 810a81e:	3714      	adds	r7, #20
 810a820:	46bd      	mov	sp, r7
 810a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a826:	4770      	bx	lr

0810a828 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810a828:	b084      	sub	sp, #16
 810a82a:	b480      	push	{r7}
 810a82c:	b085      	sub	sp, #20
 810a82e:	af00      	add	r7, sp, #0
 810a830:	6078      	str	r0, [r7, #4]
 810a832:	f107 001c 	add.w	r0, r7, #28
 810a836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810a83a:	2300      	movs	r3, #0
 810a83c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 810a83e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 810a840:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 810a842:	431a      	orrs	r2, r3
             Init.BusWide             |\
 810a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 810a846:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 810a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 810a84a:	431a      	orrs	r2, r3
             Init.ClockDiv
 810a84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 810a84e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 810a850:	68fa      	ldr	r2, [r7, #12]
 810a852:	4313      	orrs	r3, r2
 810a854:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	685a      	ldr	r2, [r3, #4]
 810a85a:	4b07      	ldr	r3, [pc, #28]	; (810a878 <SDMMC_Init+0x50>)
 810a85c:	4013      	ands	r3, r2
 810a85e:	68fa      	ldr	r2, [r7, #12]
 810a860:	431a      	orrs	r2, r3
 810a862:	687b      	ldr	r3, [r7, #4]
 810a864:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810a866:	2300      	movs	r3, #0
}
 810a868:	4618      	mov	r0, r3
 810a86a:	3714      	adds	r7, #20
 810a86c:	46bd      	mov	sp, r7
 810a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a872:	b004      	add	sp, #16
 810a874:	4770      	bx	lr
 810a876:	bf00      	nop
 810a878:	ffc02c00 	.word	0xffc02c00

0810a87c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 810a87c:	b480      	push	{r7}
 810a87e:	b083      	sub	sp, #12
 810a880:	af00      	add	r7, sp, #0
 810a882:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810a884:	687b      	ldr	r3, [r7, #4]
 810a886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 810a88a:	4618      	mov	r0, r3
 810a88c:	370c      	adds	r7, #12
 810a88e:	46bd      	mov	sp, r7
 810a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a894:	4770      	bx	lr

0810a896 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810a896:	b480      	push	{r7}
 810a898:	b083      	sub	sp, #12
 810a89a:	af00      	add	r7, sp, #0
 810a89c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810a89e:	687b      	ldr	r3, [r7, #4]
 810a8a0:	681b      	ldr	r3, [r3, #0]
 810a8a2:	f043 0203 	orr.w	r2, r3, #3
 810a8a6:	687b      	ldr	r3, [r7, #4]
 810a8a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810a8aa:	2300      	movs	r3, #0
}
 810a8ac:	4618      	mov	r0, r3
 810a8ae:	370c      	adds	r7, #12
 810a8b0:	46bd      	mov	sp, r7
 810a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8b6:	4770      	bx	lr

0810a8b8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 810a8b8:	b480      	push	{r7}
 810a8ba:	b083      	sub	sp, #12
 810a8bc:	af00      	add	r7, sp, #0
 810a8be:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810a8c0:	687b      	ldr	r3, [r7, #4]
 810a8c2:	681b      	ldr	r3, [r3, #0]
 810a8c4:	f003 0303 	and.w	r3, r3, #3
}
 810a8c8:	4618      	mov	r0, r3
 810a8ca:	370c      	adds	r7, #12
 810a8cc:	46bd      	mov	sp, r7
 810a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8d2:	4770      	bx	lr

0810a8d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 810a8d4:	b480      	push	{r7}
 810a8d6:	b085      	sub	sp, #20
 810a8d8:	af00      	add	r7, sp, #0
 810a8da:	6078      	str	r0, [r7, #4]
 810a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810a8de:	2300      	movs	r3, #0
 810a8e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810a8e2:	683b      	ldr	r3, [r7, #0]
 810a8e4:	681a      	ldr	r2, [r3, #0]
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 810a8ea:	683b      	ldr	r3, [r7, #0]
 810a8ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 810a8ee:	683b      	ldr	r3, [r7, #0]
 810a8f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 810a8f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 810a8f4:	683b      	ldr	r3, [r7, #0]
 810a8f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 810a8f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 810a8fa:	683b      	ldr	r3, [r7, #0]
 810a8fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 810a8fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 810a900:	68fa      	ldr	r2, [r7, #12]
 810a902:	4313      	orrs	r3, r2
 810a904:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810a906:	687b      	ldr	r3, [r7, #4]
 810a908:	68da      	ldr	r2, [r3, #12]
 810a90a:	4b06      	ldr	r3, [pc, #24]	; (810a924 <SDMMC_SendCommand+0x50>)
 810a90c:	4013      	ands	r3, r2
 810a90e:	68fa      	ldr	r2, [r7, #12]
 810a910:	431a      	orrs	r2, r3
 810a912:	687b      	ldr	r3, [r7, #4]
 810a914:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810a916:	2300      	movs	r3, #0
}
 810a918:	4618      	mov	r0, r3
 810a91a:	3714      	adds	r7, #20
 810a91c:	46bd      	mov	sp, r7
 810a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a922:	4770      	bx	lr
 810a924:	fffee0c0 	.word	0xfffee0c0

0810a928 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 810a928:	b480      	push	{r7}
 810a92a:	b083      	sub	sp, #12
 810a92c:	af00      	add	r7, sp, #0
 810a92e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810a930:	687b      	ldr	r3, [r7, #4]
 810a932:	691b      	ldr	r3, [r3, #16]
 810a934:	b2db      	uxtb	r3, r3
}
 810a936:	4618      	mov	r0, r3
 810a938:	370c      	adds	r7, #12
 810a93a:	46bd      	mov	sp, r7
 810a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a940:	4770      	bx	lr

0810a942 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810a942:	b480      	push	{r7}
 810a944:	b085      	sub	sp, #20
 810a946:	af00      	add	r7, sp, #0
 810a948:	6078      	str	r0, [r7, #4]
 810a94a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810a94c:	687b      	ldr	r3, [r7, #4]
 810a94e:	3314      	adds	r3, #20
 810a950:	461a      	mov	r2, r3
 810a952:	683b      	ldr	r3, [r7, #0]
 810a954:	4413      	add	r3, r2
 810a956:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810a958:	68fb      	ldr	r3, [r7, #12]
 810a95a:	681b      	ldr	r3, [r3, #0]
}
 810a95c:	4618      	mov	r0, r3
 810a95e:	3714      	adds	r7, #20
 810a960:	46bd      	mov	sp, r7
 810a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a966:	4770      	bx	lr

0810a968 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 810a968:	b480      	push	{r7}
 810a96a:	b085      	sub	sp, #20
 810a96c:	af00      	add	r7, sp, #0
 810a96e:	6078      	str	r0, [r7, #4]
 810a970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810a972:	2300      	movs	r3, #0
 810a974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810a976:	683b      	ldr	r3, [r7, #0]
 810a978:	681a      	ldr	r2, [r3, #0]
 810a97a:	687b      	ldr	r3, [r7, #4]
 810a97c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810a97e:	683b      	ldr	r3, [r7, #0]
 810a980:	685a      	ldr	r2, [r3, #4]
 810a982:	687b      	ldr	r3, [r7, #4]
 810a984:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810a986:	683b      	ldr	r3, [r7, #0]
 810a988:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 810a98a:	683b      	ldr	r3, [r7, #0]
 810a98c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810a98e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 810a990:	683b      	ldr	r3, [r7, #0]
 810a992:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 810a994:	431a      	orrs	r2, r3
                       Data->DPSM);
 810a996:	683b      	ldr	r3, [r7, #0]
 810a998:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 810a99a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810a99c:	68fa      	ldr	r2, [r7, #12]
 810a99e:	4313      	orrs	r3, r2
 810a9a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810a9aa:	68fb      	ldr	r3, [r7, #12]
 810a9ac:	431a      	orrs	r2, r3
 810a9ae:	687b      	ldr	r3, [r7, #4]
 810a9b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810a9b2:	2300      	movs	r3, #0

}
 810a9b4:	4618      	mov	r0, r3
 810a9b6:	3714      	adds	r7, #20
 810a9b8:	46bd      	mov	sp, r7
 810a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9be:	4770      	bx	lr

0810a9c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810a9c0:	b580      	push	{r7, lr}
 810a9c2:	b088      	sub	sp, #32
 810a9c4:	af00      	add	r7, sp, #0
 810a9c6:	6078      	str	r0, [r7, #4]
 810a9c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810a9ca:	683b      	ldr	r3, [r7, #0]
 810a9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810a9ce:	2310      	movs	r3, #16
 810a9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a9d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a9d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a9d8:	2300      	movs	r3, #0
 810a9da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a9dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a9e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a9e2:	f107 0308 	add.w	r3, r7, #8
 810a9e6:	4619      	mov	r1, r3
 810a9e8:	6878      	ldr	r0, [r7, #4]
 810a9ea:	f7ff ff73 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810a9ee:	f241 3288 	movw	r2, #5000	; 0x1388
 810a9f2:	2110      	movs	r1, #16
 810a9f4:	6878      	ldr	r0, [r7, #4]
 810a9f6:	f000 f93d 	bl	810ac74 <SDMMC_GetCmdResp1>
 810a9fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a9fc:	69fb      	ldr	r3, [r7, #28]
}
 810a9fe:	4618      	mov	r0, r3
 810aa00:	3720      	adds	r7, #32
 810aa02:	46bd      	mov	sp, r7
 810aa04:	bd80      	pop	{r7, pc}

0810aa06 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 810aa06:	b580      	push	{r7, lr}
 810aa08:	b08a      	sub	sp, #40	; 0x28
 810aa0a:	af00      	add	r7, sp, #0
 810aa0c:	60f8      	str	r0, [r7, #12]
 810aa0e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810aa12:	683b      	ldr	r3, [r7, #0]
 810aa14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810aa16:	2307      	movs	r3, #7
 810aa18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810aa1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810aa1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810aa20:	2300      	movs	r3, #0
 810aa22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810aa24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810aa28:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810aa2a:	f107 0310 	add.w	r3, r7, #16
 810aa2e:	4619      	mov	r1, r3
 810aa30:	68f8      	ldr	r0, [r7, #12]
 810aa32:	f7ff ff4f 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810aa36:	f241 3288 	movw	r2, #5000	; 0x1388
 810aa3a:	2107      	movs	r1, #7
 810aa3c:	68f8      	ldr	r0, [r7, #12]
 810aa3e:	f000 f919 	bl	810ac74 <SDMMC_GetCmdResp1>
 810aa42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 810aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810aa46:	4618      	mov	r0, r3
 810aa48:	3728      	adds	r7, #40	; 0x28
 810aa4a:	46bd      	mov	sp, r7
 810aa4c:	bd80      	pop	{r7, pc}

0810aa4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810aa4e:	b580      	push	{r7, lr}
 810aa50:	b088      	sub	sp, #32
 810aa52:	af00      	add	r7, sp, #0
 810aa54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810aa56:	2300      	movs	r3, #0
 810aa58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810aa5a:	2300      	movs	r3, #0
 810aa5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810aa5e:	2300      	movs	r3, #0
 810aa60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810aa62:	2300      	movs	r3, #0
 810aa64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810aa66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810aa6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810aa6c:	f107 0308 	add.w	r3, r7, #8
 810aa70:	4619      	mov	r1, r3
 810aa72:	6878      	ldr	r0, [r7, #4]
 810aa74:	f7ff ff2e 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810aa78:	6878      	ldr	r0, [r7, #4]
 810aa7a:	f000 f8cd 	bl	810ac18 <SDMMC_GetCmdError>
 810aa7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810aa80:	69fb      	ldr	r3, [r7, #28]
}
 810aa82:	4618      	mov	r0, r3
 810aa84:	3720      	adds	r7, #32
 810aa86:	46bd      	mov	sp, r7
 810aa88:	bd80      	pop	{r7, pc}

0810aa8a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810aa8a:	b580      	push	{r7, lr}
 810aa8c:	b088      	sub	sp, #32
 810aa8e:	af00      	add	r7, sp, #0
 810aa90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810aa92:	2300      	movs	r3, #0
 810aa94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810aa96:	2302      	movs	r3, #2
 810aa98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810aa9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 810aa9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810aaa0:	2300      	movs	r3, #0
 810aaa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810aaa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810aaa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810aaaa:	f107 0308 	add.w	r3, r7, #8
 810aaae:	4619      	mov	r1, r3
 810aab0:	6878      	ldr	r0, [r7, #4]
 810aab2:	f7ff ff0f 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810aab6:	6878      	ldr	r0, [r7, #4]
 810aab8:	f000 f9ce 	bl	810ae58 <SDMMC_GetCmdResp2>
 810aabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810aabe:	69fb      	ldr	r3, [r7, #28]
}
 810aac0:	4618      	mov	r0, r3
 810aac2:	3720      	adds	r7, #32
 810aac4:	46bd      	mov	sp, r7
 810aac6:	bd80      	pop	{r7, pc}

0810aac8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810aac8:	b580      	push	{r7, lr}
 810aaca:	b088      	sub	sp, #32
 810aacc:	af00      	add	r7, sp, #0
 810aace:	6078      	str	r0, [r7, #4]
 810aad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810aad2:	683b      	ldr	r3, [r7, #0]
 810aad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810aad6:	2309      	movs	r3, #9
 810aad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810aada:	f44f 7340 	mov.w	r3, #768	; 0x300
 810aade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810aae0:	2300      	movs	r3, #0
 810aae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810aae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810aae8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810aaea:	f107 0308 	add.w	r3, r7, #8
 810aaee:	4619      	mov	r1, r3
 810aaf0:	6878      	ldr	r0, [r7, #4]
 810aaf2:	f7ff feef 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810aaf6:	6878      	ldr	r0, [r7, #4]
 810aaf8:	f000 f9ae 	bl	810ae58 <SDMMC_GetCmdResp2>
 810aafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810aafe:	69fb      	ldr	r3, [r7, #28]
}
 810ab00:	4618      	mov	r0, r3
 810ab02:	3720      	adds	r7, #32
 810ab04:	46bd      	mov	sp, r7
 810ab06:	bd80      	pop	{r7, pc}

0810ab08 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810ab08:	b580      	push	{r7, lr}
 810ab0a:	b088      	sub	sp, #32
 810ab0c:	af00      	add	r7, sp, #0
 810ab0e:	6078      	str	r0, [r7, #4]
 810ab10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810ab12:	2300      	movs	r3, #0
 810ab14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810ab16:	2303      	movs	r3, #3
 810ab18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810ab1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810ab1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810ab20:	2300      	movs	r3, #0
 810ab22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810ab24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810ab28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810ab2a:	f107 0308 	add.w	r3, r7, #8
 810ab2e:	4619      	mov	r1, r3
 810ab30:	6878      	ldr	r0, [r7, #4]
 810ab32:	f7ff fecf 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810ab36:	683a      	ldr	r2, [r7, #0]
 810ab38:	2103      	movs	r1, #3
 810ab3a:	6878      	ldr	r0, [r7, #4]
 810ab3c:	f000 fa16 	bl	810af6c <SDMMC_GetCmdResp6>
 810ab40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810ab42:	69fb      	ldr	r3, [r7, #28]
}
 810ab44:	4618      	mov	r0, r3
 810ab46:	3720      	adds	r7, #32
 810ab48:	46bd      	mov	sp, r7
 810ab4a:	bd80      	pop	{r7, pc}

0810ab4c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810ab4c:	b580      	push	{r7, lr}
 810ab4e:	b088      	sub	sp, #32
 810ab50:	af00      	add	r7, sp, #0
 810ab52:	6078      	str	r0, [r7, #4]
 810ab54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810ab56:	683b      	ldr	r3, [r7, #0]
 810ab58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810ab5a:	230d      	movs	r3, #13
 810ab5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810ab5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 810ab62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810ab64:	2300      	movs	r3, #0
 810ab66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810ab68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810ab6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810ab6e:	f107 0308 	add.w	r3, r7, #8
 810ab72:	4619      	mov	r1, r3
 810ab74:	6878      	ldr	r0, [r7, #4]
 810ab76:	f7ff fead 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810ab7a:	f241 3288 	movw	r2, #5000	; 0x1388
 810ab7e:	210d      	movs	r1, #13
 810ab80:	6878      	ldr	r0, [r7, #4]
 810ab82:	f000 f877 	bl	810ac74 <SDMMC_GetCmdResp1>
 810ab86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810ab88:	69fb      	ldr	r3, [r7, #28]
}
 810ab8a:	4618      	mov	r0, r3
 810ab8c:	3720      	adds	r7, #32
 810ab8e:	46bd      	mov	sp, r7
 810ab90:	bd80      	pop	{r7, pc}

0810ab92 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810ab92:	b580      	push	{r7, lr}
 810ab94:	b088      	sub	sp, #32
 810ab96:	af00      	add	r7, sp, #0
 810ab98:	6078      	str	r0, [r7, #4]
 810ab9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810ab9c:	683b      	ldr	r3, [r7, #0]
 810ab9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 810aba0:	2301      	movs	r3, #1
 810aba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810aba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810aba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810abaa:	2300      	movs	r3, #0
 810abac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810abae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810abb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810abb4:	f107 0308 	add.w	r3, r7, #8
 810abb8:	4619      	mov	r1, r3
 810abba:	6878      	ldr	r0, [r7, #4]
 810abbc:	f7ff fe8a 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810abc0:	6878      	ldr	r0, [r7, #4]
 810abc2:	f000 f993 	bl	810aeec <SDMMC_GetCmdResp3>
 810abc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810abc8:	69fb      	ldr	r3, [r7, #28]
}
 810abca:	4618      	mov	r0, r3
 810abcc:	3720      	adds	r7, #32
 810abce:	46bd      	mov	sp, r7
 810abd0:	bd80      	pop	{r7, pc}

0810abd2 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810abd2:	b580      	push	{r7, lr}
 810abd4:	b088      	sub	sp, #32
 810abd6:	af00      	add	r7, sp, #0
 810abd8:	6078      	str	r0, [r7, #4]
 810abda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810abdc:	683b      	ldr	r3, [r7, #0]
 810abde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810abe0:	2308      	movs	r3, #8
 810abe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810abe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810abe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810abea:	2300      	movs	r3, #0
 810abec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810abee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810abf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810abf4:	f107 0308 	add.w	r3, r7, #8
 810abf8:	4619      	mov	r1, r3
 810abfa:	6878      	ldr	r0, [r7, #4]
 810abfc:	f7ff fe6a 	bl	810a8d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD,SDMMC_CMDTIMEOUT);
 810ac00:	f241 3288 	movw	r2, #5000	; 0x1388
 810ac04:	2108      	movs	r1, #8
 810ac06:	6878      	ldr	r0, [r7, #4]
 810ac08:	f000 f834 	bl	810ac74 <SDMMC_GetCmdResp1>
 810ac0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810ac0e:	69fb      	ldr	r3, [r7, #28]
}
 810ac10:	4618      	mov	r0, r3
 810ac12:	3720      	adds	r7, #32
 810ac14:	46bd      	mov	sp, r7
 810ac16:	bd80      	pop	{r7, pc}

0810ac18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810ac18:	b480      	push	{r7}
 810ac1a:	b085      	sub	sp, #20
 810ac1c:	af00      	add	r7, sp, #0
 810ac1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810ac20:	4b11      	ldr	r3, [pc, #68]	; (810ac68 <SDMMC_GetCmdError+0x50>)
 810ac22:	681b      	ldr	r3, [r3, #0]
 810ac24:	4a11      	ldr	r2, [pc, #68]	; (810ac6c <SDMMC_GetCmdError+0x54>)
 810ac26:	fba2 2303 	umull	r2, r3, r2, r3
 810ac2a:	0a5b      	lsrs	r3, r3, #9
 810ac2c:	f241 3288 	movw	r2, #5000	; 0x1388
 810ac30:	fb02 f303 	mul.w	r3, r2, r3
 810ac34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810ac36:	68fb      	ldr	r3, [r7, #12]
 810ac38:	1e5a      	subs	r2, r3, #1
 810ac3a:	60fa      	str	r2, [r7, #12]
 810ac3c:	2b00      	cmp	r3, #0
 810ac3e:	d102      	bne.n	810ac46 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810ac40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810ac44:	e009      	b.n	810ac5a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810ac46:	687b      	ldr	r3, [r7, #4]
 810ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ac4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ac4e:	2b00      	cmp	r3, #0
 810ac50:	d0f1      	beq.n	810ac36 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810ac52:	687b      	ldr	r3, [r7, #4]
 810ac54:	4a06      	ldr	r2, [pc, #24]	; (810ac70 <SDMMC_GetCmdError+0x58>)
 810ac56:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 810ac58:	2300      	movs	r3, #0
}
 810ac5a:	4618      	mov	r0, r3
 810ac5c:	3714      	adds	r7, #20
 810ac5e:	46bd      	mov	sp, r7
 810ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac64:	4770      	bx	lr
 810ac66:	bf00      	nop
 810ac68:	10000000 	.word	0x10000000
 810ac6c:	10624dd3 	.word	0x10624dd3
 810ac70:	002000c5 	.word	0x002000c5

0810ac74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810ac74:	b580      	push	{r7, lr}
 810ac76:	b088      	sub	sp, #32
 810ac78:	af00      	add	r7, sp, #0
 810ac7a:	60f8      	str	r0, [r7, #12]
 810ac7c:	460b      	mov	r3, r1
 810ac7e:	607a      	str	r2, [r7, #4]
 810ac80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 810ac82:	4b70      	ldr	r3, [pc, #448]	; (810ae44 <SDMMC_GetCmdResp1+0x1d0>)
 810ac84:	681b      	ldr	r3, [r3, #0]
 810ac86:	4a70      	ldr	r2, [pc, #448]	; (810ae48 <SDMMC_GetCmdResp1+0x1d4>)
 810ac88:	fba2 2303 	umull	r2, r3, r2, r3
 810ac8c:	0a5a      	lsrs	r2, r3, #9
 810ac8e:	687b      	ldr	r3, [r7, #4]
 810ac90:	fb02 f303 	mul.w	r3, r2, r3
 810ac94:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810ac96:	69fb      	ldr	r3, [r7, #28]
 810ac98:	1e5a      	subs	r2, r3, #1
 810ac9a:	61fa      	str	r2, [r7, #28]
 810ac9c:	2b00      	cmp	r3, #0
 810ac9e:	d102      	bne.n	810aca6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810aca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810aca4:	e0c9      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810aca6:	68fb      	ldr	r3, [r7, #12]
 810aca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810acaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 810acac:	69ba      	ldr	r2, [r7, #24]
 810acae:	4b67      	ldr	r3, [pc, #412]	; (810ae4c <SDMMC_GetCmdResp1+0x1d8>)
 810acb0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810acb2:	2b00      	cmp	r3, #0
 810acb4:	d0ef      	beq.n	810ac96 <SDMMC_GetCmdResp1+0x22>
 810acb6:	69bb      	ldr	r3, [r7, #24]
 810acb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 810acbc:	2b00      	cmp	r3, #0
 810acbe:	d1ea      	bne.n	810ac96 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810acc0:	68fb      	ldr	r3, [r7, #12]
 810acc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810acc4:	f003 0304 	and.w	r3, r3, #4
 810acc8:	2b00      	cmp	r3, #0
 810acca:	d004      	beq.n	810acd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810accc:	68fb      	ldr	r3, [r7, #12]
 810acce:	2204      	movs	r2, #4
 810acd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810acd2:	2304      	movs	r3, #4
 810acd4:	e0b1      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810acd6:	68fb      	ldr	r3, [r7, #12]
 810acd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810acda:	f003 0301 	and.w	r3, r3, #1
 810acde:	2b00      	cmp	r3, #0
 810ace0:	d004      	beq.n	810acec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810ace2:	68fb      	ldr	r3, [r7, #12]
 810ace4:	2201      	movs	r2, #1
 810ace6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810ace8:	2301      	movs	r3, #1
 810acea:	e0a6      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810acec:	68fb      	ldr	r3, [r7, #12]
 810acee:	4a58      	ldr	r2, [pc, #352]	; (810ae50 <SDMMC_GetCmdResp1+0x1dc>)
 810acf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810acf2:	68f8      	ldr	r0, [r7, #12]
 810acf4:	f7ff fe18 	bl	810a928 <SDMMC_GetCommandResponse>
 810acf8:	4603      	mov	r3, r0
 810acfa:	461a      	mov	r2, r3
 810acfc:	7afb      	ldrb	r3, [r7, #11]
 810acfe:	4293      	cmp	r3, r2
 810ad00:	d001      	beq.n	810ad06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810ad02:	2301      	movs	r3, #1
 810ad04:	e099      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810ad06:	2100      	movs	r1, #0
 810ad08:	68f8      	ldr	r0, [r7, #12]
 810ad0a:	f7ff fe1a 	bl	810a942 <SDMMC_GetResponse>
 810ad0e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810ad10:	697a      	ldr	r2, [r7, #20]
 810ad12:	4b50      	ldr	r3, [pc, #320]	; (810ae54 <SDMMC_GetCmdResp1+0x1e0>)
 810ad14:	4013      	ands	r3, r2
 810ad16:	2b00      	cmp	r3, #0
 810ad18:	d101      	bne.n	810ad1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810ad1a:	2300      	movs	r3, #0
 810ad1c:	e08d      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810ad1e:	697b      	ldr	r3, [r7, #20]
 810ad20:	2b00      	cmp	r3, #0
 810ad22:	da02      	bge.n	810ad2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810ad24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810ad28:	e087      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810ad2a:	697b      	ldr	r3, [r7, #20]
 810ad2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810ad30:	2b00      	cmp	r3, #0
 810ad32:	d001      	beq.n	810ad38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810ad34:	2340      	movs	r3, #64	; 0x40
 810ad36:	e080      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810ad38:	697b      	ldr	r3, [r7, #20]
 810ad3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810ad3e:	2b00      	cmp	r3, #0
 810ad40:	d001      	beq.n	810ad46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810ad42:	2380      	movs	r3, #128	; 0x80
 810ad44:	e079      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810ad46:	697b      	ldr	r3, [r7, #20]
 810ad48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810ad4c:	2b00      	cmp	r3, #0
 810ad4e:	d002      	beq.n	810ad56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810ad50:	f44f 7380 	mov.w	r3, #256	; 0x100
 810ad54:	e071      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810ad56:	697b      	ldr	r3, [r7, #20]
 810ad58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ad5c:	2b00      	cmp	r3, #0
 810ad5e:	d002      	beq.n	810ad66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810ad60:	f44f 7300 	mov.w	r3, #512	; 0x200
 810ad64:	e069      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810ad66:	697b      	ldr	r3, [r7, #20]
 810ad68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810ad6c:	2b00      	cmp	r3, #0
 810ad6e:	d002      	beq.n	810ad76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810ad70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810ad74:	e061      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810ad76:	697b      	ldr	r3, [r7, #20]
 810ad78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810ad7c:	2b00      	cmp	r3, #0
 810ad7e:	d002      	beq.n	810ad86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810ad80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810ad84:	e059      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810ad86:	697b      	ldr	r3, [r7, #20]
 810ad88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810ad8c:	2b00      	cmp	r3, #0
 810ad8e:	d002      	beq.n	810ad96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810ad90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810ad94:	e051      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810ad96:	697b      	ldr	r3, [r7, #20]
 810ad98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810ad9c:	2b00      	cmp	r3, #0
 810ad9e:	d002      	beq.n	810ada6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810ada0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810ada4:	e049      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810ada6:	697b      	ldr	r3, [r7, #20]
 810ada8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810adac:	2b00      	cmp	r3, #0
 810adae:	d002      	beq.n	810adb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810adb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810adb4:	e041      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810adb6:	697b      	ldr	r3, [r7, #20]
 810adb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810adbc:	2b00      	cmp	r3, #0
 810adbe:	d002      	beq.n	810adc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810adc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810adc4:	e039      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810adc6:	697b      	ldr	r3, [r7, #20]
 810adc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810adcc:	2b00      	cmp	r3, #0
 810adce:	d002      	beq.n	810add6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810add0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810add4:	e031      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810add6:	697b      	ldr	r3, [r7, #20]
 810add8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810addc:	2b00      	cmp	r3, #0
 810adde:	d002      	beq.n	810ade6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810ade0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810ade4:	e029      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810ade6:	697b      	ldr	r3, [r7, #20]
 810ade8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810adec:	2b00      	cmp	r3, #0
 810adee:	d002      	beq.n	810adf6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810adf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810adf4:	e021      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810adf6:	697b      	ldr	r3, [r7, #20]
 810adf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810adfc:	2b00      	cmp	r3, #0
 810adfe:	d002      	beq.n	810ae06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810ae00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 810ae04:	e019      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810ae06:	697b      	ldr	r3, [r7, #20]
 810ae08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810ae0c:	2b00      	cmp	r3, #0
 810ae0e:	d002      	beq.n	810ae16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810ae10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810ae14:	e011      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810ae16:	697b      	ldr	r3, [r7, #20]
 810ae18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810ae1c:	2b00      	cmp	r3, #0
 810ae1e:	d002      	beq.n	810ae26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810ae20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810ae24:	e009      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810ae26:	697b      	ldr	r3, [r7, #20]
 810ae28:	f003 0308 	and.w	r3, r3, #8
 810ae2c:	2b00      	cmp	r3, #0
 810ae2e:	d002      	beq.n	810ae36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810ae30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 810ae34:	e001      	b.n	810ae3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810ae36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810ae3a:	4618      	mov	r0, r3
 810ae3c:	3720      	adds	r7, #32
 810ae3e:	46bd      	mov	sp, r7
 810ae40:	bd80      	pop	{r7, pc}
 810ae42:	bf00      	nop
 810ae44:	10000000 	.word	0x10000000
 810ae48:	10624dd3 	.word	0x10624dd3
 810ae4c:	00200045 	.word	0x00200045
 810ae50:	002000c5 	.word	0x002000c5
 810ae54:	fdffe008 	.word	0xfdffe008

0810ae58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810ae58:	b480      	push	{r7}
 810ae5a:	b085      	sub	sp, #20
 810ae5c:	af00      	add	r7, sp, #0
 810ae5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810ae60:	4b1f      	ldr	r3, [pc, #124]	; (810aee0 <SDMMC_GetCmdResp2+0x88>)
 810ae62:	681b      	ldr	r3, [r3, #0]
 810ae64:	4a1f      	ldr	r2, [pc, #124]	; (810aee4 <SDMMC_GetCmdResp2+0x8c>)
 810ae66:	fba2 2303 	umull	r2, r3, r2, r3
 810ae6a:	0a5b      	lsrs	r3, r3, #9
 810ae6c:	f241 3288 	movw	r2, #5000	; 0x1388
 810ae70:	fb02 f303 	mul.w	r3, r2, r3
 810ae74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810ae76:	68fb      	ldr	r3, [r7, #12]
 810ae78:	1e5a      	subs	r2, r3, #1
 810ae7a:	60fa      	str	r2, [r7, #12]
 810ae7c:	2b00      	cmp	r3, #0
 810ae7e:	d102      	bne.n	810ae86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810ae80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810ae84:	e026      	b.n	810aed4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810ae86:	687b      	ldr	r3, [r7, #4]
 810ae88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ae8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810ae8c:	68bb      	ldr	r3, [r7, #8]
 810ae8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810ae92:	2b00      	cmp	r3, #0
 810ae94:	d0ef      	beq.n	810ae76 <SDMMC_GetCmdResp2+0x1e>
 810ae96:	68bb      	ldr	r3, [r7, #8]
 810ae98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810ae9c:	2b00      	cmp	r3, #0
 810ae9e:	d1ea      	bne.n	810ae76 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810aea0:	687b      	ldr	r3, [r7, #4]
 810aea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810aea4:	f003 0304 	and.w	r3, r3, #4
 810aea8:	2b00      	cmp	r3, #0
 810aeaa:	d004      	beq.n	810aeb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810aeac:	687b      	ldr	r3, [r7, #4]
 810aeae:	2204      	movs	r2, #4
 810aeb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810aeb2:	2304      	movs	r3, #4
 810aeb4:	e00e      	b.n	810aed4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810aeb6:	687b      	ldr	r3, [r7, #4]
 810aeb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810aeba:	f003 0301 	and.w	r3, r3, #1
 810aebe:	2b00      	cmp	r3, #0
 810aec0:	d004      	beq.n	810aecc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810aec2:	687b      	ldr	r3, [r7, #4]
 810aec4:	2201      	movs	r2, #1
 810aec6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810aec8:	2301      	movs	r3, #1
 810aeca:	e003      	b.n	810aed4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810aecc:	687b      	ldr	r3, [r7, #4]
 810aece:	4a06      	ldr	r2, [pc, #24]	; (810aee8 <SDMMC_GetCmdResp2+0x90>)
 810aed0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810aed2:	2300      	movs	r3, #0
}
 810aed4:	4618      	mov	r0, r3
 810aed6:	3714      	adds	r7, #20
 810aed8:	46bd      	mov	sp, r7
 810aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aede:	4770      	bx	lr
 810aee0:	10000000 	.word	0x10000000
 810aee4:	10624dd3 	.word	0x10624dd3
 810aee8:	002000c5 	.word	0x002000c5

0810aeec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810aeec:	b480      	push	{r7}
 810aeee:	b085      	sub	sp, #20
 810aef0:	af00      	add	r7, sp, #0
 810aef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810aef4:	4b1a      	ldr	r3, [pc, #104]	; (810af60 <SDMMC_GetCmdResp3+0x74>)
 810aef6:	681b      	ldr	r3, [r3, #0]
 810aef8:	4a1a      	ldr	r2, [pc, #104]	; (810af64 <SDMMC_GetCmdResp3+0x78>)
 810aefa:	fba2 2303 	umull	r2, r3, r2, r3
 810aefe:	0a5b      	lsrs	r3, r3, #9
 810af00:	f241 3288 	movw	r2, #5000	; 0x1388
 810af04:	fb02 f303 	mul.w	r3, r2, r3
 810af08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810af0a:	68fb      	ldr	r3, [r7, #12]
 810af0c:	1e5a      	subs	r2, r3, #1
 810af0e:	60fa      	str	r2, [r7, #12]
 810af10:	2b00      	cmp	r3, #0
 810af12:	d102      	bne.n	810af1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810af14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810af18:	e01b      	b.n	810af52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810af1a:	687b      	ldr	r3, [r7, #4]
 810af1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810af1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810af20:	68bb      	ldr	r3, [r7, #8]
 810af22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810af26:	2b00      	cmp	r3, #0
 810af28:	d0ef      	beq.n	810af0a <SDMMC_GetCmdResp3+0x1e>
 810af2a:	68bb      	ldr	r3, [r7, #8]
 810af2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810af30:	2b00      	cmp	r3, #0
 810af32:	d1ea      	bne.n	810af0a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810af34:	687b      	ldr	r3, [r7, #4]
 810af36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810af38:	f003 0304 	and.w	r3, r3, #4
 810af3c:	2b00      	cmp	r3, #0
 810af3e:	d004      	beq.n	810af4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810af40:	687b      	ldr	r3, [r7, #4]
 810af42:	2204      	movs	r2, #4
 810af44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810af46:	2304      	movs	r3, #4
 810af48:	e003      	b.n	810af52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810af4a:	687b      	ldr	r3, [r7, #4]
 810af4c:	4a06      	ldr	r2, [pc, #24]	; (810af68 <SDMMC_GetCmdResp3+0x7c>)
 810af4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810af50:	2300      	movs	r3, #0
}
 810af52:	4618      	mov	r0, r3
 810af54:	3714      	adds	r7, #20
 810af56:	46bd      	mov	sp, r7
 810af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af5c:	4770      	bx	lr
 810af5e:	bf00      	nop
 810af60:	10000000 	.word	0x10000000
 810af64:	10624dd3 	.word	0x10624dd3
 810af68:	002000c5 	.word	0x002000c5

0810af6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810af6c:	b580      	push	{r7, lr}
 810af6e:	b088      	sub	sp, #32
 810af70:	af00      	add	r7, sp, #0
 810af72:	60f8      	str	r0, [r7, #12]
 810af74:	460b      	mov	r3, r1
 810af76:	607a      	str	r2, [r7, #4]
 810af78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810af7a:	4b35      	ldr	r3, [pc, #212]	; (810b050 <SDMMC_GetCmdResp6+0xe4>)
 810af7c:	681b      	ldr	r3, [r3, #0]
 810af7e:	4a35      	ldr	r2, [pc, #212]	; (810b054 <SDMMC_GetCmdResp6+0xe8>)
 810af80:	fba2 2303 	umull	r2, r3, r2, r3
 810af84:	0a5b      	lsrs	r3, r3, #9
 810af86:	f241 3288 	movw	r2, #5000	; 0x1388
 810af8a:	fb02 f303 	mul.w	r3, r2, r3
 810af8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810af90:	69fb      	ldr	r3, [r7, #28]
 810af92:	1e5a      	subs	r2, r3, #1
 810af94:	61fa      	str	r2, [r7, #28]
 810af96:	2b00      	cmp	r3, #0
 810af98:	d102      	bne.n	810afa0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810af9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810af9e:	e052      	b.n	810b046 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810afa0:	68fb      	ldr	r3, [r7, #12]
 810afa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810afa4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810afa6:	69bb      	ldr	r3, [r7, #24]
 810afa8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810afac:	2b00      	cmp	r3, #0
 810afae:	d0ef      	beq.n	810af90 <SDMMC_GetCmdResp6+0x24>
 810afb0:	69bb      	ldr	r3, [r7, #24]
 810afb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810afb6:	2b00      	cmp	r3, #0
 810afb8:	d1ea      	bne.n	810af90 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810afba:	68fb      	ldr	r3, [r7, #12]
 810afbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810afbe:	f003 0304 	and.w	r3, r3, #4
 810afc2:	2b00      	cmp	r3, #0
 810afc4:	d004      	beq.n	810afd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810afc6:	68fb      	ldr	r3, [r7, #12]
 810afc8:	2204      	movs	r2, #4
 810afca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810afcc:	2304      	movs	r3, #4
 810afce:	e03a      	b.n	810b046 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810afd0:	68fb      	ldr	r3, [r7, #12]
 810afd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810afd4:	f003 0301 	and.w	r3, r3, #1
 810afd8:	2b00      	cmp	r3, #0
 810afda:	d004      	beq.n	810afe6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810afdc:	68fb      	ldr	r3, [r7, #12]
 810afde:	2201      	movs	r2, #1
 810afe0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810afe2:	2301      	movs	r3, #1
 810afe4:	e02f      	b.n	810b046 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810afe6:	68f8      	ldr	r0, [r7, #12]
 810afe8:	f7ff fc9e 	bl	810a928 <SDMMC_GetCommandResponse>
 810afec:	4603      	mov	r3, r0
 810afee:	461a      	mov	r2, r3
 810aff0:	7afb      	ldrb	r3, [r7, #11]
 810aff2:	4293      	cmp	r3, r2
 810aff4:	d001      	beq.n	810affa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810aff6:	2301      	movs	r3, #1
 810aff8:	e025      	b.n	810b046 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810affa:	68fb      	ldr	r3, [r7, #12]
 810affc:	4a16      	ldr	r2, [pc, #88]	; (810b058 <SDMMC_GetCmdResp6+0xec>)
 810affe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810b000:	2100      	movs	r1, #0
 810b002:	68f8      	ldr	r0, [r7, #12]
 810b004:	f7ff fc9d 	bl	810a942 <SDMMC_GetResponse>
 810b008:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 810b00a:	697b      	ldr	r3, [r7, #20]
 810b00c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b010:	2b00      	cmp	r3, #0
 810b012:	d106      	bne.n	810b022 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 810b014:	697b      	ldr	r3, [r7, #20]
 810b016:	0c1b      	lsrs	r3, r3, #16
 810b018:	b29a      	uxth	r2, r3
 810b01a:	687b      	ldr	r3, [r7, #4]
 810b01c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810b01e:	2300      	movs	r3, #0
 810b020:	e011      	b.n	810b046 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810b022:	697b      	ldr	r3, [r7, #20]
 810b024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810b028:	2b00      	cmp	r3, #0
 810b02a:	d002      	beq.n	810b032 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810b02c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810b030:	e009      	b.n	810b046 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810b032:	697b      	ldr	r3, [r7, #20]
 810b034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b038:	2b00      	cmp	r3, #0
 810b03a:	d002      	beq.n	810b042 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810b03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b040:	e001      	b.n	810b046 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810b042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810b046:	4618      	mov	r0, r3
 810b048:	3720      	adds	r7, #32
 810b04a:	46bd      	mov	sp, r7
 810b04c:	bd80      	pop	{r7, pc}
 810b04e:	bf00      	nop
 810b050:	10000000 	.word	0x10000000
 810b054:	10624dd3 	.word	0x10624dd3
 810b058:	002000c5 	.word	0x002000c5

0810b05c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810b05c:	b084      	sub	sp, #16
 810b05e:	b580      	push	{r7, lr}
 810b060:	b084      	sub	sp, #16
 810b062:	af00      	add	r7, sp, #0
 810b064:	6078      	str	r0, [r7, #4]
 810b066:	f107 001c 	add.w	r0, r7, #28
 810b06a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b070:	2b01      	cmp	r3, #1
 810b072:	d122      	bne.n	810b0ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810b074:	687b      	ldr	r3, [r7, #4]
 810b076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810b07c:	687b      	ldr	r3, [r7, #4]
 810b07e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810b080:	687b      	ldr	r3, [r7, #4]
 810b082:	68db      	ldr	r3, [r3, #12]
 810b084:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 810b088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810b08c:	687a      	ldr	r2, [r7, #4]
 810b08e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810b090:	687b      	ldr	r3, [r7, #4]
 810b092:	68db      	ldr	r3, [r3, #12]
 810b094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810b098:	687b      	ldr	r3, [r7, #4]
 810b09a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810b09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b09e:	2b01      	cmp	r3, #1
 810b0a0:	d105      	bne.n	810b0ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810b0a2:	687b      	ldr	r3, [r7, #4]
 810b0a4:	68db      	ldr	r3, [r3, #12]
 810b0a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810b0aa:	687b      	ldr	r3, [r7, #4]
 810b0ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 810b0ae:	6878      	ldr	r0, [r7, #4]
 810b0b0:	f000 fa48 	bl	810b544 <USB_CoreReset>
 810b0b4:	4603      	mov	r3, r0
 810b0b6:	73fb      	strb	r3, [r7, #15]
 810b0b8:	e01a      	b.n	810b0f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	68db      	ldr	r3, [r3, #12]
 810b0be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810b0c2:	687b      	ldr	r3, [r7, #4]
 810b0c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 810b0c6:	6878      	ldr	r0, [r7, #4]
 810b0c8:	f000 fa3c 	bl	810b544 <USB_CoreReset>
 810b0cc:	4603      	mov	r3, r0
 810b0ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810b0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810b0d2:	2b00      	cmp	r3, #0
 810b0d4:	d106      	bne.n	810b0e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810b0d6:	687b      	ldr	r3, [r7, #4]
 810b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b0da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810b0de:	687b      	ldr	r3, [r7, #4]
 810b0e0:	639a      	str	r2, [r3, #56]	; 0x38
 810b0e2:	e005      	b.n	810b0f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810b0e4:	687b      	ldr	r3, [r7, #4]
 810b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b0e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810b0ec:	687b      	ldr	r3, [r7, #4]
 810b0ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810b0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b0f2:	2b01      	cmp	r3, #1
 810b0f4:	d10b      	bne.n	810b10e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810b0f6:	687b      	ldr	r3, [r7, #4]
 810b0f8:	689b      	ldr	r3, [r3, #8]
 810b0fa:	f043 0206 	orr.w	r2, r3, #6
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810b102:	687b      	ldr	r3, [r7, #4]
 810b104:	689b      	ldr	r3, [r3, #8]
 810b106:	f043 0220 	orr.w	r2, r3, #32
 810b10a:	687b      	ldr	r3, [r7, #4]
 810b10c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810b10e:	7bfb      	ldrb	r3, [r7, #15]
}
 810b110:	4618      	mov	r0, r3
 810b112:	3710      	adds	r7, #16
 810b114:	46bd      	mov	sp, r7
 810b116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810b11a:	b004      	add	sp, #16
 810b11c:	4770      	bx	lr

0810b11e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810b11e:	b480      	push	{r7}
 810b120:	b083      	sub	sp, #12
 810b122:	af00      	add	r7, sp, #0
 810b124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810b126:	687b      	ldr	r3, [r7, #4]
 810b128:	689b      	ldr	r3, [r3, #8]
 810b12a:	f023 0201 	bic.w	r2, r3, #1
 810b12e:	687b      	ldr	r3, [r7, #4]
 810b130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810b132:	2300      	movs	r3, #0
}
 810b134:	4618      	mov	r0, r3
 810b136:	370c      	adds	r7, #12
 810b138:	46bd      	mov	sp, r7
 810b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b13e:	4770      	bx	lr

0810b140 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810b140:	b580      	push	{r7, lr}
 810b142:	b082      	sub	sp, #8
 810b144:	af00      	add	r7, sp, #0
 810b146:	6078      	str	r0, [r7, #4]
 810b148:	460b      	mov	r3, r1
 810b14a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810b14c:	687b      	ldr	r3, [r7, #4]
 810b14e:	68db      	ldr	r3, [r3, #12]
 810b150:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 810b154:	687b      	ldr	r3, [r7, #4]
 810b156:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810b158:	78fb      	ldrb	r3, [r7, #3]
 810b15a:	2b01      	cmp	r3, #1
 810b15c:	d106      	bne.n	810b16c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	68db      	ldr	r3, [r3, #12]
 810b162:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 810b166:	687b      	ldr	r3, [r7, #4]
 810b168:	60da      	str	r2, [r3, #12]
 810b16a:	e00b      	b.n	810b184 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 810b16c:	78fb      	ldrb	r3, [r7, #3]
 810b16e:	2b00      	cmp	r3, #0
 810b170:	d106      	bne.n	810b180 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	68db      	ldr	r3, [r3, #12]
 810b176:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810b17a:	687b      	ldr	r3, [r7, #4]
 810b17c:	60da      	str	r2, [r3, #12]
 810b17e:	e001      	b.n	810b184 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 810b180:	2301      	movs	r3, #1
 810b182:	e003      	b.n	810b18c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 810b184:	2032      	movs	r0, #50	; 0x32
 810b186:	f7f7 f82d 	bl	81021e4 <HAL_Delay>

  return HAL_OK;
 810b18a:	2300      	movs	r3, #0
}
 810b18c:	4618      	mov	r0, r3
 810b18e:	3708      	adds	r7, #8
 810b190:	46bd      	mov	sp, r7
 810b192:	bd80      	pop	{r7, pc}

0810b194 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810b194:	b084      	sub	sp, #16
 810b196:	b580      	push	{r7, lr}
 810b198:	b086      	sub	sp, #24
 810b19a:	af00      	add	r7, sp, #0
 810b19c:	6078      	str	r0, [r7, #4]
 810b19e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 810b1a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810b1a6:	2300      	movs	r3, #0
 810b1a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b1aa:	687b      	ldr	r3, [r7, #4]
 810b1ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810b1ae:	2300      	movs	r3, #0
 810b1b0:	613b      	str	r3, [r7, #16]
 810b1b2:	e009      	b.n	810b1c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810b1b4:	687a      	ldr	r2, [r7, #4]
 810b1b6:	693b      	ldr	r3, [r7, #16]
 810b1b8:	3340      	adds	r3, #64	; 0x40
 810b1ba:	009b      	lsls	r3, r3, #2
 810b1bc:	4413      	add	r3, r2
 810b1be:	2200      	movs	r2, #0
 810b1c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810b1c2:	693b      	ldr	r3, [r7, #16]
 810b1c4:	3301      	adds	r3, #1
 810b1c6:	613b      	str	r3, [r7, #16]
 810b1c8:	693b      	ldr	r3, [r7, #16]
 810b1ca:	2b0e      	cmp	r3, #14
 810b1cc:	d9f2      	bls.n	810b1b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810b1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b1d0:	2b00      	cmp	r3, #0
 810b1d2:	d11c      	bne.n	810b20e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810b1d4:	68fb      	ldr	r3, [r7, #12]
 810b1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b1da:	685b      	ldr	r3, [r3, #4]
 810b1dc:	68fa      	ldr	r2, [r7, #12]
 810b1de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810b1e2:	f043 0302 	orr.w	r3, r3, #2
 810b1e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810b1e8:	687b      	ldr	r3, [r7, #4]
 810b1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b1ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 810b1f0:	687b      	ldr	r3, [r7, #4]
 810b1f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810b1f4:	687b      	ldr	r3, [r7, #4]
 810b1f6:	681b      	ldr	r3, [r3, #0]
 810b1f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810b1fc:	687b      	ldr	r3, [r7, #4]
 810b1fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810b200:	687b      	ldr	r3, [r7, #4]
 810b202:	681b      	ldr	r3, [r3, #0]
 810b204:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810b208:	687b      	ldr	r3, [r7, #4]
 810b20a:	601a      	str	r2, [r3, #0]
 810b20c:	e005      	b.n	810b21a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810b20e:	687b      	ldr	r3, [r7, #4]
 810b210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b212:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 810b216:	687b      	ldr	r3, [r7, #4]
 810b218:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810b21a:	68fb      	ldr	r3, [r7, #12]
 810b21c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810b220:	461a      	mov	r2, r3
 810b222:	2300      	movs	r3, #0
 810b224:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 810b226:	68fb      	ldr	r3, [r7, #12]
 810b228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b22c:	4619      	mov	r1, r3
 810b22e:	68fb      	ldr	r3, [r7, #12]
 810b230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b234:	461a      	mov	r2, r3
 810b236:	680b      	ldr	r3, [r1, #0]
 810b238:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b23c:	2b01      	cmp	r3, #1
 810b23e:	d10c      	bne.n	810b25a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b242:	2b00      	cmp	r3, #0
 810b244:	d104      	bne.n	810b250 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810b246:	2100      	movs	r1, #0
 810b248:	6878      	ldr	r0, [r7, #4]
 810b24a:	f000 f949 	bl	810b4e0 <USB_SetDevSpeed>
 810b24e:	e008      	b.n	810b262 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810b250:	2101      	movs	r1, #1
 810b252:	6878      	ldr	r0, [r7, #4]
 810b254:	f000 f944 	bl	810b4e0 <USB_SetDevSpeed>
 810b258:	e003      	b.n	810b262 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810b25a:	2103      	movs	r1, #3
 810b25c:	6878      	ldr	r0, [r7, #4]
 810b25e:	f000 f93f 	bl	810b4e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810b262:	2110      	movs	r1, #16
 810b264:	6878      	ldr	r0, [r7, #4]
 810b266:	f000 f8f3 	bl	810b450 <USB_FlushTxFifo>
 810b26a:	4603      	mov	r3, r0
 810b26c:	2b00      	cmp	r3, #0
 810b26e:	d001      	beq.n	810b274 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 810b270:	2301      	movs	r3, #1
 810b272:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810b274:	6878      	ldr	r0, [r7, #4]
 810b276:	f000 f911 	bl	810b49c <USB_FlushRxFifo>
 810b27a:	4603      	mov	r3, r0
 810b27c:	2b00      	cmp	r3, #0
 810b27e:	d001      	beq.n	810b284 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 810b280:	2301      	movs	r3, #1
 810b282:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810b284:	68fb      	ldr	r3, [r7, #12]
 810b286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b28a:	461a      	mov	r2, r3
 810b28c:	2300      	movs	r3, #0
 810b28e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810b290:	68fb      	ldr	r3, [r7, #12]
 810b292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b296:	461a      	mov	r2, r3
 810b298:	2300      	movs	r3, #0
 810b29a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810b29c:	68fb      	ldr	r3, [r7, #12]
 810b29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b2a2:	461a      	mov	r2, r3
 810b2a4:	2300      	movs	r3, #0
 810b2a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b2a8:	2300      	movs	r3, #0
 810b2aa:	613b      	str	r3, [r7, #16]
 810b2ac:	e043      	b.n	810b336 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810b2ae:	693b      	ldr	r3, [r7, #16]
 810b2b0:	015a      	lsls	r2, r3, #5
 810b2b2:	68fb      	ldr	r3, [r7, #12]
 810b2b4:	4413      	add	r3, r2
 810b2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b2ba:	681b      	ldr	r3, [r3, #0]
 810b2bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810b2c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810b2c4:	d118      	bne.n	810b2f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 810b2c6:	693b      	ldr	r3, [r7, #16]
 810b2c8:	2b00      	cmp	r3, #0
 810b2ca:	d10a      	bne.n	810b2e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810b2cc:	693b      	ldr	r3, [r7, #16]
 810b2ce:	015a      	lsls	r2, r3, #5
 810b2d0:	68fb      	ldr	r3, [r7, #12]
 810b2d2:	4413      	add	r3, r2
 810b2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b2d8:	461a      	mov	r2, r3
 810b2da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810b2de:	6013      	str	r3, [r2, #0]
 810b2e0:	e013      	b.n	810b30a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810b2e2:	693b      	ldr	r3, [r7, #16]
 810b2e4:	015a      	lsls	r2, r3, #5
 810b2e6:	68fb      	ldr	r3, [r7, #12]
 810b2e8:	4413      	add	r3, r2
 810b2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b2ee:	461a      	mov	r2, r3
 810b2f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810b2f4:	6013      	str	r3, [r2, #0]
 810b2f6:	e008      	b.n	810b30a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810b2f8:	693b      	ldr	r3, [r7, #16]
 810b2fa:	015a      	lsls	r2, r3, #5
 810b2fc:	68fb      	ldr	r3, [r7, #12]
 810b2fe:	4413      	add	r3, r2
 810b300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b304:	461a      	mov	r2, r3
 810b306:	2300      	movs	r3, #0
 810b308:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810b30a:	693b      	ldr	r3, [r7, #16]
 810b30c:	015a      	lsls	r2, r3, #5
 810b30e:	68fb      	ldr	r3, [r7, #12]
 810b310:	4413      	add	r3, r2
 810b312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b316:	461a      	mov	r2, r3
 810b318:	2300      	movs	r3, #0
 810b31a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810b31c:	693b      	ldr	r3, [r7, #16]
 810b31e:	015a      	lsls	r2, r3, #5
 810b320:	68fb      	ldr	r3, [r7, #12]
 810b322:	4413      	add	r3, r2
 810b324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b328:	461a      	mov	r2, r3
 810b32a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810b32e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b330:	693b      	ldr	r3, [r7, #16]
 810b332:	3301      	adds	r3, #1
 810b334:	613b      	str	r3, [r7, #16]
 810b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b338:	693a      	ldr	r2, [r7, #16]
 810b33a:	429a      	cmp	r2, r3
 810b33c:	d3b7      	bcc.n	810b2ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b33e:	2300      	movs	r3, #0
 810b340:	613b      	str	r3, [r7, #16]
 810b342:	e043      	b.n	810b3cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810b344:	693b      	ldr	r3, [r7, #16]
 810b346:	015a      	lsls	r2, r3, #5
 810b348:	68fb      	ldr	r3, [r7, #12]
 810b34a:	4413      	add	r3, r2
 810b34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b350:	681b      	ldr	r3, [r3, #0]
 810b352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810b356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810b35a:	d118      	bne.n	810b38e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810b35c:	693b      	ldr	r3, [r7, #16]
 810b35e:	2b00      	cmp	r3, #0
 810b360:	d10a      	bne.n	810b378 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810b362:	693b      	ldr	r3, [r7, #16]
 810b364:	015a      	lsls	r2, r3, #5
 810b366:	68fb      	ldr	r3, [r7, #12]
 810b368:	4413      	add	r3, r2
 810b36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b36e:	461a      	mov	r2, r3
 810b370:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810b374:	6013      	str	r3, [r2, #0]
 810b376:	e013      	b.n	810b3a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810b378:	693b      	ldr	r3, [r7, #16]
 810b37a:	015a      	lsls	r2, r3, #5
 810b37c:	68fb      	ldr	r3, [r7, #12]
 810b37e:	4413      	add	r3, r2
 810b380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b384:	461a      	mov	r2, r3
 810b386:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810b38a:	6013      	str	r3, [r2, #0]
 810b38c:	e008      	b.n	810b3a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810b38e:	693b      	ldr	r3, [r7, #16]
 810b390:	015a      	lsls	r2, r3, #5
 810b392:	68fb      	ldr	r3, [r7, #12]
 810b394:	4413      	add	r3, r2
 810b396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b39a:	461a      	mov	r2, r3
 810b39c:	2300      	movs	r3, #0
 810b39e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810b3a0:	693b      	ldr	r3, [r7, #16]
 810b3a2:	015a      	lsls	r2, r3, #5
 810b3a4:	68fb      	ldr	r3, [r7, #12]
 810b3a6:	4413      	add	r3, r2
 810b3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b3ac:	461a      	mov	r2, r3
 810b3ae:	2300      	movs	r3, #0
 810b3b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810b3b2:	693b      	ldr	r3, [r7, #16]
 810b3b4:	015a      	lsls	r2, r3, #5
 810b3b6:	68fb      	ldr	r3, [r7, #12]
 810b3b8:	4413      	add	r3, r2
 810b3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b3be:	461a      	mov	r2, r3
 810b3c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810b3c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b3c6:	693b      	ldr	r3, [r7, #16]
 810b3c8:	3301      	adds	r3, #1
 810b3ca:	613b      	str	r3, [r7, #16]
 810b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b3ce:	693a      	ldr	r2, [r7, #16]
 810b3d0:	429a      	cmp	r2, r3
 810b3d2:	d3b7      	bcc.n	810b344 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810b3d4:	68fb      	ldr	r3, [r7, #12]
 810b3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b3da:	691b      	ldr	r3, [r3, #16]
 810b3dc:	68fa      	ldr	r2, [r7, #12]
 810b3de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810b3e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b3e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810b3e8:	687b      	ldr	r3, [r7, #4]
 810b3ea:	2200      	movs	r2, #0
 810b3ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810b3ee:	687b      	ldr	r3, [r7, #4]
 810b3f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 810b3f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b3f8:	2b00      	cmp	r3, #0
 810b3fa:	d105      	bne.n	810b408 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810b3fc:	687b      	ldr	r3, [r7, #4]
 810b3fe:	699b      	ldr	r3, [r3, #24]
 810b400:	f043 0210 	orr.w	r2, r3, #16
 810b404:	687b      	ldr	r3, [r7, #4]
 810b406:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810b408:	687b      	ldr	r3, [r7, #4]
 810b40a:	699a      	ldr	r2, [r3, #24]
 810b40c:	4b0f      	ldr	r3, [pc, #60]	; (810b44c <USB_DevInit+0x2b8>)
 810b40e:	4313      	orrs	r3, r2
 810b410:	687a      	ldr	r2, [r7, #4]
 810b412:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810b414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b416:	2b00      	cmp	r3, #0
 810b418:	d005      	beq.n	810b426 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810b41a:	687b      	ldr	r3, [r7, #4]
 810b41c:	699b      	ldr	r3, [r3, #24]
 810b41e:	f043 0208 	orr.w	r2, r3, #8
 810b422:	687b      	ldr	r3, [r7, #4]
 810b424:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810b426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b428:	2b01      	cmp	r3, #1
 810b42a:	d107      	bne.n	810b43c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810b42c:	687b      	ldr	r3, [r7, #4]
 810b42e:	699b      	ldr	r3, [r3, #24]
 810b430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810b434:	f043 0304 	orr.w	r3, r3, #4
 810b438:	687a      	ldr	r2, [r7, #4]
 810b43a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810b43c:	7dfb      	ldrb	r3, [r7, #23]
}
 810b43e:	4618      	mov	r0, r3
 810b440:	3718      	adds	r7, #24
 810b442:	46bd      	mov	sp, r7
 810b444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810b448:	b004      	add	sp, #16
 810b44a:	4770      	bx	lr
 810b44c:	803c3800 	.word	0x803c3800

0810b450 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810b450:	b480      	push	{r7}
 810b452:	b085      	sub	sp, #20
 810b454:	af00      	add	r7, sp, #0
 810b456:	6078      	str	r0, [r7, #4]
 810b458:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 810b45a:	2300      	movs	r3, #0
 810b45c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810b45e:	683b      	ldr	r3, [r7, #0]
 810b460:	019b      	lsls	r3, r3, #6
 810b462:	f043 0220 	orr.w	r2, r3, #32
 810b466:	687b      	ldr	r3, [r7, #4]
 810b468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810b46a:	68fb      	ldr	r3, [r7, #12]
 810b46c:	3301      	adds	r3, #1
 810b46e:	60fb      	str	r3, [r7, #12]
 810b470:	68fb      	ldr	r3, [r7, #12]
 810b472:	4a09      	ldr	r2, [pc, #36]	; (810b498 <USB_FlushTxFifo+0x48>)
 810b474:	4293      	cmp	r3, r2
 810b476:	d901      	bls.n	810b47c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 810b478:	2303      	movs	r3, #3
 810b47a:	e006      	b.n	810b48a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810b47c:	687b      	ldr	r3, [r7, #4]
 810b47e:	691b      	ldr	r3, [r3, #16]
 810b480:	f003 0320 	and.w	r3, r3, #32
 810b484:	2b20      	cmp	r3, #32
 810b486:	d0f0      	beq.n	810b46a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 810b488:	2300      	movs	r3, #0
}
 810b48a:	4618      	mov	r0, r3
 810b48c:	3714      	adds	r7, #20
 810b48e:	46bd      	mov	sp, r7
 810b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b494:	4770      	bx	lr
 810b496:	bf00      	nop
 810b498:	00030d40 	.word	0x00030d40

0810b49c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810b49c:	b480      	push	{r7}
 810b49e:	b085      	sub	sp, #20
 810b4a0:	af00      	add	r7, sp, #0
 810b4a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 810b4a4:	2300      	movs	r3, #0
 810b4a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810b4a8:	687b      	ldr	r3, [r7, #4]
 810b4aa:	2210      	movs	r2, #16
 810b4ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810b4ae:	68fb      	ldr	r3, [r7, #12]
 810b4b0:	3301      	adds	r3, #1
 810b4b2:	60fb      	str	r3, [r7, #12]
 810b4b4:	68fb      	ldr	r3, [r7, #12]
 810b4b6:	4a09      	ldr	r2, [pc, #36]	; (810b4dc <USB_FlushRxFifo+0x40>)
 810b4b8:	4293      	cmp	r3, r2
 810b4ba:	d901      	bls.n	810b4c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 810b4bc:	2303      	movs	r3, #3
 810b4be:	e006      	b.n	810b4ce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810b4c0:	687b      	ldr	r3, [r7, #4]
 810b4c2:	691b      	ldr	r3, [r3, #16]
 810b4c4:	f003 0310 	and.w	r3, r3, #16
 810b4c8:	2b10      	cmp	r3, #16
 810b4ca:	d0f0      	beq.n	810b4ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 810b4cc:	2300      	movs	r3, #0
}
 810b4ce:	4618      	mov	r0, r3
 810b4d0:	3714      	adds	r7, #20
 810b4d2:	46bd      	mov	sp, r7
 810b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4d8:	4770      	bx	lr
 810b4da:	bf00      	nop
 810b4dc:	00030d40 	.word	0x00030d40

0810b4e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810b4e0:	b480      	push	{r7}
 810b4e2:	b085      	sub	sp, #20
 810b4e4:	af00      	add	r7, sp, #0
 810b4e6:	6078      	str	r0, [r7, #4]
 810b4e8:	460b      	mov	r3, r1
 810b4ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b4ec:	687b      	ldr	r3, [r7, #4]
 810b4ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810b4f0:	68fb      	ldr	r3, [r7, #12]
 810b4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b4f6:	681a      	ldr	r2, [r3, #0]
 810b4f8:	78fb      	ldrb	r3, [r7, #3]
 810b4fa:	68f9      	ldr	r1, [r7, #12]
 810b4fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810b500:	4313      	orrs	r3, r2
 810b502:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810b504:	2300      	movs	r3, #0
}
 810b506:	4618      	mov	r0, r3
 810b508:	3714      	adds	r7, #20
 810b50a:	46bd      	mov	sp, r7
 810b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b510:	4770      	bx	lr

0810b512 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 810b512:	b580      	push	{r7, lr}
 810b514:	b084      	sub	sp, #16
 810b516:	af00      	add	r7, sp, #0
 810b518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810b51e:	68fb      	ldr	r3, [r7, #12]
 810b520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b524:	685b      	ldr	r3, [r3, #4]
 810b526:	68fa      	ldr	r2, [r7, #12]
 810b528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810b52c:	f043 0302 	orr.w	r3, r3, #2
 810b530:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 810b532:	2003      	movs	r0, #3
 810b534:	f7f6 fe56 	bl	81021e4 <HAL_Delay>

  return HAL_OK;
 810b538:	2300      	movs	r3, #0
}
 810b53a:	4618      	mov	r0, r3
 810b53c:	3710      	adds	r7, #16
 810b53e:	46bd      	mov	sp, r7
 810b540:	bd80      	pop	{r7, pc}
	...

0810b544 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810b544:	b480      	push	{r7}
 810b546:	b085      	sub	sp, #20
 810b548:	af00      	add	r7, sp, #0
 810b54a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 810b54c:	2300      	movs	r3, #0
 810b54e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 810b550:	68fb      	ldr	r3, [r7, #12]
 810b552:	3301      	adds	r3, #1
 810b554:	60fb      	str	r3, [r7, #12]
 810b556:	68fb      	ldr	r3, [r7, #12]
 810b558:	4a13      	ldr	r2, [pc, #76]	; (810b5a8 <USB_CoreReset+0x64>)
 810b55a:	4293      	cmp	r3, r2
 810b55c:	d901      	bls.n	810b562 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810b55e:	2303      	movs	r3, #3
 810b560:	e01b      	b.n	810b59a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810b562:	687b      	ldr	r3, [r7, #4]
 810b564:	691b      	ldr	r3, [r3, #16]
 810b566:	2b00      	cmp	r3, #0
 810b568:	daf2      	bge.n	810b550 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810b56a:	2300      	movs	r3, #0
 810b56c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810b56e:	687b      	ldr	r3, [r7, #4]
 810b570:	691b      	ldr	r3, [r3, #16]
 810b572:	f043 0201 	orr.w	r2, r3, #1
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810b57a:	68fb      	ldr	r3, [r7, #12]
 810b57c:	3301      	adds	r3, #1
 810b57e:	60fb      	str	r3, [r7, #12]
 810b580:	68fb      	ldr	r3, [r7, #12]
 810b582:	4a09      	ldr	r2, [pc, #36]	; (810b5a8 <USB_CoreReset+0x64>)
 810b584:	4293      	cmp	r3, r2
 810b586:	d901      	bls.n	810b58c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810b588:	2303      	movs	r3, #3
 810b58a:	e006      	b.n	810b59a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810b58c:	687b      	ldr	r3, [r7, #4]
 810b58e:	691b      	ldr	r3, [r3, #16]
 810b590:	f003 0301 	and.w	r3, r3, #1
 810b594:	2b01      	cmp	r3, #1
 810b596:	d0f0      	beq.n	810b57a <USB_CoreReset+0x36>

  return HAL_OK;
 810b598:	2300      	movs	r3, #0
}
 810b59a:	4618      	mov	r0, r3
 810b59c:	3714      	adds	r7, #20
 810b59e:	46bd      	mov	sp, r7
 810b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5a4:	4770      	bx	lr
 810b5a6:	bf00      	nop
 810b5a8:	00030d40 	.word	0x00030d40

0810b5ac <__libc_init_array>:
 810b5ac:	b570      	push	{r4, r5, r6, lr}
 810b5ae:	4e0d      	ldr	r6, [pc, #52]	; (810b5e4 <__libc_init_array+0x38>)
 810b5b0:	4c0d      	ldr	r4, [pc, #52]	; (810b5e8 <__libc_init_array+0x3c>)
 810b5b2:	1ba4      	subs	r4, r4, r6
 810b5b4:	10a4      	asrs	r4, r4, #2
 810b5b6:	2500      	movs	r5, #0
 810b5b8:	42a5      	cmp	r5, r4
 810b5ba:	d109      	bne.n	810b5d0 <__libc_init_array+0x24>
 810b5bc:	4e0b      	ldr	r6, [pc, #44]	; (810b5ec <__libc_init_array+0x40>)
 810b5be:	4c0c      	ldr	r4, [pc, #48]	; (810b5f0 <__libc_init_array+0x44>)
 810b5c0:	f000 f82c 	bl	810b61c <_init>
 810b5c4:	1ba4      	subs	r4, r4, r6
 810b5c6:	10a4      	asrs	r4, r4, #2
 810b5c8:	2500      	movs	r5, #0
 810b5ca:	42a5      	cmp	r5, r4
 810b5cc:	d105      	bne.n	810b5da <__libc_init_array+0x2e>
 810b5ce:	bd70      	pop	{r4, r5, r6, pc}
 810b5d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810b5d4:	4798      	blx	r3
 810b5d6:	3501      	adds	r5, #1
 810b5d8:	e7ee      	b.n	810b5b8 <__libc_init_array+0xc>
 810b5da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810b5de:	4798      	blx	r3
 810b5e0:	3501      	adds	r5, #1
 810b5e2:	e7f2      	b.n	810b5ca <__libc_init_array+0x1e>
 810b5e4:	0810b6c8 	.word	0x0810b6c8
 810b5e8:	0810b6c8 	.word	0x0810b6c8
 810b5ec:	0810b6c8 	.word	0x0810b6c8
 810b5f0:	0810b6cc 	.word	0x0810b6cc

0810b5f4 <memcpy>:
 810b5f4:	b510      	push	{r4, lr}
 810b5f6:	1e43      	subs	r3, r0, #1
 810b5f8:	440a      	add	r2, r1
 810b5fa:	4291      	cmp	r1, r2
 810b5fc:	d100      	bne.n	810b600 <memcpy+0xc>
 810b5fe:	bd10      	pop	{r4, pc}
 810b600:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b604:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b608:	e7f7      	b.n	810b5fa <memcpy+0x6>

0810b60a <memset>:
 810b60a:	4402      	add	r2, r0
 810b60c:	4603      	mov	r3, r0
 810b60e:	4293      	cmp	r3, r2
 810b610:	d100      	bne.n	810b614 <memset+0xa>
 810b612:	4770      	bx	lr
 810b614:	f803 1b01 	strb.w	r1, [r3], #1
 810b618:	e7f9      	b.n	810b60e <memset+0x4>
	...

0810b61c <_init>:
 810b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b61e:	bf00      	nop
 810b620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b622:	bc08      	pop	{r3}
 810b624:	469e      	mov	lr, r3
 810b626:	4770      	bx	lr

0810b628 <_fini>:
 810b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b62a:	bf00      	nop
 810b62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b62e:	bc08      	pop	{r3}
 810b630:	469e      	mov	lr, r3
 810b632:	4770      	bx	lr
