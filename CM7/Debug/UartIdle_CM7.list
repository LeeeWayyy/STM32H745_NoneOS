
UartIdle_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002930  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  08002bf0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  08002bf0  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dd6c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a7f  00000000  00000000  0002ddaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007b8  00000000  00000000  0002f830  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  0002ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036ded  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000069c0  00000000  00000000  000674e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0016d37c  00000000  00000000  0006dea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001db221  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001dec  00000000  00000000  001db29c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002bb0 	.word	0x08002bb0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08002bb0 	.word	0x08002bb0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) {
 8000418:	e000      	b.n	800041c <main+0x10>
    asm("nop");
 800041a:	bf00      	nop
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) {
 800041c:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <main+0x84>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1f8      	bne.n	800041a <main+0xe>
  // }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 f9f2 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f832 	bl	8000494 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <main+0x84>)
 8000432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000436:	4a16      	ldr	r2, [pc, #88]	; (8000490 <main+0x84>)
 8000438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <main+0x84>)
 8000442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800044e:	2000      	movs	r0, #0
 8000450:	f000 fb60 	bl	8000b14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000454:	2100      	movs	r1, #0
 8000456:	2000      	movs	r0, #0
 8000458:	f000 fb76 	bl	8000b48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800045c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000460:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000462:	bf00      	nop
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <main+0x84>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800046c:	2b00      	cmp	r3, #0
 800046e:	d104      	bne.n	800047a <main+0x6e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	607a      	str	r2, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	dcf4      	bgt.n	8000464 <main+0x58>
if ( timeout < 0 )
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2b00      	cmp	r3, #0
 800047e:	da01      	bge.n	8000484 <main+0x78>
{
Error_Handler();
 8000480:	f000 f94c 	bl	800071c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f000 f920 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000488:	f000 f904 	bl	8000694 <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048c:	e7fe      	b.n	800048c <main+0x80>
 800048e:	bf00      	nop
 8000490:	58024400 	.word	0x58024400

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0cc      	sub	sp, #304	; 0x130
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800049e:	224c      	movs	r2, #76	; 0x4c
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 fb7c 	bl	8002ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004ac:	2220      	movs	r2, #32
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 fb75 	bl	8002ba0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4618      	mov	r0, r3
 80004bc:	23bc      	movs	r3, #188	; 0xbc
 80004be:	461a      	mov	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f002 fb6d 	bl	8002ba0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004c6:	2004      	movs	r0, #4
 80004c8:	f000 fb52 	bl	8000b70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	4b6c      	ldr	r3, [pc, #432]	; (8000684 <SystemClock_Config+0x1f0>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d6:	4a6b      	ldr	r2, [pc, #428]	; (8000684 <SystemClock_Config+0x1f0>)
 80004d8:	f023 0301 	bic.w	r3, r3, #1
 80004dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004de:	4b69      	ldr	r3, [pc, #420]	; (8000684 <SystemClock_Config+0x1f0>)
 80004e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e2:	f003 0201 	and.w	r2, r3, #1
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	4b67      	ldr	r3, [pc, #412]	; (8000688 <SystemClock_Config+0x1f4>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f2:	4a65      	ldr	r2, [pc, #404]	; (8000688 <SystemClock_Config+0x1f4>)
 80004f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b63      	ldr	r3, [pc, #396]	; (8000688 <SystemClock_Config+0x1f4>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050a:	bf00      	nop
 800050c:	4b5e      	ldr	r3, [pc, #376]	; (8000688 <SystemClock_Config+0x1f4>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000518:	d1f8      	bne.n	800050c <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800051a:	4b5c      	ldr	r3, [pc, #368]	; (800068c <SystemClock_Config+0x1f8>)
 800051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051e:	f023 0303 	bic.w	r3, r3, #3
 8000522:	4a5a      	ldr	r2, [pc, #360]	; (800068c <SystemClock_Config+0x1f8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800052a:	2303      	movs	r3, #3
 800052c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000530:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000534:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000538:	2301      	movs	r3, #1
 800053a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2340      	movs	r3, #64	; 0x40
 8000540:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	2302      	movs	r3, #2
 800054c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 23;
 8000550:	2317      	movs	r3, #23
 8000552:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 177;
 8000556:	23b1      	movs	r3, #177	; 0xb1
 8000558:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000562:	2304      	movs	r3, #4
 8000564:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000568:	2304      	movs	r3, #4
 800056a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000574:	2300      	movs	r3, #0
 8000576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fb5d 	bl	8000c44 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000590:	f000 f8c4 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	233f      	movs	r3, #63	; 0x3f
 8000596:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ff4a 	bl	8001464 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x146>
  {
    Error_Handler();
 80005d6:	f000 f8a1 	bl	800071c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART3
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	4a2c      	ldr	r2, [pc, #176]	; (8000690 <SystemClock_Config+0x1fc>)
 80005e0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2220      	movs	r2, #32
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	2281      	movs	r2, #129	; 0x81
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2202      	movs	r2, #2
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2202      	movs	r2, #2
 8000600:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	2202      	movs	r2, #2
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000612:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800064c:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2200      	movs	r2, #0
 8000654:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800065e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fa24 	bl	8001ab4 <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x1e2>
  {
    Error_Handler();
 8000672:	f000 f853 	bl	800071c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000676:	f000 fad5 	bl	8000c24 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800067a:	bf00      	nop
 800067c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58000400 	.word	0x58000400
 8000688:	58024800 	.word	0x58024800
 800068c:	58024400 	.word	0x58024400
 8000690:	23058202 	.word	0x23058202

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_DMA_Init+0x30>)
 800069c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <MX_DMA_Init+0x30>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_DMA_Init+0x30>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	58024400 	.word	0x58024400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_GPIO_Init+0x50>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <MX_GPIO_Init+0x50>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_GPIO_Init+0x50>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_GPIO_Init+0x50>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <MX_GPIO_Init+0x50>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x50>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	58024400 	.word	0x58024400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_MspInit+0x30>)
 8000734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x30>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x30>)
 8000744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	58024400 	.word	0x58024400

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <MemManage_Handler+0x4>

0800077a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <UsageFault_Handler+0x4>

08000786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 f89e 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007c0:	f7ff fd8a 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007c6:	e003      	b.n	80007d0 <LoopCopyDataInit>

080007c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80007ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007ce:	3104      	adds	r1, #4

080007d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80007d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007d8:	d3f6      	bcc.n	80007c8 <CopyDataInit>
  ldr  r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80007dc:	e002      	b.n	80007e4 <LoopFillZerobss>

080007de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007e0:	f842 3b04 	str.w	r3, [r2], #4

080007e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80007e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007e8:	d3f9      	bcc.n	80007de <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80007ea:	f002 f9b5 	bl	8002b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ee:	f7ff fe0d 	bl	800040c <main>
  bx  lr    
 80007f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007f8:	08002be0 	.word	0x08002be0
  ldr  r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000800:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000804:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000808:	20000030 	.word	0x20000030

0800080c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC3_IRQHandler>
	...

08000810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000816:	2003      	movs	r0, #3
 8000818:	f000 f94a 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800081c:	f000 ffd8 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 8000820:	4601      	mov	r1, r0
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_Init+0x68>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	f003 030f 	and.w	r3, r3, #15
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <HAL_Init+0x6c>)
 800082e:	5cd3      	ldrb	r3, [r2, r3]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	fa21 f303 	lsr.w	r3, r1, r3
 8000838:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_Init+0x68>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_Init+0x6c>)
 8000844:	5cd3      	ldrb	r3, [r2, r3]
 8000846:	f003 031f 	and.w	r3, r3, #31
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	fa22 f303 	lsr.w	r3, r2, r3
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <HAL_Init+0x70>)
 8000852:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000854:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <HAL_Init+0x74>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f814 	bl	8000888 <HAL_InitTick>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e002      	b.n	8000870 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800086a:	f7ff ff5f 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58024400 	.word	0x58024400
 800087c:	08002bc8 	.word	0x08002bc8
 8000880:	20000004 	.word	0x20000004
 8000884:	20000000 	.word	0x20000000

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_InitTick+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	e021      	b.n	80008e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <HAL_InitTick+0x64>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_InitTick+0x60>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f921 	bl	8000afa <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f8f9 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x68>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000000c 	.word	0x2000000c
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x20>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x24>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_IncTick+0x24>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2000000c 	.word	0x2000000c
 8000918:	2000002c 	.word	0x2000002c

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_GetTick+0x14>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	2000002c 	.word	0x2000002c

08000934 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetREVID+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0c1b      	lsrs	r3, r3, #16
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	5c001000 	.word	0x5c001000

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <__NVIC_SetPriorityGrouping+0x40>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	4313      	orrs	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x40>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00
 8000990:	05fa0000 	.word	0x05fa0000

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff47 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff5e 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff90 	bl	8000a04 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5f 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffb2 	bl	8000a6c <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_HSEM_FastTake+0x2c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3320      	adds	r3, #32
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_HSEM_FastTake+0x30>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e000      	b.n	8000b32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	58026400 	.word	0x58026400
 8000b44:	80000300 	.word	0x80000300

08000b48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000b52:	4906      	ldr	r1, [pc, #24]	; (8000b6c <HAL_HSEM_Release+0x24>)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	58026400 	.word	0x58026400

08000b70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	2b06      	cmp	r3, #6
 8000b82:	d00a      	beq.n	8000b9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d001      	beq.n	8000b96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e040      	b.n	8000c18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e03e      	b.n	8000c18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000ba2:	491f      	ldr	r1, [pc, #124]	; (8000c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000baa:	f7ff feb7 	bl	800091c <HAL_GetTick>
 8000bae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000bb0:	e009      	b.n	8000bc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000bb2:	f7ff feb3 	bl	800091c <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bc0:	d901      	bls.n	8000bc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e028      	b.n	8000c18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd2:	d1ee      	bne.n	8000bb2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b1e      	cmp	r3, #30
 8000bd8:	d008      	beq.n	8000bec <HAL_PWREx_ConfigSupply+0x7c>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bde:	d005      	beq.n	8000bec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b1d      	cmp	r3, #29
 8000be4:	d002      	beq.n	8000bec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b2d      	cmp	r3, #45	; 0x2d
 8000bea:	d114      	bne.n	8000c16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000bec:	f7ff fe96 	bl	800091c <HAL_GetTick>
 8000bf0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000bf2:	e009      	b.n	8000c08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000bf4:	f7ff fe92 	bl	800091c <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c02:	d901      	bls.n	8000c08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e007      	b.n	8000c18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c14:	d1ee      	bne.n	8000bf4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58024800 	.word	0x58024800

08000c24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8000c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	58024800 	.word	0x58024800

08000c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e3ff      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 8087 	beq.w	8000d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c64:	4b99      	ldr	r3, [pc, #612]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c6e:	4b97      	ldr	r3, [pc, #604]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	d007      	beq.n	8000c8a <HAL_RCC_OscConfig+0x46>
 8000c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7c:	2b18      	cmp	r3, #24
 8000c7e:	d110      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x5e>
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d10b      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8a:	4b90      	ldr	r3, [pc, #576]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d06c      	beq.n	8000d70 <HAL_RCC_OscConfig+0x12c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d168      	bne.n	8000d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e3d9      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000caa:	d106      	bne.n	8000cba <HAL_RCC_OscConfig+0x76>
 8000cac:	4b87      	ldr	r3, [pc, #540]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a86      	ldr	r2, [pc, #536]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e02e      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x98>
 8000cc2:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a81      	ldr	r2, [pc, #516]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b7f      	ldr	r3, [pc, #508]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a7e      	ldr	r2, [pc, #504]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e01d      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce4:	d10c      	bne.n	8000d00 <HAL_RCC_OscConfig+0xbc>
 8000ce6:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a78      	ldr	r2, [pc, #480]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b76      	ldr	r3, [pc, #472]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a75      	ldr	r2, [pc, #468]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e00b      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000d00:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a71      	ldr	r2, [pc, #452]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a6e      	ldr	r2, [pc, #440]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d013      	beq.n	8000d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d20:	f7ff fdfc 	bl	800091c <HAL_GetTick>
 8000d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fdf8 	bl	800091c <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b64      	cmp	r3, #100	; 0x64
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e38d      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d3a:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f0      	beq.n	8000d28 <HAL_RCC_OscConfig+0xe4>
 8000d46:	e014      	b.n	8000d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d48:	f7ff fde8 	bl	800091c <HAL_GetTick>
 8000d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d50:	f7ff fde4 	bl	800091c <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	; 0x64
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e379      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d62:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f0      	bne.n	8000d50 <HAL_RCC_OscConfig+0x10c>
 8000d6e:	e000      	b.n	8000d72 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80ae 	beq.w	8000edc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d80:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d8a:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <HAL_RCC_OscConfig+0x162>
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	2b18      	cmp	r3, #24
 8000d9a:	d13a      	bne.n	8000e12 <HAL_RCC_OscConfig+0x1ce>
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d135      	bne.n	8000e12 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000da6:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <HAL_RCC_OscConfig+0x17a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e34b      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	f7ff fdb9 	bl	8000934 <HAL_GetREVID>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	f241 0303 	movw	r3, #4099	; 0x1003
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d817      	bhi.n	8000dfc <HAL_RCC_OscConfig+0x1b8>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b40      	cmp	r3, #64	; 0x40
 8000dd2:	d108      	bne.n	8000de6 <HAL_RCC_OscConfig+0x1a2>
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ddc:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000de4:	e07a      	b.n	8000edc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	031b      	lsls	r3, r3, #12
 8000df4:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dfa:	e06f      	b.n	8000edc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	061b      	lsls	r3, r3, #24
 8000e0a:	4930      	ldr	r1, [pc, #192]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e10:	e064      	b.n	8000edc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d045      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f023 0219 	bic.w	r2, r3, #25
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	4929      	ldr	r1, [pc, #164]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fd76 	bl	800091c <HAL_GetTick>
 8000e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e34:	f7ff fd72 	bl	800091c <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e307      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e52:	f7ff fd6f 	bl	8000934 <HAL_GetREVID>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f241 0303 	movw	r3, #4099	; 0x1003
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d817      	bhi.n	8000e90 <HAL_RCC_OscConfig+0x24c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b40      	cmp	r3, #64	; 0x40
 8000e66:	d108      	bne.n	8000e7a <HAL_RCC_OscConfig+0x236>
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e76:	6053      	str	r3, [r2, #4]
 8000e78:	e030      	b.n	8000edc <HAL_RCC_OscConfig+0x298>
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	031b      	lsls	r3, r3, #12
 8000e88:	4910      	ldr	r1, [pc, #64]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	604b      	str	r3, [r1, #4]
 8000e8e:	e025      	b.n	8000edc <HAL_RCC_OscConfig+0x298>
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	490b      	ldr	r1, [pc, #44]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
 8000ea4:	e01a      	b.n	8000edc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_RCC_OscConfig+0x288>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fd33 	bl	800091c <HAL_GetTick>
 8000eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000eb8:	e00a      	b.n	8000ed0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fd2f 	bl	800091c <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d903      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e2c4      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
 8000ecc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ed0:	4ba4      	ldr	r3, [pc, #656]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1ee      	bne.n	8000eba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80a9 	beq.w	800103c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eea:	4b9e      	ldr	r3, [pc, #632]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ef2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ef4:	4b9b      	ldr	r3, [pc, #620]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d007      	beq.n	8000f10 <HAL_RCC_OscConfig+0x2cc>
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b18      	cmp	r3, #24
 8000f04:	d13a      	bne.n	8000f7c <HAL_RCC_OscConfig+0x338>
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d135      	bne.n	8000f7c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f10:	4b94      	ldr	r3, [pc, #592]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2e4>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	2b80      	cmp	r3, #128	; 0x80
 8000f22:	d001      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e296      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f28:	f7ff fd04 	bl	8000934 <HAL_GetREVID>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d817      	bhi.n	8000f66 <HAL_RCC_OscConfig+0x322>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d108      	bne.n	8000f50 <HAL_RCC_OscConfig+0x30c>
 8000f3e:	4b89      	ldr	r3, [pc, #548]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000f46:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f4c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f4e:	e075      	b.n	800103c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f50:	4b84      	ldr	r3, [pc, #528]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	069b      	lsls	r3, r3, #26
 8000f5e:	4981      	ldr	r1, [pc, #516]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f64:	e06a      	b.n	800103c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f66:	4b7f      	ldr	r3, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	061b      	lsls	r3, r3, #24
 8000f74:	497b      	ldr	r1, [pc, #492]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f7a:	e05f      	b.n	800103c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d042      	beq.n	800100a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000f84:	4b77      	ldr	r3, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a76      	ldr	r2, [pc, #472]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f90:	f7ff fcc4 	bl	800091c <HAL_GetTick>
 8000f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000f98:	f7ff fcc0 	bl	800091c <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e255      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000faa:	4b6e      	ldr	r3, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fb6:	f7ff fcbd 	bl	8000934 <HAL_GetREVID>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f241 0303 	movw	r3, #4099	; 0x1003
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d817      	bhi.n	8000ff4 <HAL_RCC_OscConfig+0x3b0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	2b20      	cmp	r3, #32
 8000fca:	d108      	bne.n	8000fde <HAL_RCC_OscConfig+0x39a>
 8000fcc:	4b65      	ldr	r3, [pc, #404]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000fd4:	4a63      	ldr	r2, [pc, #396]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fda:	6053      	str	r3, [r2, #4]
 8000fdc:	e02e      	b.n	800103c <HAL_RCC_OscConfig+0x3f8>
 8000fde:	4b61      	ldr	r3, [pc, #388]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	069b      	lsls	r3, r3, #26
 8000fec:	495d      	ldr	r1, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
 8000ff2:	e023      	b.n	800103c <HAL_RCC_OscConfig+0x3f8>
 8000ff4:	4b5b      	ldr	r3, [pc, #364]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4958      	ldr	r1, [pc, #352]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001004:	4313      	orrs	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
 8001008:	e018      	b.n	800103c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a55      	ldr	r2, [pc, #340]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001016:	f7ff fc81 	bl	800091c <HAL_GetTick>
 800101a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800101e:	f7ff fc7d 	bl	800091c <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e212      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001030:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d036      	beq.n	80010b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d019      	beq.n	8001084 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001054:	4a43      	ldr	r2, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105c:	f7ff fc5e 	bl	800091c <HAL_GetTick>
 8001060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fc5a 	bl	800091c <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1ef      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0x420>
 8001082:	e018      	b.n	80010b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001088:	4a36      	ldr	r2, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001090:	f7ff fc44 	bl	800091c <HAL_GetTick>
 8001094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff fc40 	bl	800091c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1d5      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 80010ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d036      	beq.n	8001130 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d019      	beq.n	80010fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a25      	ldr	r2, [pc, #148]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fc21 	bl	800091c <HAL_GetTick>
 80010da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80010de:	f7ff fc1d 	bl	800091c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1b2      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x49a>
 80010fc:	e018      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001104:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001108:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc07 	bl	800091c <HAL_GetTick>
 800110e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001112:	f7ff fc03 	bl	800091c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e198      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_RCC_OscConfig+0x520>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 8085 	beq.w	8001248 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_RCC_OscConfig+0x524>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_RCC_OscConfig+0x524>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800114a:	f7ff fbe7 	bl	800091c <HAL_GetTick>
 800114e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001150:	e00c      	b.n	800116c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001152:	f7ff fbe3 	bl	800091c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d905      	bls.n	800116c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e178      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
 8001164:	58024400 	.word	0x58024400
 8001168:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800116c:	4b96      	ldr	r3, [pc, #600]	; (80013c8 <HAL_RCC_OscConfig+0x784>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0ec      	beq.n	8001152 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x54a>
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001184:	4a91      	ldr	r2, [pc, #580]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6713      	str	r3, [r2, #112]	; 0x70
 800118c:	e02d      	b.n	80011ea <HAL_RCC_OscConfig+0x5a6>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x56c>
 8001196:	4b8d      	ldr	r3, [pc, #564]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119a:	4a8c      	ldr	r2, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6713      	str	r3, [r2, #112]	; 0x70
 80011a2:	4b8a      	ldr	r3, [pc, #552]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	4a89      	ldr	r2, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	6713      	str	r3, [r2, #112]	; 0x70
 80011ae:	e01c      	b.n	80011ea <HAL_RCC_OscConfig+0x5a6>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d10c      	bne.n	80011d2 <HAL_RCC_OscConfig+0x58e>
 80011b8:	4b84      	ldr	r3, [pc, #528]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011bc:	4a83      	ldr	r2, [pc, #524]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6713      	str	r3, [r2, #112]	; 0x70
 80011c4:	4b81      	ldr	r3, [pc, #516]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c8:	4a80      	ldr	r2, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6713      	str	r3, [r2, #112]	; 0x70
 80011d0:	e00b      	b.n	80011ea <HAL_RCC_OscConfig+0x5a6>
 80011d2:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	4a7d      	ldr	r2, [pc, #500]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d015      	beq.n	800121e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb93 	bl	800091c <HAL_GetTick>
 80011f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fb8f 	bl	800091c <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e122      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001210:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ee      	beq.n	80011fa <HAL_RCC_OscConfig+0x5b6>
 800121c:	e014      	b.n	8001248 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff fb7d 	bl	800091c <HAL_GetTick>
 8001222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fb79 	bl	800091c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e10c      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800123c:	4b63      	ldr	r3, [pc, #396]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ee      	bne.n	8001226 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8101 	beq.w	8001454 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800125a:	2b18      	cmp	r3, #24
 800125c:	f000 80bc 	beq.w	80013d8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 8095 	bne.w	8001394 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a57      	ldr	r2, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fb51 	bl	800091c <HAL_GetTick>
 800127a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fb4d 	bl	800091c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0e2      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800129e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <HAL_RCC_OscConfig+0x78c>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	430a      	orrs	r2, r1
 80012b0:	4946      	ldr	r1, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	628b      	str	r3, [r1, #40]	; 0x28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	3b01      	subs	r3, #1
 80012c6:	025b      	lsls	r3, r3, #9
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	3b01      	subs	r3, #1
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	3b01      	subs	r3, #1
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80012e6:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	4a36      	ldr	r2, [pc, #216]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80012fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_RCC_OscConfig+0x790>)
 80012fe:	4013      	ands	r3, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	4931      	ldr	r1, [pc, #196]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001308:	4313      	orrs	r3, r2
 800130a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	f023 020c 	bic.w	r2, r3, #12
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	492c      	ldr	r1, [pc, #176]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800131a:	4313      	orrs	r3, r2
 800131c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f023 0202 	bic.w	r2, r3, #2
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4928      	ldr	r1, [pc, #160]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800132c:	4313      	orrs	r3, r2
 800132e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800134e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fad6 	bl	800091c <HAL_GetTick>
 8001370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fad2 	bl	800091c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e067      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x730>
 8001392:	e05f      	b.n	8001454 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 800139a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800139e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fabc 	bl	800091c <HAL_GetTick>
 80013a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fab8 	bl	800091c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e04d      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_RCC_OscConfig+0x788>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x764>
 80013c6:	e045      	b.n	8001454 <HAL_RCC_OscConfig+0x810>
 80013c8:	58024800 	.word	0x58024800
 80013cc:	58024400 	.word	0x58024400
 80013d0:	fffffc0c 	.word	0xfffffc0c
 80013d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_RCC_OscConfig+0x81c>)
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_RCC_OscConfig+0x81c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d031      	beq.n	8001450 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d12a      	bne.n	8001450 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d122      	bne.n	8001450 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d11a      	bne.n	8001450 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0a5b      	lsrs	r3, r3, #9
 800141e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d111      	bne.n	8001450 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d108      	bne.n	8001450 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	0e1b      	lsrs	r3, r3, #24
 8001442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3730      	adds	r7, #48	; 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	58024400 	.word	0x58024400

08001464 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e19c      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b8a      	ldr	r3, [pc, #552]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d910      	bls.n	80014a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b87      	ldr	r3, [pc, #540]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 020f 	bic.w	r2, r3, #15
 800148e:	4985      	ldr	r1, [pc, #532]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b83      	ldr	r3, [pc, #524]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e184      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d010      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d908      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4975      	ldr	r1, [pc, #468]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d908      	bls.n	8001504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80014f2:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	496a      	ldr	r1, [pc, #424]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001500:	4313      	orrs	r3, r2
 8001502:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d010      	beq.n	8001532 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800151c:	429a      	cmp	r2, r3
 800151e:	d908      	bls.n	8001532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	495e      	ldr	r1, [pc, #376]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 800152e:	4313      	orrs	r3, r2
 8001530:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	2b00      	cmp	r3, #0
 800153c:	d010      	beq.n	8001560 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800154a:	429a      	cmp	r2, r3
 800154c:	d908      	bls.n	8001560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4953      	ldr	r1, [pc, #332]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 800155c:	4313      	orrs	r3, r2
 800155e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d010      	beq.n	800158e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	429a      	cmp	r2, r3
 800157a:	d908      	bls.n	800158e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f023 020f 	bic.w	r2, r3, #15
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4947      	ldr	r1, [pc, #284]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 800158a:	4313      	orrs	r3, r2
 800158c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d055      	beq.n	8001646 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4940      	ldr	r1, [pc, #256]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d121      	bne.n	8001604 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0f6      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d115      	bne.n	8001604 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0ea      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d109      	bne.n	8001604 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0de      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015f4:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0d6      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f023 0207 	bic.w	r2, r3, #7
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4925      	ldr	r1, [pc, #148]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001612:	4313      	orrs	r3, r2
 8001614:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff f981 	bl	800091c <HAL_GetTick>
 800161a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161c:	e00a      	b.n	8001634 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161e:	f7ff f97d 	bl	800091c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0be      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	429a      	cmp	r2, r3
 8001644:	d1eb      	bne.n	800161e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d010      	beq.n	8001674 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	429a      	cmp	r2, r3
 8001660:	d208      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f023 020f 	bic.w	r2, r3, #15
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	490e      	ldr	r1, [pc, #56]	; (80016a8 <HAL_RCC_ClockConfig+0x244>)
 8001670:	4313      	orrs	r3, r2
 8001672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d214      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 020f 	bic.w	r2, r3, #15
 800168a:	4906      	ldr	r1, [pc, #24]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_RCC_ClockConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e086      	b.n	80017b2 <HAL_RCC_ClockConfig+0x34e>
 80016a4:	52002000 	.word	0x52002000
 80016a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d010      	beq.n	80016da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d208      	bcs.n	80016da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80016c8:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d010      	beq.n	8001708 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d208      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	492e      	ldr	r1, [pc, #184]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 8001704:	4313      	orrs	r3, r2
 8001706:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d010      	beq.n	8001736 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001720:	429a      	cmp	r2, r3
 8001722:	d208      	bcs.n	8001736 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4922      	ldr	r1, [pc, #136]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 8001732:	4313      	orrs	r3, r2
 8001734:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	2b00      	cmp	r3, #0
 8001740:	d010      	beq.n	8001764 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800174e:	429a      	cmp	r2, r3
 8001750:	d208      	bcs.n	8001764 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4917      	ldr	r1, [pc, #92]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 8001760:	4313      	orrs	r3, r2
 8001762:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001764:	f000 f834 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 8001768:	4601      	mov	r1, r0
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_RCC_ClockConfig+0x35c>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	fa21 f303 	lsr.w	r3, r1, r3
 8001780:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_RCC_ClockConfig+0x358>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_RCC_ClockConfig+0x35c>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_RCC_ClockConfig+0x360>)
 800179a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x364>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_RCC_ClockConfig+0x368>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f86e 	bl	8000888 <HAL_InitTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	58024400 	.word	0x58024400
 80017c0:	08002bc8 	.word	0x08002bc8
 80017c4:	20000004 	.word	0x20000004
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008

080017d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d6:	4baf      	ldr	r3, [pc, #700]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017de:	2b18      	cmp	r3, #24
 80017e0:	f200 814e 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x2b0>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	08001851 	.word	0x08001851
 80017f0:	08001a81 	.word	0x08001a81
 80017f4:	08001a81 	.word	0x08001a81
 80017f8:	08001a81 	.word	0x08001a81
 80017fc:	08001a81 	.word	0x08001a81
 8001800:	08001a81 	.word	0x08001a81
 8001804:	08001a81 	.word	0x08001a81
 8001808:	08001a81 	.word	0x08001a81
 800180c:	08001877 	.word	0x08001877
 8001810:	08001a81 	.word	0x08001a81
 8001814:	08001a81 	.word	0x08001a81
 8001818:	08001a81 	.word	0x08001a81
 800181c:	08001a81 	.word	0x08001a81
 8001820:	08001a81 	.word	0x08001a81
 8001824:	08001a81 	.word	0x08001a81
 8001828:	08001a81 	.word	0x08001a81
 800182c:	0800187d 	.word	0x0800187d
 8001830:	08001a81 	.word	0x08001a81
 8001834:	08001a81 	.word	0x08001a81
 8001838:	08001a81 	.word	0x08001a81
 800183c:	08001a81 	.word	0x08001a81
 8001840:	08001a81 	.word	0x08001a81
 8001844:	08001a81 	.word	0x08001a81
 8001848:	08001a81 	.word	0x08001a81
 800184c:	08001883 	.word	0x08001883
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001850:	4b90      	ldr	r3, [pc, #576]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800185c:	4b8d      	ldr	r3, [pc, #564]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	4a8c      	ldr	r2, [pc, #560]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800186e:	e10a      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001870:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001872:	61bb      	str	r3, [r7, #24]
    break;
 8001874:	e107      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001876:	4b89      	ldr	r3, [pc, #548]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001878:	61bb      	str	r3, [r7, #24]
    break;
 800187a:	e104      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800187c:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800187e:	61bb      	str	r3, [r7, #24]
    break;
 8001880:	e101      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001882:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001896:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80018a2:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	08db      	lsrs	r3, r3, #3
 80018a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80da 	beq.w	8001a7a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d05a      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x1b2>
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d302      	bcc.n	80018d6 <HAL_RCC_GetSysClockFreq+0x106>
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d078      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80018d4:	e099      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d02d      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80018e2:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	08db      	lsrs	r3, r3, #3
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	4a6a      	ldr	r2, [pc, #424]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800190c:	4b61      	ldr	r3, [pc, #388]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800191c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001920:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001aa4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800192c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001938:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800193c:	e087      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001948:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001aa8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800194c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001950:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001960:	ed97 6a02 	vldr	s12, [r7, #8]
 8001964:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001aa4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800196c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001980:	e065      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001aac <HAL_RCC_GetSysClockFreq+0x2dc>
 8001990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80019a8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001aa4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80019ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80019c4:	e043      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001ab0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80019d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80019ec:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001aa4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80019f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a08:	e021      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a14:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001aac <HAL_RCC_GetSysClockFreq+0x2dc>
 8001a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a30:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001aa4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a4c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a58:	3301      	adds	r3, #1
 8001a5a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001a78:	e005      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
    break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001a82:	61bb      	str	r3, [r7, #24]
    break;
 8001a84:	bf00      	nop
  }

  return sysclockfreq;
 8001a86:	69bb      	ldr	r3, [r7, #24]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3724      	adds	r7, #36	; 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	58024400 	.word	0x58024400
 8001a98:	03d09000 	.word	0x03d09000
 8001a9c:	003d0900 	.word	0x003d0900
 8001aa0:	017d7840 	.word	0x017d7840
 8001aa4:	46000000 	.word	0x46000000
 8001aa8:	4c742400 	.word	0x4c742400
 8001aac:	4a742400 	.word	0x4a742400
 8001ab0:	4bbebc20 	.word	0x4bbebc20

08001ab4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001abc:	2300      	movs	r3, #0
 8001abe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03d      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad8:	d013      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ade:	d802      	bhi.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ae4:	e01f      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001ae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aea:	d013      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001af0:	d01c      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001af2:	e018      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001af4:	4baf      	ldr	r3, [pc, #700]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	4aae      	ldr	r2, [pc, #696]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001b00:	e015      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2102      	movs	r1, #2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fec1 	bl	8002890 <RCCEx_PLL2_Config>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001b12:	e00c      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3324      	adds	r3, #36	; 0x24
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 ff6a 	bl	80029f4 <RCCEx_PLL3_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001b24:	e003      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
      break;
 8001b2a:	e000      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001b34:	4b9f      	ldr	r3, [pc, #636]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b40:	499c      	ldr	r1, [pc, #624]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	650b      	str	r3, [r1, #80]	; 0x50
 8001b46:	e001      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03d      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d826      	bhi.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b7d 	.word	0x08001b7d
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b9d 	.word	0x08001b9d
 8001b74:	08001bb5 	.word	0x08001bb5
 8001b78:	08001bb5 	.word	0x08001bb5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b7c:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	4a8c      	ldr	r2, [pc, #560]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001b88:	e015      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fe7d 	bl	8002890 <RCCEx_PLL2_Config>
 8001b96:	4603      	mov	r3, r0
 8001b98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001b9a:	e00c      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3324      	adds	r3, #36	; 0x24
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 ff26 	bl	80029f4 <RCCEx_PLL3_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001bac:	e003      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8001bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bbc:	4b7d      	ldr	r3, [pc, #500]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc0:	f023 0207 	bic.w	r2, r3, #7
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	497a      	ldr	r1, [pc, #488]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	650b      	str	r3, [r1, #80]	; 0x50
 8001bce:	e001      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03e      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d01c      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d804      	bhi.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d00d      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8001bf4:	e01e      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8001bf8:	d01f      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bfe:	d01e      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001c00:	e018      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c02:	4b6c      	ldr	r3, [pc, #432]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	4a6b      	ldr	r2, [pc, #428]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001c0e:	e017      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3304      	adds	r3, #4
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fe3a 	bl	8002890 <RCCEx_PLL2_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001c20:	e00e      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3324      	adds	r3, #36	; 0x24
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fee3 	bl	80029f4 <RCCEx_PLL3_Config>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001c32:	e005      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	75fb      	strb	r3, [r7, #23]
      break;
 8001c38:	e002      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e000      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8001c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4958      	ldr	r1, [pc, #352]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	650b      	str	r3, [r1, #80]	; 0x50
 8001c58:	e001      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d044      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c74:	d01f      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8001c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7a:	d805      	bhi.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c84:	d00e      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8001c86:	e01f      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8001c88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001c8c:	d01f      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8001c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c92:	d01e      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001c94:	e018      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	4a46      	ldr	r2, [pc, #280]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001ca2:	e017      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fdf0 	bl	8002890 <RCCEx_PLL2_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001cb4:	e00e      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3324      	adds	r3, #36	; 0x24
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fe99 	bl	80029f4 <RCCEx_PLL3_Config>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	75fb      	strb	r3, [r7, #23]
      break;
 8001ccc:	e002      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8001cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001cda:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ce8:	4932      	ldr	r1, [pc, #200]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	658b      	str	r3, [r1, #88]	; 0x58
 8001cee:	e001      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d044      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d0a:	d01f      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d10:	d805      	bhi.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8001d16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1a:	d00e      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8001d1c:	e01f      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8001d1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d22:	d01f      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d28:	d01e      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8001d2a:	e018      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001d38:	e017      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fda5 	bl	8002890 <RCCEx_PLL2_Config>
 8001d46:	4603      	mov	r3, r0
 8001d48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001d4a:	e00e      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3324      	adds	r3, #36	; 0x24
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fe4e 	bl	80029f4 <RCCEx_PLL3_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001d5c:	e005      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
      break;
 8001d62:	e002      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8001d64:	bf00      	nop
 8001d66:	e000      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8001d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	658b      	str	r3, [r1, #88]	; 0x58
 8001d84:	e001      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d035      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d00c      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d802      	bhi.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01b      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8001da6:	e017      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d00c      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8001dac:	2b30      	cmp	r3, #48	; 0x30
 8001dae:	d018      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8001db0:	e012      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8001db2:	bf00      	nop
 8001db4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001db8:	4baf      	ldr	r3, [pc, #700]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	4aae      	ldr	r2, [pc, #696]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001dc4:	e00e      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2102      	movs	r1, #2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fd5f 	bl	8002890 <RCCEx_PLL2_Config>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001dd6:	e005      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	75fb      	strb	r3, [r7, #23]
      break;
 8001ddc:	e002      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8001dde:	bf00      	nop
 8001de0:	e000      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8001de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001dea:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	49a0      	ldr	r1, [pc, #640]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001dfc:	e001      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d042      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e16:	d01f      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8001e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e1c:	d805      	bhi.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8001e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e26:	d00e      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8001e28:	e01f      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8001e2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e2e:	d01f      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8001e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e34:	d01e      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8001e36:	e018      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e38:	4b8f      	ldr	r3, [pc, #572]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	4a8e      	ldr	r2, [pc, #568]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001e44:	e017      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fd1f 	bl	8002890 <RCCEx_PLL2_Config>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001e56:	e00e      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3324      	adds	r3, #36	; 0x24
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fdc8 	bl	80029f4 <RCCEx_PLL3_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001e68:	e005      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8001e6e:	e002      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8001e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001e7c:	4b7e      	ldr	r3, [pc, #504]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	497b      	ldr	r1, [pc, #492]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8001e8e:	e001      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d042      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ea8:	d01b      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eae:	d805      	bhi.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d022      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x446>
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8001ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ec0:	d01d      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8001ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec6:	d01c      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8001ec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ecc:	d01b      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8001ece:	e011      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fcda 	bl	8002890 <RCCEx_PLL2_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8001ee0:	e012      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3324      	adds	r3, #36	; 0x24
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fd83 	bl	80029f4 <RCCEx_PLL3_Config>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8001ef2:	e009      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ef8:	e006      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001efa:	bf00      	nop
 8001efc:	e004      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001efe:	bf00      	nop
 8001f00:	e002      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001f02:	bf00      	nop
 8001f04:	e000      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	4957      	ldr	r1, [pc, #348]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	650b      	str	r3, [r1, #80]	; 0x50
 8001f20:	e001      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d044      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f3c:	d01b      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8001f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f42:	d805      	bhi.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d022      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8001f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001f4e:	e01b      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d01d      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8001f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f5a:	d01c      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8001f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001f60:	d01b      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8001f62:	e011      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fc90 	bl	8002890 <RCCEx_PLL2_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8001f74:	e012      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3324      	adds	r3, #36	; 0x24
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fd39 	bl	80029f4 <RCCEx_PLL3_Config>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8001f86:	e009      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f8c:	e006      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001f8e:	bf00      	nop
 8001f90:	e004      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001f92:	bf00      	nop
 8001f94:	e002      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001f96:	bf00      	nop
 8001f98:	e000      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001fa2:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001fb0:	4931      	ldr	r1, [pc, #196]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	658b      	str	r3, [r1, #88]	; 0x58
 8001fb6:	e001      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d02d      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fd0:	d005      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8001fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x538>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8001fdc:	e00f      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8001fea:	e00c      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fc4c 	bl	8002890 <RCCEx_PLL2_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8001ffc:	e003      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
      break;
 8002002:	e000      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800200e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002010:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002018:	4917      	ldr	r1, [pc, #92]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	650b      	str	r3, [r1, #80]	; 0x50
 800201e:	e001      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d035      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	2b03      	cmp	r3, #3
 8002036:	d81b      	bhi.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	0800207d 	.word	0x0800207d
 8002044:	08002051 	.word	0x08002051
 8002048:	0800205f 	.word	0x0800205f
 800204c:	0800207d 	.word	0x0800207d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800205c:	e00f      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	2102      	movs	r1, #2
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fc13 	bl	8002890 <RCCEx_PLL2_Config>
 800206a:	4603      	mov	r3, r0
 800206c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800206e:	e006      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	75fb      	strb	r3, [r7, #23]
      break;
 8002074:	e003      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002076:	bf00      	nop
 8002078:	58024400 	.word	0x58024400
      break;
 800207c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002084:	4bba      	ldr	r3, [pc, #744]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	f023 0203 	bic.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	49b7      	ldr	r1, [pc, #732]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8086 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020aa:	4bb2      	ldr	r3, [pc, #712]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4ab1      	ldr	r2, [pc, #708]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b6:	f7fe fc31 	bl	800091c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020bc:	e009      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7fe fc2d 	bl	800091c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d902      	bls.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	75fb      	strb	r3, [r7, #23]
        break;
 80020d0:	e005      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d2:	4ba8      	ldr	r3, [pc, #672]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ef      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d166      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80020e4:	4ba2      	ldr	r3, [pc, #648]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020ee:	4053      	eors	r3, r2
 80020f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f8:	4b9d      	ldr	r3, [pc, #628]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002100:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002102:	4b9b      	ldr	r3, [pc, #620]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a9a      	ldr	r2, [pc, #616]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800210e:	4b98      	ldr	r3, [pc, #608]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a97      	ldr	r2, [pc, #604]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800211a:	4a95      	ldr	r2, [pc, #596]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212a:	d115      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fbf6 	bl	800091c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002132:	e00b      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7fe fbf2 	bl	800091c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d902      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	75fb      	strb	r3, [r7, #23]
            break;
 800214a:	e005      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800214c:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ed      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d126      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800216c:	d10d      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800216e:	4b80      	ldr	r3, [pc, #512]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800217c:	0919      	lsrs	r1, r3, #4
 800217e:	4b7e      	ldr	r3, [pc, #504]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002180:	400b      	ands	r3, r1
 8002182:	497b      	ldr	r1, [pc, #492]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	610b      	str	r3, [r1, #16]
 8002188:	e005      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800218a:	4b79      	ldr	r3, [pc, #484]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	4a78      	ldr	r2, [pc, #480]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002190:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002194:	6113      	str	r3, [r2, #16]
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002198:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	4972      	ldr	r1, [pc, #456]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	670b      	str	r3, [r1, #112]	; 0x70
 80021aa:	e004      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	75bb      	strb	r3, [r7, #22]
 80021b0:	e001      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d07d      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021c6:	2b28      	cmp	r3, #40	; 0x28
 80021c8:	d866      	bhi.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	0800229f 	.word	0x0800229f
 80021d4:	08002299 	.word	0x08002299
 80021d8:	08002299 	.word	0x08002299
 80021dc:	08002299 	.word	0x08002299
 80021e0:	08002299 	.word	0x08002299
 80021e4:	08002299 	.word	0x08002299
 80021e8:	08002299 	.word	0x08002299
 80021ec:	08002299 	.word	0x08002299
 80021f0:	08002275 	.word	0x08002275
 80021f4:	08002299 	.word	0x08002299
 80021f8:	08002299 	.word	0x08002299
 80021fc:	08002299 	.word	0x08002299
 8002200:	08002299 	.word	0x08002299
 8002204:	08002299 	.word	0x08002299
 8002208:	08002299 	.word	0x08002299
 800220c:	08002299 	.word	0x08002299
 8002210:	08002287 	.word	0x08002287
 8002214:	08002299 	.word	0x08002299
 8002218:	08002299 	.word	0x08002299
 800221c:	08002299 	.word	0x08002299
 8002220:	08002299 	.word	0x08002299
 8002224:	08002299 	.word	0x08002299
 8002228:	08002299 	.word	0x08002299
 800222c:	08002299 	.word	0x08002299
 8002230:	0800229f 	.word	0x0800229f
 8002234:	08002299 	.word	0x08002299
 8002238:	08002299 	.word	0x08002299
 800223c:	08002299 	.word	0x08002299
 8002240:	08002299 	.word	0x08002299
 8002244:	08002299 	.word	0x08002299
 8002248:	08002299 	.word	0x08002299
 800224c:	08002299 	.word	0x08002299
 8002250:	0800229f 	.word	0x0800229f
 8002254:	08002299 	.word	0x08002299
 8002258:	08002299 	.word	0x08002299
 800225c:	08002299 	.word	0x08002299
 8002260:	08002299 	.word	0x08002299
 8002264:	08002299 	.word	0x08002299
 8002268:	08002299 	.word	0x08002299
 800226c:	08002299 	.word	0x08002299
 8002270:	0800229f 	.word	0x0800229f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fb08 	bl	8002890 <RCCEx_PLL2_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002284:	e00c      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3324      	adds	r3, #36	; 0x24
 800228a:	2101      	movs	r1, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fbb1 	bl	80029f4 <RCCEx_PLL3_Config>
 8002292:	4603      	mov	r3, r0
 8002294:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002296:	e003      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	75fb      	strb	r3, [r7, #23]
      break;
 800229c:	e000      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800229e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80022a6:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022b2:	492f      	ldr	r1, [pc, #188]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	654b      	str	r3, [r1, #84]	; 0x54
 80022b8:	e001      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d037      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d820      	bhi.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80022d2:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	0800231b 	.word	0x0800231b
 80022dc:	080022f1 	.word	0x080022f1
 80022e0:	08002303 	.word	0x08002303
 80022e4:	0800231b 	.word	0x0800231b
 80022e8:	0800231b 	.word	0x0800231b
 80022ec:	0800231b 	.word	0x0800231b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 faca 	bl	8002890 <RCCEx_PLL2_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002300:	e00c      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3324      	adds	r3, #36	; 0x24
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb73 	bl	80029f4 <RCCEx_PLL3_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002312:	e003      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	75fb      	strb	r3, [r7, #23]
      break;
 8002318:	e000      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800231a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232e:	4910      	ldr	r1, [pc, #64]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	654b      	str	r3, [r1, #84]	; 0x54
 8002334:	e001      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d040      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	2b05      	cmp	r3, #5
 800234e:	d827      	bhi.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	080023a7 	.word	0x080023a7
 800235c:	0800237d 	.word	0x0800237d
 8002360:	0800238f 	.word	0x0800238f
 8002364:	080023a7 	.word	0x080023a7
 8002368:	080023a7 	.word	0x080023a7
 800236c:	080023a7 	.word	0x080023a7
 8002370:	58024400 	.word	0x58024400
 8002374:	58024800 	.word	0x58024800
 8002378:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	2101      	movs	r1, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fa84 	bl	8002890 <RCCEx_PLL2_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800238c:	e00c      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3324      	adds	r3, #36	; 0x24
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fb2d 	bl	80029f4 <RCCEx_PLL3_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800239e:	e003      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
      break;
 80023a4:	e000      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80023a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ae:	4bb2      	ldr	r3, [pc, #712]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f023 0207 	bic.w	r2, r3, #7
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	49ae      	ldr	r1, [pc, #696]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	658b      	str	r3, [r1, #88]	; 0x58
 80023c2:	e001      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d044      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023de:	d01b      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80023e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e4:	d805      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d022      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80023ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80023f0:	e01b      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d01d      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80023f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023fc:	d01c      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80023fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002402:	d01b      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002404:	e011      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fa3f 	bl	8002890 <RCCEx_PLL2_Config>
 8002412:	4603      	mov	r3, r0
 8002414:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002416:	e012      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3324      	adds	r3, #36	; 0x24
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fae8 	bl	80029f4 <RCCEx_PLL3_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002428:	e009      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
      break;
 800242e:	e006      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002430:	bf00      	nop
 8002432:	e004      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002434:	bf00      	nop
 8002436:	e002      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800243c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002444:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002452:	4989      	ldr	r1, [pc, #548]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	654b      	str	r3, [r1, #84]	; 0x54
 8002458:	e001      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d044      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002474:	d01b      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800247a:	d805      	bhi.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d022      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002486:	e01b      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248c:	d01d      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800248e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002492:	d01c      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002498:	d01b      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800249a:	e011      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f9f4 	bl	8002890 <RCCEx_PLL2_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80024ac:	e012      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3324      	adds	r3, #36	; 0x24
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fa9d 	bl	80029f4 <RCCEx_PLL3_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80024be:	e009      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
      break;
 80024c4:	e006      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80024c6:	bf00      	nop
 80024c8:	e004      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80024ca:	bf00      	nop
 80024cc:	e002      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80024d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e8:	4963      	ldr	r1, [pc, #396]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	658b      	str	r3, [r1, #88]	; 0x58
 80024ee:	e001      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d044      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800250a:	d01b      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800250c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002510:	d805      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d022      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800251c:	e01b      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800251e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002522:	d01d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002524:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002528:	d01c      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800252a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800252e:	d01b      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002530:	e011      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3304      	adds	r3, #4
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f9a9 	bl	8002890 <RCCEx_PLL2_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002542:	e012      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	2102      	movs	r1, #2
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fa52 	bl	80029f4 <RCCEx_PLL3_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002554:	e009      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
      break;
 800255a:	e006      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800255c:	bf00      	nop
 800255e:	e004      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002560:	bf00      	nop
 8002562:	e002      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002564:	bf00      	nop
 8002566:	e000      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002570:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800257e:	493e      	ldr	r1, [pc, #248]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	658b      	str	r3, [r1, #88]	; 0x58
 8002584:	e001      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800259c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a0:	d10a      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3324      	adds	r3, #36	; 0x24
 80025a6:	2102      	movs	r1, #2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fa23 	bl	80029f4 <RCCEx_PLL3_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c6:	492c      	ldr	r1, [pc, #176]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e2:	d10a      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3324      	adds	r3, #36	; 0x24
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fa02 	bl	80029f4 <RCCEx_PLL3_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002608:	491b      	ldr	r1, [pc, #108]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d032      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d00d      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8002626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800262a:	d016      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f92a 	bl	8002890 <RCCEx_PLL2_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002640:	e00c      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3324      	adds	r3, #36	; 0x24
 8002646:	2102      	movs	r1, #2
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f9d3 	bl	80029f4 <RCCEx_PLL3_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002652:	e003      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	75fb      	strb	r3, [r7, #23]
      break;
 8002658:	e000      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800265a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002670:	4901      	ldr	r1, [pc, #4]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	658b      	str	r3, [r1, #88]	; 0x58
 8002676:	e003      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8002678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02f      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002696:	d00c      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002698:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800269c:	d015      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d10f      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a4:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	4a78      	ldr	r2, [pc, #480]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80026aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80026b0:	e00c      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3324      	adds	r3, #36	; 0x24
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f99b 	bl	80029f4 <RCCEx_PLL3_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80026c2:	e003      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
      break;
 80026c8:	e000      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80026ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e0:	496a      	ldr	r1, [pc, #424]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	654b      	str	r3, [r1, #84]	; 0x54
 80026e6:	e001      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d029      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d007      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8002706:	e00f      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002708:	4b60      	ldr	r3, [pc, #384]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	4a5f      	ldr	r2, [pc, #380]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002714:	e00b      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f8b7 	bl	8002890 <RCCEx_PLL2_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002726:	e002      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
      break;
 800272c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002734:	4b55      	ldr	r3, [pc, #340]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	4952      	ldr	r1, [pc, #328]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002746:	e001      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3324      	adds	r3, #36	; 0x24
 800275c:	2102      	movs	r1, #2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f948 	bl	80029f4 <RCCEx_PLL3_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02f      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002782:	d00c      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002788:	d802      	bhi.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d011      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800278e:	e00d      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d00f      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800279a:	d00e      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800279c:	e006      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	4a3a      	ldr	r2, [pc, #232]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80027aa:	e007      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
      break;
 80027b0:	e004      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80027b2:	bf00      	nop
 80027b4:	e002      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80027b6:	bf00      	nop
 80027b8:	e000      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80027ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ce:	492f      	ldr	r1, [pc, #188]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	654b      	str	r3, [r1, #84]	; 0x54
 80027d4:	e001      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4926      	ldr	r1, [pc, #152]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002812:	491e      	ldr	r1, [pc, #120]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002828:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800284c:	6113      	str	r3, [r2, #16]
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da08      	bge.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002872:	4906      	ldr	r1, [pc, #24]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002874:	4313      	orrs	r3, r2
 8002876:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002878:	7dbb      	ldrb	r3, [r7, #22]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	58024400 	.word	0x58024400

08002890 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800289e:	4b53      	ldr	r3, [pc, #332]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d101      	bne.n	80028ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e099      	b.n	80029e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80028ae:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80028b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ba:	f7fe f82f 	bl	800091c <HAL_GetTick>
 80028be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80028c2:	f7fe f82b 	bl	800091c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e086      	b.n	80029e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028d4:	4b45      	ldr	r3, [pc, #276]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	031b      	lsls	r3, r3, #12
 80028ee:	493f      	ldr	r1, [pc, #252]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	628b      	str	r3, [r1, #40]	; 0x28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	3b01      	subs	r3, #1
 8002904:	025b      	lsls	r3, r3, #9
 8002906:	b29b      	uxth	r3, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	3b01      	subs	r3, #1
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	3b01      	subs	r3, #1
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002924:	4931      	ldr	r1, [pc, #196]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002926:	4313      	orrs	r3, r2
 8002928:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	492d      	ldr	r1, [pc, #180]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	f023 0220 	bic.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4928      	ldr	r1, [pc, #160]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800294e:	4b27      	ldr	r3, [pc, #156]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	4a26      	ldr	r2, [pc, #152]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002954:	f023 0310 	bic.w	r3, r3, #16
 8002958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 800295c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <RCCEx_PLL2_Config+0x160>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	69d2      	ldr	r2, [r2, #28]
 8002966:	00d2      	lsls	r2, r2, #3
 8002968:	4920      	ldr	r1, [pc, #128]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 800296a:	4313      	orrs	r3, r2
 800296c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800296e:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002974:	f043 0310 	orr.w	r3, r3, #16
 8002978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800298a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800298c:	e00f      	b.n	80029ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 800299a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800299e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80029a0:	e005      	b.n	80029ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	4a11      	ldr	r2, [pc, #68]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80029a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80029b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ba:	f7fd ffaf 	bl	800091c <HAL_GetTick>
 80029be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80029c2:	f7fd ffab 	bl	800091c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e006      	b.n	80029e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <RCCEx_PLL2_Config+0x15c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	ffff0007 	.word	0xffff0007

080029f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002a02:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d101      	bne.n	8002a12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e099      	b.n	8002b46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002a12:	4b4f      	ldr	r3, [pc, #316]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4e      	ldr	r2, [pc, #312]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1e:	f7fd ff7d 	bl	800091c <HAL_GetTick>
 8002a22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002a26:	f7fd ff79 	bl	800091c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e086      	b.n	8002b46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002a38:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	051b      	lsls	r3, r3, #20
 8002a52:	493f      	ldr	r1, [pc, #252]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	628b      	str	r3, [r1, #40]	; 0x28
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	025b      	lsls	r3, r3, #9
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a88:	4931      	ldr	r1, [pc, #196]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	492d      	ldr	r1, [pc, #180]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4928      	ldr	r1, [pc, #160]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <RCCEx_PLL3_Config+0x160>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	69d2      	ldr	r2, [r2, #28]
 8002aca:	00d2      	lsls	r2, r2, #3
 8002acc:	4920      	ldr	r1, [pc, #128]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d106      	bne.n	8002af2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002aea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002af0:	e00f      	b.n	8002b12 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d106      	bne.n	8002b06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002afe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002b04:	e005      	b.n	8002b12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1e:	f7fd fefd 	bl	800091c <HAL_GetTick>
 8002b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002b24:	e008      	b.n	8002b38 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002b26:	f7fd fef9 	bl	800091c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e006      	b.n	8002b46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <RCCEx_PLL3_Config+0x15c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	58024400 	.word	0x58024400
 8002b54:	ffff0007 	.word	0xffff0007

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4e0d      	ldr	r6, [pc, #52]	; (8002b90 <__libc_init_array+0x38>)
 8002b5c:	4c0d      	ldr	r4, [pc, #52]	; (8002b94 <__libc_init_array+0x3c>)
 8002b5e:	1ba4      	subs	r4, r4, r6
 8002b60:	10a4      	asrs	r4, r4, #2
 8002b62:	2500      	movs	r5, #0
 8002b64:	42a5      	cmp	r5, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	4e0b      	ldr	r6, [pc, #44]	; (8002b98 <__libc_init_array+0x40>)
 8002b6a:	4c0c      	ldr	r4, [pc, #48]	; (8002b9c <__libc_init_array+0x44>)
 8002b6c:	f000 f820 	bl	8002bb0 <_init>
 8002b70:	1ba4      	subs	r4, r4, r6
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	2500      	movs	r5, #0
 8002b76:	42a5      	cmp	r5, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b80:	4798      	blx	r3
 8002b82:	3501      	adds	r5, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b8a:	4798      	blx	r3
 8002b8c:	3501      	adds	r5, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	08002bd8 	.word	0x08002bd8
 8002b94:	08002bd8 	.word	0x08002bd8
 8002b98:	08002bd8 	.word	0x08002bd8
 8002b9c:	08002bdc 	.word	0x08002bdc

08002ba0 <memset>:
 8002ba0:	4402      	add	r2, r0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d100      	bne.n	8002baa <memset+0xa>
 8002ba8:	4770      	bx	lr
 8002baa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bae:	e7f9      	b.n	8002ba4 <memset+0x4>

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
